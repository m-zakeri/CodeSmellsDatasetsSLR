Authors,Author(s) ID,Title,Year,Source title,Volume,Issue,Art. No.,Page start,Page end,Page count,Cited by,DOI,Link,Affiliations,Authors with affiliations,Abstract,Author Keywords,Index Keywords,Funding Details,Funding Text 1,Funding Text 2,Funding Text 3,Funding Text 4,Funding Text 5,Funding Text 6,Funding Text 7,Funding Text 8,Funding Text 9,Funding Text 10,Correspondence Address,Editors,Publisher,ISSN,ISBN,CODEN,PubMed ID,Language of Original Document,Abbreviated Source Title,Document Type,Publication Stage,Open Access,Source,EID
"Wang H., Liu J., Kang J., Yin W., Sun H., Wang H.","57224617787;55705933200;57211391876;57195674493;55547141353;57216290974;","Feature Envy detection based on Bi-LSTM with self-attention mechanism",2020,"Proceedings - 2020 IEEE International Symposium on Parallel and Distributed Processing with Applications, 2020 IEEE International Conference on Big Data and Cloud Computing, 2020 IEEE International Symposium on Social Computing and Networking and 2020 IEEE International Conference on Sustainable Computing and Communications, ISPA-BDCloud-SocialCom-SustainCom 2020",,,"9444004","448","457",,1,"10.1109/ISPA-BDCloud-SocialCom-SustainCom51426.2020.00082","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85108027397&doi=10.1109%2fISPA-BDCloud-SocialCom-SustainCom51426.2020.00082&partnerID=40&md5=d0b56a02fc3e4e08a430cbb9dd28cbd1","Shanghai Key Laboratory of Trustworthy Computing, East China Normal University, Shanghai, China; China Aeronautical Radio Electronics Research Institute, Shanghai, China","Wang, H., Shanghai Key Laboratory of Trustworthy Computing, East China Normal University, Shanghai, China; Liu, J., Shanghai Key Laboratory of Trustworthy Computing, East China Normal University, Shanghai, China; Kang, J., China Aeronautical Radio Electronics Research Institute, Shanghai, China; Yin, W., China Aeronautical Radio Electronics Research Institute, Shanghai, China; Sun, H., Shanghai Key Laboratory of Trustworthy Computing, East China Normal University, Shanghai, China; Wang, H., China Aeronautical Radio Electronics Research Institute, Shanghai, China","Code Smell refers to suboptimal or harmful structures in the source code that may impede the maintainability of software. It serves as an effective way to detect refactoring opportunities. As the most prevailing smell, Feature Envy and its detection has been deeply explored for many years, which produces massive automated detection methods. Nevertheless, the heuristic-based approach cannot reach a satisfying level, and the machine learning approach still needs further optimization. Recent advances in deep learning inspire the birth of deep learning based approach. In this paper, we define a simpler distance metric as numerical feature and we collect class name and method name as text feature. Then we leverage Bidirectional Long-Short Term Memory (Bi-LSTM) Network with self-attention mechanism to extract semantic distance information in the text part, and we adopt embedding technology to enhance the structure distance information in the numerical part. Combined with the two sophisticatedly designed modules and the final classification module, a more reliable and accurate model is presented. Experimental results on seven open-source Java projects show that our model significantly outperforms existing methods. © 2020 IEEE.","Bi-LSTM; Code smell; Feature Envy Detection; Self-Attention Mechanism","Big data; Cloud computing; Codes (symbols); Deep learning; Feature extraction; Numerical methods; Open source software; Semantics; Social networking (online); Accurate modeling; Attention mechanisms; Automated detection; Distance information; Learning-based approach; Machine learning approaches; Numerical features; Semantic distance; Long short-term memory","ZF1213; National Natural Science Foundation of China, NSFC: 61972150; National Key Research and Development Program of China, NKRDPC: 2019YFA0706404","This work was supported in part by the National Key Research and Development Project 2019YFA0706404, in part by the NSFC under Project 61972150, and in part by the Shanghai Knowledge Service Platform under Project ZF1213.",,,,,,,,,,"Liu, J.; Shanghai Key Laboratory of Trustworthy Computing, China; email: jliu@sei.ecnu.edu.cn","Hu J.Min G.Georgalas N.Zhao Z.Hao F.Miao W.","Institute of Electrical and Electronics Engineers Inc.",,9781665414852,,,"English","Proc. - IEEE Int. Symp. Parallel Distrib. Process. Appl., IEEE Int. Conf. Big Data Cloud Comput., IEEE Int. Symp. Soc. Comput. Netw. IEEE Int. Conf. Sustain. Comput. Commun., ISPA-BDCloud-SocialCom-SustainCom",Conference Paper,"Final","",Scopus,2-s2.0-85108027397
"Li G., Tang Y., Zhang X., Yi B.","57204144584;55181590900;57221515902;57222334409;","A deep learning based approach to detect code clones",2020,"Proceedings - 2020 International Conference on Intelligent Computing and Human-Computer Interaction, ICHCI 2020",,,"9424815","337","340",,,"10.1109/ICHCI51889.2020.00078","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85106431132&doi=10.1109%2fICHCI51889.2020.00078&partnerID=40&md5=a00fce7126adf9a1ae23156c4e4dc612","National Innovation Institute of Defense Technology, Beijing, China","Li, G., National Innovation Institute of Defense Technology, Beijing, China; Tang, Y., National Innovation Institute of Defense Technology, Beijing, China; Zhang, X., National Innovation Institute of Defense Technology, Beijing, China; Yi, B., National Innovation Institute of Defense Technology, Beijing, China","Code clone is a kind of code smells widely exists in practice. Such code smell may lead to serious problems, e.g., code redundancy and code inconsistency. To reduce the negative impact of code clones, researchers have proposed different approaches to detect and remove code clones. However, existing code clone detection approaches mostly rely on manually designed and fine-tuned heuristic rules. Such approaches cannot be exploited in different projects and the precision of them needs to improve further. To this end, this paper proposes a deep learning based approach to detect code clones by statically extracting syntactic features from the ASTs of source files. Evaluation results suggest that the proposed approach is effective in detecting code clones, its precision is around 90%. © 2020 IEEE.","Code clone; Deep learning; Software quality","Cloning; Human computer interaction; Intelligent computing; Code clone detection; Code redundancy; Code smell; Evaluation results; Heuristic rules; Learning-based approach; Source files; Syntactic features; Deep learning",,,,,,,,,,,,"Zhang, X.; National Innovation Institute of Defense TechnologyChina; email: xtangee@hotmail.com",,"Institute of Electrical and Electronics Engineers Inc.",,9781665423168,,,"English","Proc. - Int. Conf. Intell. Comput. Hum.-Comput. Interact., ICHCI",Conference Paper,"Final","",Scopus,2-s2.0-85106431132
"Tang G., Meng L., Wang H., Ren S., Wang Q., Yang L., Cao W.","57215544716;57215545789;54790335900;57220888025;57199479507;57198986898;57195309486;","A Comparative Study of Neural Network Techniques for Automatic Software Vulnerability Detection",2020,"Proceedings - 2020 International Symposium on Theoretical Aspects of Software Engineering, TASE 2020",,,"9405265","1","8",,5,"10.1109/TASE49443.2020.00010","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85105412850&doi=10.1109%2fTASE49443.2020.00010&partnerID=40&md5=d032dad7b596aeaf1ab7ed3377f62111","School of Computer Science and Technology, Harbin Engineering University, Harbin, China; National Key Laboratory of Science and Technology on Information System Security, Institute of System Engineering, Chinese Academy of Military Science, Beijing, China; College of Computer Science and Software Engineering, Shenzhen University, Shenzhen, China","Tang, G., School of Computer Science and Technology, Harbin Engineering University, Harbin, China; Meng, L., School of Computer Science and Technology, Harbin Engineering University, Harbin, China; Wang, H., School of Computer Science and Technology, Harbin Engineering University, Harbin, China; Ren, S., National Key Laboratory of Science and Technology on Information System Security, Institute of System Engineering, Chinese Academy of Military Science, Beijing, China; Wang, Q., National Key Laboratory of Science and Technology on Information System Security, Institute of System Engineering, Chinese Academy of Military Science, Beijing, China; Yang, L., National Key Laboratory of Science and Technology on Information System Security, Institute of System Engineering, Chinese Academy of Military Science, Beijing, China; Cao, W., College of Computer Science and Software Engineering, Shenzhen University, Shenzhen, China","Software vulnerabilities are usually caused by design flaws or implementation errors, which could be exploited to cause damage to the security of the system. At present, the most commonly used method for detecting software vulnerabilities is static analysis. Most of the related technologies work based on rules or code similarity (source code level) and rely on manually defined vulnerability features. However, these rules and vulnerability features are difficult to be defined and designed accurately, which makes static analysis face many challenges in practical applications. To alleviate this problem, some researchers have proposed to use neural networks that have the ability of automatic feature extraction to improve the intelligence of detection. However, there are many types of neural networks, and different data preprocessing methods will have a significant impact on model performance. It is a great challenge for engineers and researchers to choose a proper neural network and data preprocessing method for a given problem. To solve this problem, we have conducted extensive experiments to test the performance of the two most typical neural networks (i.e., Bi-LSTM and RVFL) with the two most classical data preprocessing methods (i.e., the vector representation and the program symbolization methods) on software vulnerability detection problems and obtained a series of interesting research conclusions, which can provide valuable guidelines for researchers and engineers. Specifically, we found that 1) the training speed of RVFL is always faster than Bi-LSTM, but the prediction accuracy of Bi-LSTM model is higher than RVFL; 2) using doc2vec for vector representation can make the model have faster training speed and generalization ability than using word2vec; and 3) multi-level symbolization is helpful to improve the precision of neural network models. © 2020 IEEE.","Bi-LSTM; machine learning; neural network; RVFL; software vulnerability","Feature extraction; Network security; Software testing; Static analysis; Automatic feature extraction; Comparative studies; Generalization ability; Implementation error; Neural network model; Neural network techniques; Software vulnerabilities; Vector representations; Long short-term memory","TICPSH202003008-ZC; National Natural Science Foundation of China, NSFC: 61872104","This research is partially supported by the vulnerability analysis technology for UAV communication protocol project of National Key Laboratory of Science and Technology on Information System Security, the Natural Science Foundation of China (No. 61872104), and the Opening Project of Shanghai Trusted Industrial Control Platform (TICPSH202003008-ZC).",,,,,,,,,,"Wang, H.; School of Computer Science and Technology, China
Yang, L.; National Key Laboratory of Science and Technology on Information System Security, China","Aoki T.Li Q.","Institute of Electrical and Electronics Engineers Inc.",,9781728140865,,,"English","Proc. - Int. Symp. Theor. Aspects Softw. Eng., TASE",Conference Paper,"Final","All Open Access, Green",Scopus,2-s2.0-85105412850
"Tummalapalli S., Kumar L., Neti L.B.M., Krishna A.","57190253628;56120791500;57192228561;57209052897;","An Empirical Analysis on the Role of WSDL Metrics in Web Service Anti-Pattern Prediction",2020,"Proceedings - 2020 IEEE 22nd International Conference on High Performance Computing and Communications, IEEE 18th International Conference on Smart City and IEEE 6th International Conference on Data Science and Systems, HPCC-SmartCity-DSS 2020",,,"9407977","559","564",,,"10.1109/HPCC-SmartCity-DSS50907.2020.00070","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85105306383&doi=10.1109%2fHPCC-SmartCity-DSS50907.2020.00070&partnerID=40&md5=5d2d4333a6bd531d4d3732f4f81303a0","BITS-Pilani, Hyderabad, India; Curtin University, Australia","Tummalapalli, S., BITS-Pilani, Hyderabad, India; Kumar, L., BITS-Pilani, Hyderabad, India; Neti, L.B.M., BITS-Pilani, Hyderabad, India; Krishna, A., Curtin University, Australia","Service-Oriented Architecture (SOA) is one of the most well-known models for designing web systems. SOA system evolution and maintenance is challenging because of its distributive nature and secondly due to the demand of designing high-quality, stable interfaces. This evolution leads to a problem called Anti-patterns in web services. It is observed that these anti-patterns negatively impact the evolution and maintenance of software systems, making the early detection and correction of them a primary concern for the software developers. The primary motivation of this work is to investigate the relationship between the Web Service Description Language(WSDL) metrics and anti-patterns in web services. This research aims to develop an automatic method for the detection of web service anti-patterns. The core idea of the methodology defined is to identify the most crucial WSDL metrics with the association of various feature selection techniques for the prediction of anti-patterns. Experimental results show that the model developed by using all the WSDL quantity metrics(AM) shows a bit high performance compared to the models developed with the other metric sets. Experimental results also showed that the performance of the models generated using Decision Tree(DT) and Major Voting Ensemble(MVE) is high compared to the models generated using other classifier techniques. © 2020 IEEE.","Anti-patterns; Data Sampling; Feature Selection; Machine Learning; Neural Networks; Web Services; WSDL metrics","Data communication systems; Data Science; Decision trees; Information services; Quality of service; Service oriented architecture (SOA); Smart city; Websites; Anti-patterns; Automatic method; Empirical analysis; Selection techniques; Software developer; Software systems; System evolution; Web service description language; Web services",,"VII. ACKNOWLEDGEMENTS This research is funded by TestAIng Solutions Pvt. Ltd.",,,,,,,,,,,,"Institute of Electrical and Electronics Engineers Inc.",,9781728176499,,,"English","Proc. - IEEE Int. Conf. High Perform. Comput. Commun., IEEE Int. Conf. Smart City IEEE Int. Conf. Data Sci. Syst., HPCC-SmartCity-DSS",Conference Paper,"Final","",Scopus,2-s2.0-85105306383
"Moreira G.Y.D.O., Santos J.A.M.","57222494324;56712246700;","Applying coupling and cohesion concepts in object-oriented software: A controlled experiment",2020,"ACM International Conference Proceeding Series",,,"3439969","","",,,"10.1145/3439961.3439969","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85102881294&doi=10.1145%2f3439961.3439969&partnerID=40&md5=bda3acfab023d81b4b5634ffdde8c9d9","State University of Feira de Santana, Brazil","Moreira, G.Y.D.O., State University of Feira de Santana, Brazil; Santos, J.A.M., State University of Feira de Santana, Brazil","Context: Coupling and cohesion concepts support the object-oriented (OO) design activity. A better design implies less coupled and more cohesive classes. Thus, it is expected studies on OO design investigate issues impacting the good application of these concepts. However, most studies in the area have focused on high-level metaphors, such as code smells and design patterns; or software metrics. Objective: This study aims to build empirical evidence reinforcing that basic concepts deserve more attention towards better OO design the study investigates the application of coupling and cohesion concepts during programming activity. Two topics are addressed: i) how developer characteristics (""previous knowledge on the concepts""and ""developers experience"") impact on software design during programming activity; and ii) the differences in applying the concepts, independently. Method: A quasi-experiment with 17 participants the participants were graduate and undergraduate students, but all have professional experience in software development the software they programmed was compared with the experiment's oracle in terms of the application of coupling and cohesion concepts. Result: One finding is previous knowledge on the concepts impacts on design quality, in some way; while developers experience doesn't. Another finding is: Application of cohesion is significantly easier than application of coupling. Conclusion: A conjecture based on these findings is training on basic OO principles (including formal education) might be more relevant than developer experience towards better software design. At last, the topic needs more investigation. We suggest this approach brings a complementary perspective of analysis to discuss the topic. © 2020 ACM.","cohesion; coupling; object oriented; programming","Application programs; Computer software selection and evaluation; Software design; Students; Controlled experiment; Object oriented design; Object oriented software; Professional experiences; Programming activities; Quasi-experiments; Software metrics; Undergraduate students; Object oriented programming",,,,,,,,,,,,,,"Association for Computing Machinery",,9781450389235,,,"English","ACM Int. Conf. Proc. Ser.",Conference Paper,"Final","",Scopus,2-s2.0-85102881294
"Shen L., Liu W., Chen X., Gu Q., Liu X.","57222333746;56413365400;57189091783;57205368016;36976111400;","Improving machine learning-based code smell detection via hyper-parameter optimization",2020,"Proceedings - Asia-Pacific Software Engineering Conference, APSEC","2020-December",,"9359294","276","285",,1,"10.1109/APSEC51365.2020.00036","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85102361663&doi=10.1109%2fAPSEC51365.2020.00036&partnerID=40&md5=c49ef6a8d2e7118337a543df45030969","School of Computer Science and Technology, Nanjing Tech University, Nanjing, China; State Key Laboratory for Novel Software Technology, Nanjing University, Nanjing, China; State Key Laboratory for Novel Software Technology, Nanjing University, Nanjing, China","Shen, L., School of Computer Science and Technology, Nanjing Tech University, Nanjing, China; Liu, W., School of Computer Science and Technology, Nanjing Tech University, Nanjing, China, State Key Laboratory for Novel Software Technology, Nanjing University, Nanjing, China; Chen, X., State Key Laboratory for Novel Software Technology, Nanjing University, Nanjing, China, State Key Laboratory for Novel Software Technology, Nanjing University, Nanjing, China; Gu, Q., State Key Laboratory for Novel Software Technology, Nanjing University, Nanjing, China; Liu, X., School of Computer Science and Technology, Nanjing Tech University, Nanjing, China","Unlike code errors, the presence of code smell often does not affect the behavior of the software system, but it will cause quality problems in terms of readability, understandability, and efficiency. To improve the software quality and reduce the maintenance costs, the developers need to detect code smells rapidly and make corresponding code refactoring. In code smell detection, recently, machine learning-based methods become more prevalent and can overcome the shortcomings of the heuristic-based methods, which mainly rely on manually designed rules. However, to our best knowledge, there is little research to analyze whether using hyper-parameter optimization can improve the performance of machine learning-based methods. In this study, we mainly focus on two classical code smells (i.e., Data Class and Feature Envy). First, we consider four optimizers for hyper-parameter optimization, and six commonly used classifiers for machine-learning-based methods. Second, we use AUC as the performance measure to evaluate the performance of constructed models. Based on final empirical results, we find that (1) Using hyper-parameter optimization can significantly improve the performance of code smell detection. (2) Differential evolution (DE) optimizer can achieve better performance than the other three optimizers when using the random forest classifier. (3) We can further improve the performance of code smell detection when performing parameter optimization on the DE optimizer. © 2020 IEEE.","code smell detection; differential evolution; hyperparameter optimization; machine learning","Computer software selection and evaluation; Decision trees; Evolutionary algorithms; Heuristic methods; Machine learning; Odors; Software quality; Code re-factoring; Differential Evolution; Hyper-parameter optimizations; Parameter optimization; Performance measure; Random forest classifier; Software systems; Understandability; Optimization","JC2019106; National Natural Science Foundation of China, NSFC: 61972192; Natural Science Foundation of Jiangsu Province; State Key Laboratory of Novel Software Technology","This work is supported in part by the National Natural Science Foundation of China (Grants No.61972192), the Natural Science Foundation of Jiangsu Province (Grants No.BK20180695), the Open Project of State Key Laboratory for Novel Software Technology at Nanjing University (Grants No.KFKT2018B17), the Nantong Application Research Plan (Grants No. JC2019106), and Jiangsu Government Scholarship for Overseas Studies.",,,,,,,,,,"Liu, W.; School of Computer Science and Technology, China; email: liuws0707@gmail.com",,"IEEE Computer Society",15301362,9781728195537,,,"English","Proc. Asia Pac. Softw. Eng. Conf. APSEC",Conference Paper,"Final","",Scopus,2-s2.0-85102361663
[No author name available],[No author id available],"Proceedings - 2020 IEEE 20th International Conference on Software Quality, Reliability, and Security, QRS 2020",2020,"Proceedings - 2020 IEEE 20th International Conference on Software Quality, Reliability, and Security, QRS 2020",,,,"","",556,,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-85099281070&partnerID=40&md5=02302836a9ad993ebc417e7c60c78722",,"","The proceedings contain 54 papers. The topics discussed include: incorporating android code smells into java static code metrics for security risk prediction of android applications; data evaluation and enhancement for quality improvement of machine learning; STAN: towards describing bytecodes of smart contract; how fast and effectively can code change history enrich stack overflow? PBLInv: postcondition-based loop invariant learning for C programs; RTPDroid: detecting implicitly malicious behaviors under runtime permission model; attack graph auto-generation for blockchains based on bigraphical reaction systems; which metrics should researchers use to collect repositories: an empirical study; and practical automatic lightweight nondeterminism and flaky test detection and debugging for python.",,,,,,,,,,,,,,,,"Institute of Electrical and Electronics Engineers Inc.",,9781728189130,,,"English","Proc. - IEEE Int. Conf. Softw. Qual., Reliab., Secur., QRS",Conference Review,"Final","",Scopus,2-s2.0-85099281070
"Lujan S., Pecorelli F., Palomba F., De Lucia A., Lenarduzzi V.","57220205452;57210934334;55321369000;7003641564;55348964400;","A preliminary study on the adequacy of static analysis warnings with respect to code smell prediction",2020,"MaLTeSQuE 2020 - Proceedings of the 4th ACM SIGSOFT International Workshop on Machine-Learning Techniques for Software-Quality Evaluation, Co-located with ESEC/FSE 2020",,,,"1","6",,3,"10.1145/3416505.3423559","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85097308081&doi=10.1145%2f3416505.3423559&partnerID=40&md5=3b7f138612836dbeb7ae45f6e765d686","Tampere University, Finland; University of Salerno, Italy; Lut University, Finland","Lujan, S., Tampere University, Finland; Pecorelli, F., University of Salerno, Italy; Palomba, F., University of Salerno, Italy; De Lucia, A., University of Salerno, Italy; Lenarduzzi, V., Lut University, Finland","Code smells are poor implementation choices applied during software evolution that can affect source code maintainability. While several heuristic-based approaches have been proposed in the past, machine learning solutions have recently gained attention since they may potentially address some limitations of state-of-the-art approaches. Unfortunately, however, machine learning-based code smell detectors still suffer from low accuracy. In this paper, we aim at advancing the knowledge in the field by investigating the role of static analysis warnings as features of machine learning models for the detection of three code smell types. We first verify the potential contribution given by these features. Then, we build code smell prediction models exploiting the most relevant features coming from the first analysis. The main finding of the study reports that the warnings given by the considered tools lead the performance of code smell prediction models to drastically increase with respect to what reported by previous research in the field. © 2020 ACM.","Code Smells; Machine Learning; Static Analysis Tools","Computer software selection and evaluation; Engineering education; Forecasting; Machine learning; Predictive analytics; Quality control; Code smell; Machine learning models; Prediction model; Relevant features; Software Evolution; Source codes; State-of-the-art approach; Static analysis",,,,,,,,,,,,,"Khomh F.Salza P.Catolino G.","Association for Computing Machinery, Inc",,9781450381246,,,"English","MaLTeSQuE - Proc. ACM SIGSOFT Int. Workshop Mach.-Learn. Tech. Softw.-Qual. Eval., co-located ESEC/FSE",Conference Paper,"Final","",Scopus,2-s2.0-85097308081
[No author name available],[No author id available],"MaLTeSQuE 2020 - Proceedings of the 4th ACM SIGSOFT International Workshop on Machine-Learning Techniques for Software-Quality Evaluation, Co-located with ESEC/FSE 2020",2020,"MaLTeSQuE 2020 - Proceedings of the 4th ACM SIGSOFT International Workshop on Machine-Learning Techniques for Software-Quality Evaluation, Co-located with ESEC/FSE 2020",,,,"","",45,,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-85097303808&partnerID=40&md5=cf91b6a5076c2118d8b0a92734e1cfa3",,"","The proceedings contain 6 papers. The topics discussed include: a preliminary study on the adequacy of static analysis warnings with respect to code smell prediction; DeepIaC: Deep learning-based linguistic anti-pattern detection in IaC; speeding up the data extraction of machine learning approaches: a distributed framework; RARE: a labeled dataset for cloud-native memory anomalies; TraceSim: a method for calculating stack trace similarity; and singling the odd ones out: a novelty detection approach to find defects in infrastructure-as-code.",,,,,,,,,,,,,,,"Khomh F.Salza P.Catolino G.","Association for Computing Machinery, Inc",,9781450381246,,,"English","MaLTeSQuE - Proc. ACM SIGSOFT Int. Workshop Mach.-Learn. Tech. Softw.-Qual. Eval., co-located ESEC/FSE",Conference Review,"Final","",Scopus,2-s2.0-85097303808
"Borovits N., Kumara I., Krishnan P., Palma S.D., Di Nucci D., Palomba F., Tamburri D.A., Van Den Heuvel W.-J.","57220204038;36662316400;57220514387;57219763379;57016777600;55321369000;35488974800;7005472245;","DeepIaC: Deep learning-based linguistic anti-pattern detection in IaC",2020,"MaLTeSQuE 2020 - Proceedings of the 4th ACM SIGSOFT International Workshop on Machine-Learning Techniques for Software-Quality Evaluation, Co-located with ESEC/FSE 2020",,,,"7","12",,9,"10.1145/3416505.3423564","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85097271248&doi=10.1145%2f3416505.3423564&partnerID=40&md5=12eba55843e214a90219d1530b0d3907","Tilburg University, Netherlands; Jads, Netherlands; Eindhoven University of Technology, Netherlands; University of Salerno, Italy","Borovits, N., Tilburg University, Netherlands, Jads, Netherlands; Kumara, I., Eindhoven University of Technology, Netherlands; Krishnan, P., Eindhoven University of Technology, Netherlands; Palma, S.D., Tilburg University, Netherlands, Jads, Netherlands; Di Nucci, D., Tilburg University, Netherlands; Palomba, F., University of Salerno, Italy; Tamburri, D.A., Tilburg University, Netherlands; Van Den Heuvel, W.-J., Tilburg University, Netherlands","Linguistic anti-patterns are recurring poor practices concerning inconsistencies among the naming, documentation, and implementation of an entity. They impede readability, understandability, and maintainability of source code. This paper attempts to detect linguistic anti-patterns in infrastructure as code (IaC) scripts used to provision and manage computing environments. In particular, we consider inconsistencies between the logic/body of IaC code units and their names. To this end, we propose a novel automated approach that employs word embeddings and deep learning techniques. We build and use the abstract syntax tree of IaC code units to create their code embedments. Our experiments with a dataset systematically extracted from open source repositories show that our approach yields an accuracy between 0.785 and 0.915 in detecting inconsistencies. © 2020 ACM.","Code Embedding; Deep Learning; Defects; IaC; Infrastructure Code; Linguistic Anti-patterns; Word2Vec","Computation theory; Computer software selection and evaluation; Engineering education; Learning systems; Linguistics; Open source software; Open systems; Pattern recognition; Quality control; Trees (mathematics); Abstract Syntax Trees; Anti-patterns; Automated approach; Computing environments; Learning techniques; Open source repositories; Source codes; Understandability; Deep learning","Horizon 2020 Framework Programme, H2020: 825040, 825480; European Commission, EC: RADON H2020","This work is supported by the European Commission grant no. 825480 (SODALITE H2020) and no. 825040 (RADON H2020). We thank all members of the SODALITE and RADON consortia for their inputs and feedbacks to the development of this paper.",,,,,,,,,,,"Khomh F.Salza P.Catolino G.","Association for Computing Machinery, Inc",,9781450381246,,,"English","MaLTeSQuE - Proc. ACM SIGSOFT Int. Workshop Mach.-Learn. Tech. Softw.-Qual. Eval., co-located ESEC/FSE",Conference Paper,"Final","All Open Access, Green",Scopus,2-s2.0-85097271248
"Chen H., Ren Z., Qiao L., Zhou Z., Gao G., Ma Y., Jiang H.","57221913057;25640088200;57201414562;57189640455;57139430700;57221912567;57205479128;","AdaBoost-based Refused Bequest Code Smell Detection with Synthetic Instances",2020,"Proceedings - 2020 7th International Conference on Dependable Systems and Their Applications, DSA 2020",,,"9331242","78","89",,1,"10.1109/DSA51864.2020.00019","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85100534946&doi=10.1109%2fDSA51864.2020.00019&partnerID=40&md5=1ac523109d4b9a851a92583ee12dfda7","Dalian University of Technology, School of Software, Dalian, China; Beijing Institute of Control Engineering, Beijing, China; Taiyuan University of Technology, Taiyuan, China","Chen, H., Dalian University of Technology, School of Software, Dalian, China; Ren, Z., Dalian University of Technology, School of Software, Dalian, China; Qiao, L., Beijing Institute of Control Engineering, Beijing, China; Zhou, Z., Dalian University of Technology, School of Software, Dalian, China; Gao, G., Dalian University of Technology, School of Software, Dalian, China; Ma, Y., Taiyuan University of Technology, Taiyuan, China; Jiang, H., Dalian University of Technology, School of Software, Dalian, China","Software requirements are constantly changing. Consequently, the development process is frequently under time pressure, which results in technical debt. To illustrate the symptoms of technical debt, 22 code smells have been introduced to indicate the poor design in code fragment, among which refused bequest is one of the most harmful smells and with high diffuseness. However, refused bequest is rarely taken into account because there is a lack of dataset. Moreover, it is difficult to design the detection rules for refused bequest compared with other popular smells.In this paper, we propose a machine-learning-based refused bequest smell detection framework SEADART, which features the utilization of a set of synthetic smelly instances. Specifically, SEADART comprises three components: (1) a smell generation approach, and (2) a model training strategy, and (3) an AdaBoost-based detection model. We evaluate the performance of the proposed framework. The evaluation results suggest that the generated smelly instances are reliable, and the trained AdaBoost model significantly outperforms the state-of-the-art over a real-world dataset. © 2020 IEEE.","AdaBoost; Code Smell; Refused Bequest; Technical Debt","Odors; Turing machines; Detection framework; Detection models; Detection rules; Development process; Evaluation results; Software requirements; State of the art; Three component; Adaptive boosting","National Natural Science Foundation of China, NSFC: 61722202, 61772107; National Key Research and Development Program of China, NKRDPC: 2018YF-B1003900","ACKNOWLEDGEMENT This work is supported in part by the National Key Research and Development Program of China under grant no. 2018YF-B1003900, and the National Natural Science Foundation of China under grant no. 61772107, 61722202.",,,,,,,,,,,,"Institute of Electrical and Electronics Engineers Inc.",,9780738124223,,,"English","Proc. - Int. Conf. Dependable Syst. Their Appl., DSA",Conference Paper,"Final","",Scopus,2-s2.0-85100534946
"Mhawish M.Y., Gupta M.","57220197153;16039448000;","Predicting Code Smells and Analysis of Predictions: Using Machine Learning Techniques and Software Metrics",2020,"Journal of Computer Science and Technology","35","6",,"1428","1445",,12,"10.1007/s11390-020-0323-7","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85097228042&doi=10.1007%2fs11390-020-0323-7&partnerID=40&md5=610a2545ea68c1e95fc2dd2c2c6d9fab","Computer Science, Centre for Interdisciplinary Mathematical Sciences, Institute of Science, Banaras Hindu University, Varanasi, 221005, India","Mhawish, M.Y., Computer Science, Centre for Interdisciplinary Mathematical Sciences, Institute of Science, Banaras Hindu University, Varanasi, 221005, India; Gupta, M., Computer Science, Centre for Interdisciplinary Mathematical Sciences, Institute of Science, Banaras Hindu University, Varanasi, 221005, India","Code smell detection is essential to improve software quality, enhancing software maintainability, and decrease the risk of faults and failures in the software system. In this paper, we proposed a code smell prediction approach based on machine learning techniques and software metrics. The local interpretable model-agnostic explanations (LIME) algorithm was further used to explain the machine learning model’s predictions and interpretability. The datasets obtained from Fontana et al. were reformed and used to build binary-label and multi-label datasets. The results of 10-fold cross-validation show that the performance of tree-based algorithms (mainly Random Forest) is higher compared with kernel-based and network-based algorithms. The genetic algorithm based feature selection methods enhance the accuracy of these machine learning algorithms by selecting the most relevant features in each dataset. Moreover, the parameter optimization techniques based on the grid search algorithm significantly enhance the accuracy of all these algorithms. Finally, machine learning techniques have high potential in predicting the code smells, which contribute to detect these smells and enhance the software’s quality. © 2020, Institute of Computing Technology, Chinese Academy of Sciences.","code smell; code smell detection; feature selection; parameter optimization; prediction explanation","Computer software selection and evaluation; Decision trees; Forecasting; Genetic algorithms; Lime; Machine learning; Object oriented programming; Odors; Predictive analytics; Software quality; 10-fold cross-validation; Feature selection methods; Machine learning models; Machine learning techniques; Network-based algorithm; Parameter optimization techniques; Software maintainability; Tree-based algorithms; Learning algorithms",,,,,,,,,,,,"Mhawish, M.Y.; Computer Science, India; email: bniyaseen@gmail.com",,"Springer",10009000,,JCTEE,,"English","J Comput Sci Technol",Article,"Final","",Scopus,2-s2.0-85097228042
"Pecorelli F., Di Nucci D., De Roover C., De Lucia A.","57210934334;57016777600;55891851900;7003641564;","A large empirical assessment of the role of data balancing in machine-learning-based code smell detection",2020,"Journal of Systems and Software","169",,"110693","","",,26,"10.1016/j.jss.2020.110693","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85086465273&doi=10.1016%2fj.jss.2020.110693&partnerID=40&md5=c52d1386d8458354f2e436c3ae9006dc","SeSa Lab - University of Salerno, Fisciano, Italy; Tilburg University - Jheronimus Academy of Data Science, ’s-Hertogenbosch, Netherlands; Vrije Universiteit Brussel, Brussels, Belgium","Pecorelli, F., SeSa Lab - University of Salerno, Fisciano, Italy; Di Nucci, D., Tilburg University - Jheronimus Academy of Data Science, ’s-Hertogenbosch, Netherlands; De Roover, C., Vrije Universiteit Brussel, Brussels, Belgium; De Lucia, A., SeSa Lab - University of Salerno, Fisciano, Italy","Code smells can compromise software quality in the long term by inducing technical debt. For this reason, many approaches aimed at identifying these design flaws have been proposed in the last decade. Most of them are based on heuristics in which a set of metrics is used to detect smelly code components. However, these techniques suffer from subjective interpretations, a low agreement between detectors, and threshold dependability. To overcome these limitations, previous work applied Machine-Learning that can learn from previous datasets without needing any threshold definition. However, more recent work has shown that Machine-Learning is not always suitable for code smell detection due to the highly imbalanced nature of the problem. In this study, we investigate five approaches to mitigate data imbalance issues to understand their impact on Machine Learning-based approaches for code smell detection in Object-Oriented systems and those implementing the Model-View-Controller pattern. Our findings show that avoiding balancing does not dramatically impact accuracy. Existing data balancing techniques are inadequate for code smell detection leading to poor accuracy for Machine-Learning-based approaches. Therefore, new metrics to exploit different software characteristics and new techniques to effectively combine them are needed. © 2020 Elsevier Inc.","Code smells; Data balancing; Machine learning; Model view controller; Object oriented","Codes (symbols); Computer software selection and evaluation; Machine learning; Object detection; Object oriented programming; Software quality; Applied machine learning; Balancing techniques; Code components; Empirical assessment; Model view controller; Object-oriented system; Software characteristic; Technical debts; Balancing","0015718F; Horizon 2020 Framework Programme, H2020: 825040; European Commission, EC; Fonds De La Recherche Scientifique - FNRS, FNRS; Fonds Wetenschappelijk Onderzoek, FWO","This project was partially supported by the Excellence of Science Project SECO-Assist, Belgium ( 0015718F , FWO - Vlaanderen and F.R.S.-FNRS). Di Nucci acknowledges the support of the European Commission grant no. 825040 (H2020 - RADON).","This project was partially supported by the Excellence of Science Project SECO-Assist, Belgium (0015718F, FWO - Vlaanderen and F.R.S.-FNRS). Di Nucci acknowledges the support of the European Commission grant no. 825040 (H2020 - RADON).",,,,,,,,,"Pecorelli, F.; SeSa Lab - University of SalernoItaly; email: fpecorelli@unisa.it",,"Elsevier Inc.",01641212,,JSSOD,,"English","J Syst Software",Article,"Final","All Open Access, Green",Scopus,2-s2.0-85086465273
[No author name available],[No author id available],"Proceedings - 34th Brazilian Symposium on Software Engineering, SBES 2020",2020,"ACM International Conference Proceeding Series",,,,"","",887,,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-85123042060&partnerID=40&md5=172eb7e8a9c178c79e2cada96f5c83ad",,"","The proceedings contain 101 papers. The topics discussed include: on the influence of different perspectives on evaluating the quality of teamwork in the context of agile software development; challenges in agile transformation journey - a qualitative study; agile global software development: a systematic literature review; behavior-driven development: an expert panel to evaluate benefits and challenges [insightful ideas and emerging results; adaptations of scrum roles in software projects: survey and representation tentative with feature models; are code smell co-occurrences harmful to internal quality attributes? a mixed-method study; recommending composite refactorings for smell removal: heuristics and evaluation; a catalog of object-relational mapping code smells for java; and probabilistic model-based analysis to improve software energy efficiency.",,,,,,,,,,,,,,,,"Association for Computing Machinery",,9781450387538,,,"English","ACM Int. Conf. Proc. Ser.",Conference Review,"Final","",Scopus,2-s2.0-85123042060
"Trindade R.P.F., Da Silva Bigonha M.A., Ferreira K.A.M.","57195302375;56798720300;35302233400;","Oracles of Bad Smells: A Systematic Literature Review",2020,"ACM International Conference Proceeding Series",,,,"62","71",,1,"10.1145/3422392.3422415","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85099402946&doi=10.1145%2f3422392.3422415&partnerID=40&md5=b7cd8b2a91002fcb780a0cd33e6d7718","Computer Science Department, Federal University of Minas Gerais, Belo Horizonte, MG, Brazil; Department of Computing, Federal Center for Technological Education of Minas Gerais, Belo Horizonte, MG, Brazil","Trindade, R.P.F., Computer Science Department, Federal University of Minas Gerais, Belo Horizonte, MG, Brazil; Da Silva Bigonha, M.A., Computer Science Department, Federal University of Minas Gerais, Belo Horizonte, MG, Brazil; Ferreira, K.A.M., Department of Computing, Federal Center for Technological Education of Minas Gerais, Belo Horizonte, MG, Brazil","A bad smell is an evidence of a design problem that may be harmful to the software maintenance. Several studies have been carried out to aid the identification of bad smells, by defining approaches or tools. Usually, the evaluation of these studies' results relies on data of oracles bad smells. An oracle is a set of data of bad smells found in a given software system. Such data serves as a referential template or a benchmark to evaluate the proposals on detecting bad smells. The availability and the quality of bad smell oracles are crucial to assert the quality of detection strategies of bad smells. This study aims to compile the bad smell oracles proposed in the literature. To achieve this, we conducted a Systematic Literature Review (SLR) to identify bad smell oracles and their characteristics. The main result of this study is a catalog of bad smell oracles that may be useful for research on bad smells, especially the studies that propose tools or detection strategies for bad smells. © 2020 ACM.","bad smell; benchmark; code smell; design anomaly; oracle; systematic literature review","Software engineering; Bad smells; Design problems; Software systems; Systematic literature review; Systematic literature review (SLR); Odors",,,,,,,,,,,,,,"Association for Computing Machinery",,9781450387538,,,"English","ACM Int. Conf. Proc. Ser.",Conference Paper,"Final","",Scopus,2-s2.0-85099402946
"Oliveira D., Assunção W.K.G., Souza L., Oizumi W., Garcia A., Fonseca B.","57211276861;37361009900;57221535998;55515918200;7404608626;36175426900;","Applying Machine Learning to Customized Smell Detection: A Multi-Project Study",2020,"ACM International Conference Proceeding Series",,,,"233","242",,1,"10.1145/3422392.3422427","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85099375786&doi=10.1145%2f3422392.3422427&partnerID=40&md5=d212f8fa362b1df122ea619d08c6640a","Pontifical Catholic University, Rio de Janeiro, RJ, Brazil; Federal University of Technology, Toledo, PR, Brazil; Carnegie Mellon University, Silicon Valley, United States","Oliveira, D., Pontifical Catholic University, Rio de Janeiro, RJ, Brazil; Assunção, W.K.G., Federal University of Technology, Toledo, PR, Brazil; Souza, L., Carnegie Mellon University, Silicon Valley, United States; Oizumi, W., Pontifical Catholic University, Rio de Janeiro, RJ, Brazil; Garcia, A., Pontifical Catholic University, Rio de Janeiro, RJ, Brazil; Fonseca, B., Federal University of Technology, Toledo, PR, Brazil","Code smells are considered symptoms of poor implementation choices, which may hamper the software maintainability. Hence, code smells should be detected as early as possible to avoid software quality degradation. Unfortunately, detecting code smells is not a trivial task. Some preliminary studies investigated and concluded that machine learning (ML) techniques are a promising way to better support smell detection. However, these techniques are hard to be customized to promote an early and accurate detection of specific smell types. Yet, ML techniques usually require numerous code examples to be trained (composing a relevant dataset) in order to achieve satisfactory accuracy. Unfortunately, such a dependency on a large validated dataset is impractical and leads to late detection of code smells. Thus, a prevailing challenge is the early customized detection of code smells taking into account the typical limited training data. In this direction, this paper reports a study in which we collected code smells, from ten active projects, that were actually refactored by developers, differently from studies that rely on code smells inferred by researchers. These smells were used for evaluating the accuracy regarding early detection of code smells by using seven ML techniques. Once we take into account such smells that were considered as important by developers, the ML techniques are able to customize the detection in order to focus on smells observed as relevant in the investigated systems. The results showed that all the analyzed techniques are sensitive to the type of smell and obtained good results for the majority of them, especially JRip and Random Forest. We also observe that the ML techniques did not need a high number of examples to reach their best accuracy results. This finding implies that ML techniques can be successfully used for early detection of smells without depending on the curation of a large dataset. © 2020 ACM.","code smell; code smell detection; software quality","Computer software selection and evaluation; Decision trees; Large dataset; Machine learning; Object oriented programming; Software quality; Code smell; Curation; Limited training data; Multi-projects; Software maintainability; Odors","175956; 51435; Conselho Nacional de Desenvolvimento Científico e Tecnológico, CNPq: 141276/2020-7, 312149/2016-6, 408356/2018-9, 427787/2018-1, 434969/2018-4; Fundação Carlos Chagas Filho de Amparo à Pesquisa do Estado do Rio de Janeiro, FAPERJ: 010002285/2019, 200773/2019","We thank CNPq (grants 427787/2018-1, 434969/2018-4, 312149/2016-6, 141276/2020-7, and 408356/2018-9), CAPES/Procad (grant 175956), CAPES/Proex, FAPPR (grant 51435), and FAPERJ (grant 200773/2019, 010002285/2019).",,,,,,,,,,,,"Association for Computing Machinery",,9781450387538,,,"English","ACM Int. Conf. Proc. Ser.",Conference Paper,"Final","",Scopus,2-s2.0-85099375786
"Lima R., Souza J., Fonseca B., Teixeira L., Gheyi R., Ribeiro M., Garcia A., De Mello R.","57225467677;57211266514;36175426900;36610918500;8365747700;57199329234;7404608626;37025865700;","Understanding and Detecting Harmful Code",2020,"ACM International Conference Proceeding Series",,,,"223","232",,2,"10.1145/3422392.3422420","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85099349813&doi=10.1145%2f3422392.3422420&partnerID=40&md5=f9cecd104b5052f5286e034b9e953337","Ufpe, Brazil; Ufal, Brazil; Ufcg, Brazil; PUC-Rio, Brazil; CEFET/RJ, Brazil","Lima, R., Ufpe, Brazil; Souza, J., Ufpe, Brazil; Fonseca, B., Ufal, Brazil; Teixeira, L., Ufpe, Brazil; Gheyi, R., Ufcg, Brazil; Ribeiro, M., Ufal, Brazil; Garcia, A., PUC-Rio, Brazil; De Mello, R., CEFET/RJ, Brazil","Code smells typically indicate poor design implementation and choices that may degrade software quality. Hence, they need to be carefully detected to avoid such poor design. In this context, some studies try to understand the impact of code smells on the software quality, while others propose rules or machine learning-based techniques to detect code smells. However, none of those studies or techniques focus on analyzing code snippets that are really harmful to software quality. This paper presents a study to understand and classify code harmfulness. We analyze harmfulness in terms of CLEAN, SMELLY, BUGGY, and HARMFUL code. By HARMFUL CODE, we define a SMELLY code element having one or more bugs reported. These bugs may have been fixed or not. Thus, the incidence of HARMFUL CODE may represent a increased risk of introducing new defects and/or design problems during its fixing. We perform our study with 22 smell types, 803 versions of 13 open-source projects, 40,340 bugs and 132,219 code smells. The results show that even though we have a high number of code smells, only 0.07% of those smells are harmful. The Abstract Function Call From Constructor is the smell type more related to HARMFUL CODE. To cross-validate our results, we also perform a survey with 60 developers. Most of them (98%) consider code smells harmful to the software, and 85% of those developers believe that code smells detection tools are important. But, those developers are not concerned about selecting tools that are able to detect HARMFUL CODE. We also evaluate machine learning techniques to classify code harmfulness: They reach the effectiveness of at least 97% to classify HARMFUL CODE. While the Random Forest is effective in classifying both SMELLY and HARMFUL CODE, the Gaussian Naive Bayes is the less effective technique. Our results also suggest that both software and developers' metrics are important to classify HARMFUL CODE. © 2020 ACM.","Code Smells; Machine Learning; Software Quality","Computer software selection and evaluation; Decision trees; Machine learning; Odors; Open source software; Software quality; Code smell; Design implementation; Design problems; Detection tools; Function calls; Machine learning techniques; Naive bayes; Open source projects; Open systems","Coordenação de Aperfeiçoamento de Pessoal de Nível Superior, CAPES: 88887.496429/2020-00; Conselho Nacional de Desenvolvimento Científico e Tecnológico, CNPq: 409335/2016-9, 427787/2018-1, 465614/2014-0, APQ-0388-1.03/14, APQ-0399-1.03/17; Fundação de Amparo à Ciência e Tecnologia do Estado de Pernambuco, FACEPE: APQ-0570-1.03/14","This work is supported by CAPES (88887.496429/2020-00), FACEPE (APQ-0570-1.03/14), and CNPq (409335/2016-9, 427787/2018-1), as well as INES 2.0,8 FACEPE grants PRONEX APQ-0388-1.03/14 and APQ-0399-1.03/17, and CNPq grant 465614/2014-0. The authors would like to thank the anonymous referees for their valuable comments and helpful suggestions.",,,,,,,,,,,,"Association for Computing Machinery",,9781450387538,,,"English","ACM Int. Conf. Proc. Ser.",Conference Paper,"Final","",Scopus,2-s2.0-85099349813
"Oizumi W., Bibiano A.C., Cedrim D., Oliveira A., Sousa L., Garcia A., Oliveira D.","55515918200;57202890121;57194528845;56851872700;57194212913;7404608626;57211276861;","Recommending Composite Refactorings for Smell Removal: Heuristics and Evaluation",2020,"ACM International Conference Proceeding Series",,,,"72","81",,5,"10.1145/3422392.3422423","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85099349669&doi=10.1145%2f3422392.3422423&partnerID=40&md5=a790bf43d1ef6ff85dde32c6515d1663","PUC-Rio, Brazil; Amazon, Brazil; Carnegie Mellon University, United States","Oizumi, W., PUC-Rio, Brazil; Bibiano, A.C., Amazon, Brazil; Cedrim, D., Carnegie Mellon University, United States; Oliveira, A., PUC-Rio, Brazil; Sousa, L., PUC-Rio, Brazil; Garcia, A., PUC-Rio, Brazil; Oliveira, D., PUC-Rio, Brazil","Structural degradation is the process in which quality attributes of a system are negatively impacted. When due attention is not paid to structural degradation, the source code may also become difficult to change. Code smells are recurring structures in the source code that may represent structural degradation. Hence, there are many catalogs and techniques for supporting the removal of code smells through refactoring recommendations, which usually consist of single refactorings such as a Move Method or an Extract Method. However, single refactorings are often not enough for completely removing certain smell occurrences. Moreover, recent studies show that developers most often apply composite refactorings-i.e., sequences of two or more refactorings-for removing code smells. Despite showing the importance of performing composite refactorings, most studies do not provide information on which composite refactoring patterns are recurrent in practice. In this context, a previous study identified 35 smell removal patterns that are frequent across multiple open source systems. However, such study has not explored how the removal patterns could help developers to apply effective composite refactorings. Thus, in this work, we propose a suite of new recommendation heuristics to help developers in applying effective composite refactorings. These heuristics are intended to remove three code smell types, namely Complex Class, Feature Envy, and God Class. After designing the heuristics, we evaluated their effectiveness through a quasi-experiment. This evaluation was conducted with 12 software developers and 9 smelly Java classes. Results indicate that developers considered our heuristics effective or partially effective in more than 93% of the cases. In addition, the evaluation helped us to identify multiple factors that contribute to the acceptance or rejection of the refactoring recommendations. Based on these factors, we defined new guidelines for the effective recommendation of smell-removal composite refactorings. © 2020 ACM.","code smells; composite refactoring; composite refactoring patterns; refactoring; refactoring heuristics; refactoring recommendations","Odors; Open source software; Complex class; Multiple factors; Open source system; Quality attributes; Quasi-experiments; Software developer; Source codes; Structural degradation; Open systems","175956; Conselho Nacional de Desenvolvimento Científico e Tecnológico, CNPq: 140919/2017-1, 312149/2016-6, 434969/2018-4; Fundação Carlos Chagas Filho de Amparo à Pesquisa do Estado do Rio de Janeiro, FAPERJ: 010002285/2019, 200773/2019","This work was partially funded by CNPq (grants 434969/2018-4, 312149/2016-6, 140919/2017-1), CAPES/Procad (grant 175956), CAPES/Proex, and FAPERJ (200773/2019, 010002285/2019).",,,,,,,,,,,,"Association for Computing Machinery",,9781450387538,,,"English","ACM Int. Conf. Proc. Ser.",Conference Paper,"Final","",Scopus,2-s2.0-85099349669
"Tuma K., Sion L., Scandariato R., Yskout K.","57200532199;57188934512;23095243000;23478950900;","Automating the early detection of security design flaws",2020,"Proceedings - 23rd ACM/IEEE International Conference on Model Driven Engineering Languages and Systems, MODELS 2020",,,,"332","342",,4,"10.1145/3365438.3410954","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85097000085&doi=10.1145%2f3365438.3410954&partnerID=40&md5=49417de5323a711b8adffabebae35723","University of Gothenburg, Chalmers University of Technology, Sweden; Ku Leuven, Belgium; Chalmers University of Technology, Sweden","Tuma, K., University of Gothenburg, Chalmers University of Technology, Sweden; Sion, L., Ku Leuven, Belgium; Scandariato, R., University of Gothenburg, Chalmers University of Technology, Sweden, Chalmers University of Technology, Sweden; Yskout, K., Ku Leuven, Belgium","Security by design is a key principle for realizing secure software systems and it is advised to hunt for security flaws from the very early stages of development. At design-time, security analysis is often performed manually by means of either threat modeling or expert-based design inspections. However, when leveraging the wide range of established knowledge bases on security design flaws (e.g., CWE, CAWE), these manual assessments become too time consuming, error-prone, and infeasible in the context of contemporary development practices with frequent iterations. This paper focuses on design inspection and explores the potential for automating the application of inspection rules to speed up the security analysis. The contributions of this paper are: (i) the creation of a publicly available data set consisting of 26 design models annotated with security flaws, (ii) an automated approach for following inspection guidelines using model query patterns, and (iii) an empirical comparison of the results from this automated approach with those from manual inspection. Even though our results show that a complete automation of the security design flaw detection is hard to achieve, we find that some flaws (e.g., insecure data exposure) are more amenable to automation. Compared to manual analysis techniques, our results are encouraging and suggest that the automated technique could guide security analysts towards a more complete inspection of the software design, especially for large models. © 2020 ACM.","automation; design flaw detection; empirical software engineering; secure design; security flaw; security-by-design","Automation; Inspection; Knowledge acquisition; Knowledge management; Security systems; Automated approach; Automated techniques; Design inspections; Development practices; Empirical - comparisons; Knowledge basis; Manual inspection; Security analysis; Software design",,,,,,,,,,,,,,"Association for Computing Machinery, Inc",,9781450370196,,,"English","Proc. - ACM/IEEE Int. Conf. Model Driven Eng. Lang. Syst., MODELS",Conference Paper,"Final","",Scopus,2-s2.0-85097000085
"Shcherban S., Liang P., Tahir A., Li X.","57219872157;24923262400;36198634600;57214101218;","Automatic identification of code smell discussions on stack overflow: A preliminary investigation",2020,"International Symposium on Empirical Software Engineering and Measurement",,,"3422161","","",,5,"10.1145/3382494.3422161","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85095831992&doi=10.1145%2f3382494.3422161&partnerID=40&md5=707163827fa4e435816d7dc0d033ccfc","School of Computer Science, Wuhan University, Wuhan, China; School of Fundamental Sciences, Massey University, Palmerston North, New Zealand","Shcherban, S., School of Computer Science, Wuhan University, Wuhan, China; Liang, P., School of Computer Science, Wuhan University, Wuhan, China; Tahir, A., School of Fundamental Sciences, Massey University, Palmerston North, New Zealand; Li, X., School of Computer Science, Wuhan University, Wuhan, China","Background: Code smells indicate potential design or implementation problems that may have a negative impact on programs. Similar to other software artefacts, developers use Stack Overflow (SO) to ask questions about code smells. However, given the high number of questions asked on the platform, and the limitations of the default tagging system, it takes significant effort to extract knowledge about code smells by means of manual approaches. Aim: We utilized supervised machine learning techniques to automatically identify code-smell discussions from SO posts. Method: We conducted an experiment using a manually labeled dataset that contains 3000 code-smell and 3000 non-code-smell posts to evaluate the performance of different classifiers when automatically identifying code smell discussions. Results: Our results show that Logistic Regression (LR) with parameter C=20 (inverse of regularization strength) and Bag of Words (BoW) feature extraction technique achieved the best performance amongst the algorithms we evaluated with a precision of 0.978, a recall of 0.965, and an F1-score of 0.971. Conclusion: Our results show that machine learning approach can effectively locate code-smell posts even if posts' title and/or tags cannot be of help. The technique can be used to extract code smell discussions from other textual artefacts (e.g., code reviews), and promisingly to extract SO discussions of other topics. © 2020 IEEE Computer Society. All rights reserved.","Automatic Classification; Code Smell; Discussion; Stack Overflow","Automation; Classification (of information); Data mining; Logistic regression; Odors; Software engineering; Supervised learning; Feature extraction techniques; Identifying code; Labeled dataset; Machine learning approaches; Software artefacts; Stack overflow; Supervised machine learning; Tagging systems; Learning systems","2018YFB1402800","This work has been partially supported by the National Key R&D Program of China with Grant No. 2018YFB1402800 and IBO Technology (Shenzhen) Co., Ltd., China.",,,,,,,,,,"Liang, P.; School of Computer Science, China; email: liangp@whu.edu.cn",,"IEEE Computer Society",19493770,9781450375801,,,"English","Int. Symp. Empir. Softw. Eng. Meas.",Conference Paper,"Final","",Scopus,2-s2.0-85095831992
"Codabux Z., Dutchyn C.","55893535500;20435695700;","Profiling developers through the lens of technical debt",2020,"International Symposium on Empirical Software Engineering and Measurement",,,"3422172","","",,1,"10.1145/3382494.3422172","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85095818880&doi=10.1145%2f3382494.3422172&partnerID=40&md5=b2f8d5c5ab13490f066ba4e871983678","University of Saskatchewan, Canada","Codabux, Z., University of Saskatchewan, Canada; Dutchyn, C., University of Saskatchewan, Canada","Context: Technical Debt needs to be managed to avoid disastrous consequences, and investigating developers' habits concerning technical debt management is invaluable information in software development. Objective: This study aims to characterize how developers manage technical debt based on the code smells they induce and the refactorings they apply. Method: We mined a publicly-available Technical Debt dataset for Git commit information, code smells, coding violations, and refactoring activities for each developer of a selected project. Results: By combining this information, we profile developers to recognize prolific coders, highlight activities that discriminate among developer roles (reviewer, lead, architect), and estimate coding maturity and technical debt tolerance. © 2020 IEEE Computer Society. All rights reserved.","Code Smell; Developer Characterization; Mining Software Repositories; Open Source Software; Refactoring; Technical Debt","Odors; Code smell; Management IS; Refactorings; Technical debts; Through the lens; Software design",,,,,,,,,,,,"Codabux, Z.; University of SaskatchewanCanada; email: zadiacodabux@ieee.org",,"IEEE Computer Society",19493770,9781450375801,,,"English","Int. Symp. Empir. Softw. Eng. Meas.",Conference Paper,"Final","All Open Access, Bronze, Green",Scopus,2-s2.0-85095818880
"Simmons A.J., Barnett S., Rivera-Villicana J., Bajaj A., Vasa R.","57155872400;56890458900;56415008400;57219760356;14632834200;","A large-scale comparative analysis of Coding Standard conformance in Open-Source Data Science projects",2020,"International Symposium on Empirical Software Engineering and Measurement",,,"3410680","","",,6,"10.1145/3382494.3410680","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85093925437&doi=10.1145%2f3382494.3410680&partnerID=40&md5=c811f43a3e197f225b6bf063c67e0aed","Deakin University, Applied Artificial Intelligence Inst., Geelong, VIC, Australia","Simmons, A.J., Deakin University, Applied Artificial Intelligence Inst., Geelong, VIC, Australia; Barnett, S., Deakin University, Applied Artificial Intelligence Inst., Geelong, VIC, Australia; Rivera-Villicana, J., Deakin University, Applied Artificial Intelligence Inst., Geelong, VIC, Australia; Bajaj, A., Deakin University, Applied Artificial Intelligence Inst., Geelong, VIC, Australia; Vasa, R., Deakin University, Applied Artificial Intelligence Inst., Geelong, VIC, Australia","Background: Meeting the growing industry demand for Data Science requires cross-disciplinary teams that can translate machine learning research into production-ready code. Software engineering teams value adherence to coding standards as an indication of code readability, maintainability, and developer expertise. However, there are no large-scale empirical studies of coding standards focused specifically on Data Science projects. Aims: This study investigates the extent to which Data Science projects follow code standards. In particular, which standards are followed, which are ignored, and how does this differ to traditional software projects? Method: We compare a corpus of 1048 Open-Source Data Science projects to a reference group of 1099 non-Data Science projects with a similar level of quality and maturity. Results: Data Science projects suffer from a significantly higher rate of functions that use an excessive numbers of parameters and local variables. Data Science projects also follow different variable naming conventions to non-Data Science projects. Conclusions: The differences indicate that Data Science codebases are distinct from traditional software codebases and do not follow traditional software engineering conventions. Our conjecture is that this may be because traditional software engineering conventions are inappropriate in the context of Data Science projects. © 2020 IEEE Computer Society. All rights reserved.","Code conventions; Code quality; Code smells; Code style; Data science; Machine learning; Open-source software","Open Data; Open source software; Code readability; Coding standards; Comparative analysis; Cross-disciplinary teams; Empirical studies; Machine learning research; Open source datum; Software project; Data Science",,,,,,,,,,,,,,"IEEE Computer Society",19493770,9781450375801,,,"English","Int. Symp. Empir. Softw. Eng. Meas.",Conference Paper,"Final","All Open Access, Green",Scopus,2-s2.0-85093925437
"Mori A.","57203393001;","Anomaly Analyses to Guide Software Testing Activity",2020,"Proceedings - 2020 IEEE 13th International Conference on Software Testing, Verification and Validation, ICST 2020",,,"9159076","427","429",,,"10.1109/ICST46399.2020.00055","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85091595407&doi=10.1109%2fICST46399.2020.00055&partnerID=40&md5=09faed862093c0f091f4e819d2e34cbd","ICMC-University of São Paulo, São Carlos-SP, Brazil","Mori, A., ICMC-University of São Paulo, São Carlos-SP, Brazil","Software testing is a quality activity with the purpose of revealing errors not yet discovered. Also, this activity verifies if the software realizes its functionalities conformance with its specification. As software testing activity evolves during software development, a large set of test cases can be generated, compromising the effort during the regression testing, for instance. Regression testing is a type of software testing to confirm that a new program or code change has not adversely affected existing features of the software. In this activity, the tester may not have enough time to run all test cases, needing to decide which test cases are best in terms of effectiveness in reveal faults. In another way, during code refactoring activities, code smells can be identified, which represents unwanted situations that can negatively impact software quality. This project proposes an approach that employs information about code smells to guide software testing activity. Our hypothesis is that the code smells can guide, for instance, the prioritization of test cases, focusing on effort reduction of software testing. I would like to acknowledged my advisor, Simone R. S. Souza for guiding and supporting in this work. © 2020 IEEE.","code smell; software testing; testing selection criteria; testing techniques","Codes (symbols); Computer software selection and evaluation; Odors; Software design; Software quality; Verification; Anomaly analysis; Code changes; Code re-factoring; Code smell; New programs; Prioritization; Quality activity; Regression testing; Software testing",,,,,,,,,,,,"Mori, A.; ICMC-University of São PauloBrazil; email: allanmori@usp.br",,"Institute of Electrical and Electronics Engineers Inc.",,9781728157771,,,"English","Proc. - IEEE Int. Conf. Softw. Test., Verif. Valid., ICST",Conference Paper,"Final","",Scopus,2-s2.0-85091595407
"Abid C., Kessentini M., Wang H.","57212620463;25653537200;57188742982;","Early prediction of quality of service using interface-level metrics, code-level metrics, and antipatterns",2020,"Information and Software Technology","126",,"106313","","",,7,"10.1016/j.infsof.2020.106313","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85085256428&doi=10.1016%2fj.infsof.2020.106313&partnerID=40&md5=11c1fd483f18c234fe8d7d486421d198","University of Michigan, United States; eBay Inc., United States","Abid, C., University of Michigan, United States; Kessentini, M., University of Michigan, United States; Wang, H., eBay Inc., United States","Context: With the current high trends of deploying and using web services in practice, effective techniques for maintaining high quality of Service are becoming critical for both service providers and subscribers/users. Service providers want to predict the quality of service during early stages of development before releasing them to customers. Service clients consider the quality of service when selecting the best one satisfying their preferences in terms of price/budget and quality between the services offering the same features. The majority of existing studies for the prediction of quality of service are based on clustering algorithms to classify a set of services based on their collected quality attributes. Then, the user can select the best service based on his expectations both in terms of quality and features. However, this assumption requires the deployment of the services before being able to make the prediction and it can be time-consuming to collect the required data of running web services during a period of time. Furthermore, the clustering is only based on well-known quality attributes related to the services performance after deployment. Objective: In this paper, we start from the hypothesis that the quality of the source code and interface design can be used as indicators to predict the quality of service attributes without the need to deploy or run the services by the subscribers. Method: We collected training data of 707 web services and we used machine learning to generate association rules that predict the quality of service based on the interface and code quality metrics, and antipatterns. Results: The empirical validation of our prediction techniques shows that the generated association rules have strong support and high confidence which confirms our hypothesis that source code and interface quality metrics/antipatterns are correlated with web service quality attributes which are response time, availability, throughput, successability, reliability, compliance, best practices, latency, and documentation. Conclusion: To the best of our knowledge, this paper represents the first study to validate the correlation between interface metrics, source code metrics, antipatterns and quality of service. Another contribution of our work consists of generating association rules between the code/interface metrics and quality of service that can be used for prediction purposes before deploying new releases. © 2020 Elsevier B.V.","Anti-patterns; Code quality; Interface metrics; Performance prediction; Quality of service; Web services","Association rules; Clustering algorithms; Codes (symbols); Computer programming languages; Forecasting; Quality of service; Web services; Websites; Early prediction; Empirical validation; Interface designs; Interface quality; Prediction techniques; Quality attributes; Source code metrics; Web service qualities; Telecommunication services",,,,,,,,,,,,"Kessentini, M.; University of MichiganUnited States; email: marouane@umich.edu",,"Elsevier B.V.",09505849,,ISOTE,,"English","Inf Software Technol",Article,"Final","",Scopus,2-s2.0-85085256428
"Benidris M., Ammar H., Dzielski D., Benamer W.H.","57218950504;7006435946;57203241533;57194648668;","Prioritizing software components risk: Towards a machine learning-based approach",2020,"ACM International Conference Proceeding Series",,,"3410730","","",,1,"10.1145/3410352.3410730","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85090886014&doi=10.1145%2f3410352.3410730&partnerID=40&md5=0cbecc85be120b365b021150c17e1f4b","Lane Department CS and EE, West Virginia University, Morgantown, WV, United States; Faculty of IT, University of Benghazi, Benghazi, Libyan Arab Jamahiriya","Benidris, M., Lane Department CS and EE, West Virginia University, Morgantown, WV, United States; Ammar, H., Lane Department CS and EE, West Virginia University, Morgantown, WV, United States; Dzielski, D., Lane Department CS and EE, West Virginia University, Morgantown, WV, United States; Benamer, W.H., Faculty of IT, University of Benghazi, Benghazi, Libyan Arab Jamahiriya","Technical Debt (TD) can be detected using different methods. TD is a metaphor that refers to short-term solutions in software development, which may affect the cost of the software development life-cycle. Several tools have been developed to detect, estimate, or manage TD. TD can be indicated through smells, code comments, and software metrics. Machine learning Techniques (MLTs) are used in many software engineering topics such as fault-proneness, bug severity, and code smell. In this paper we use four internal structure metrics to identify and classify Architecture Technical Debt (ATD) risk by using MLTs. We show that MLTs can identify and classify the risk of ATD on software components to help the decision-makers to prioritizing the refactoring decisions based on the level of the risk. © 2020 ACM.","Architecture Smells; Architecture Technical Debt; Machine Learning; Software Risk","Codes (symbols); Computer software; Decision making; Life cycle; Machine learning; Software design; Turing machines; Fault proneness; Internal structure; Machine learning techniques; Short-term solutions; Software component; Software development life cycle; Software metrics; Technical debts; Risks",,,,,,,,,,,,,,"Association for Computing Machinery",,9781450377362,,,"English","ACM Int. Conf. Proc. Ser.",Conference Paper,"Final","",Scopus,2-s2.0-85090886014
"Nyamawe A.S., Liu H., Niu N., Umer Q., Niu Z.","57203496218;56862404100;36856329200;55520728200;23393033800;","Feature requests-based recommendation of software refactorings",2020,"Empirical Software Engineering","25","5",,"4315","4347",,8,"10.1007/s10664-020-09871-2","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85089993610&doi=10.1007%2fs10664-020-09871-2&partnerID=40&md5=4f9d9816d405da9bcc5214cb892f0303","School of Computer Science and Technology, Beijing Institute of Technology, Beijing, China; Department of Electrical Engineering and Computer Science, University of Cincinnati, Cincinnati, OH, United States","Nyamawe, A.S., School of Computer Science and Technology, Beijing Institute of Technology, Beijing, China; Liu, H., School of Computer Science and Technology, Beijing Institute of Technology, Beijing, China; Niu, N., Department of Electrical Engineering and Computer Science, University of Cincinnati, Cincinnati, OH, United States; Umer, Q., School of Computer Science and Technology, Beijing Institute of Technology, Beijing, China; Niu, Z., School of Computer Science and Technology, Beijing Institute of Technology, Beijing, China","Software requirements are ever-changing which often leads to software evolution. Consequently, throughout software lifetime, developers receive new requirements often expressed as feature requests. To implement the requested features, developers sometimes apply refactorings to make their systems adapt to the new requirements. However, deciding what refactorings to apply is often challenging and there is still lack of automated support to recommend refactorings given a feature request. To this end, we propose a learning-based approach that recommends refactorings based on the history of the previously requested features, applied refactorings, and code smells information. First, the state-of-the-art refactoring detection tools are leveraged to identify the previous refactorings applied to implement the past feature requests. Second, a machine classifier is trained with the history data of the feature requests, code smells, and refactorings applied on the respective commits. Consequently, the machine classifier is used to predict refactorings for new feature requests. The proposed approach is evaluated on the dataset of 55 open source Java projects and the results suggest that it can accurately recommend refactorings (accuracy is up to 83.19%). © 2020, Springer Science+Business Media, LLC, part of Springer Nature.","Code smells; Feature requests; Machine learning; Recommendation; Software refactoring","Codes (symbols); Odors; Turing machines; Automated support; Detection tools; Feature requests; Learning-based approach; Refactorings; Software Evolution; Software requirements; State of the art; Open source software","National Science Foundation, NSF: CCF-1350487; National Natural Science Foundation of China, NSFC: 61690205, 61772071","The authors would like to say thanks to the anonymous reviewers of this manuscript as well as to the program chairs and the anonymous reviewers of RE’19 conference for their insightful comments and constructive suggestions. This work is partially supported by the National Natural Science Foundation of China (No. 61772071 and No. 61690205), and the U.S. National Science Foundation Award (CCF-1350487).",,,,,,,,,,"Liu, H.; School of Computer Science and Technology, China; email: liuhui08@bit.edu.cn",,"Springer",13823256,,ESENF,,"English","Empir Software Eng",Article,"Final","",Scopus,2-s2.0-85089993610
"Guggulothu T., Moiz S.A.","57208908165;23467539000;","Code smell detection using multi-label classification approach",2020,"Software Quality Journal","28","3",,"1063","1086",,20,"10.1007/s11219-020-09498-y","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85083207122&doi=10.1007%2fs11219-020-09498-y&partnerID=40&md5=09e5883778f3f70f25897bf0bdb58b94","School of Computer and Information Sciences, University of Hyderabad, Hyderabad, Telangana, India","Guggulothu, T., School of Computer and Information Sciences, University of Hyderabad, Hyderabad, Telangana, India; Moiz, S.A., School of Computer and Information Sciences, University of Hyderabad, Hyderabad, Telangana, India","Code smells are characteristics of the software that indicates a code or design problem which can make software hard to understand, evolve, and maintain. There are several code smell detection tools proposed in the literature, but they produce different results. This is because smells are informally defined or subjective in nature. Machine learning techniques help in addressing the issues of subjectivity, which can learn and distinguish the characteristics of smelly and non-smelly source code elements (classes or methods). However, the existing machine learning techniques can only detect a single type of smell in the code element that does not correspond to a real-world scenario as a single element can have multiple design problems (smells). Further, the mechanisms proposed in the literature could not detect code smells by considering the correlation (co-occurrence) among them. To address these shortcomings, we propose and investigate the use of multi-label classification (MLC) methods to detect whether the given code element is affected by multiple smells or not. In this proposal, two code smell datasets available in the literature are converted into a multi-label dataset (MLD). In the MLD, we found that there is a positive correlation between the two smells (long method and feature envy). In the classification phase, the two methods of MLC considered the correlation among the smells and enhanced the performance (on average more than 95% accuracy) for the 10-fold cross-validation with the ten iterations. The findings reported help the researchers and developers in prioritizing the critical code elements for refactoring based on the number of code smells detected. © 2020, Springer Science+Business Media, LLC, part of Springer Nature.","Code smell correlation; Code smells; Code smells detection; Machine learning techniques; Multi-label classification; Refactoring; Software quality","Classification (of information); Learning algorithms; Machine learning; 10-fold cross-validation; Design problems; Detection tools; Machine learning techniques; Multi label classification; Positive correlations; Real-world scenario; Single element; Odors",,,,,,,,,,,,"Guggulothu, T.; School of Computer and Information Sciences, India; email: thirupathi.gugguloth@gmail.com",,"Springer",09639314,,,,"English","Softw. Qual. J.",Article,"Final","All Open Access, Green",Scopus,2-s2.0-85083207122
"Hamdy A., Tazy M.","55160491400;57218708356;","Deep hybrid features for code smells detection",2020,"Journal of Theoretical and Applied Information Technology","98","14",,"2684","2696",,2,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-85090125949&partnerID=40&md5=d66bb994a25467f9dcac357d2c9a228a","British University in Egypt, Faculty of Informatics and Computer Science, Egypt","Hamdy, A., British University in Egypt, Faculty of Informatics and Computer Science, Egypt; Tazy, M., British University in Egypt, Faculty of Informatics and Computer Science, Egypt","Code smells are symptoms of poor software design and implementation choices. Previous empirical studies have underlined their negative effect on software comprehension, fault-proneness and maintainability. A number of approaches have been proposed to identify the existence of code smells in the source code; recent studies have shown the potential of machine learning models in this context. However, previous approaches did not exploit the lexical and syntactical features of the source code; they instead modelled the source code using software metrics only. This paper proposes an approach for detecting the occurrence of the God class smell which utilizes both, the source code textual features and metrics to train three deep learning networks (i) Long short term memory, (ii) Gated recurrent unit and (iii) Convolutional neural network. We proposed utilizing deep leaning networks as they are reported to outperform traditional machine learning models in several domains including software engineering. To assess the proposed approach, a dataset for the God class smell was built using source codes acquired from the ""Qualitas Corpus"". Experimental results demonstrated that, the three deep learning networks outperformed three traditional machine learning models: Naïve Bayes, Random forests and Decision trees. Additionally, of the three deep learning networks the Gated recurrent unit model is the superior in this context. Furthermore, combining both, the source code metrics and textual features enhanced the accuracy of detecting the God class smell. © 2020 Little Lion Scientific. All rights reserved.","CNN; Code smells; Deep learning; God class; GRU; IR; LSTM; Software maintenance; Text mining; VSM",,,,,,,,,,,,,,,"Little Lion Scientific",19928645,,,,"English","J. Theor. Appl. Inf. Technol.",Article,"Final","",Scopus,2-s2.0-85090125949
"RAMAKRISHNAN V., PALANISAMY C.","57204242525;23985968400;","BIBSQLQC: Brown infomax boosted SQL query clustering algorithm to detect anti-patterns in the query log",2020,"Turkish Journal of Electrical Engineering and Computer Sciences","28","4",,"2200","2212",,1,"10.3906/ELK-1912-108","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85090162896&doi=10.3906%2fELK-1912-108&partnerID=40&md5=7cfcf92814bad186e24c62d2eb663e6b","Department of Information Technology, Bannari Amman Institute of Technology, Erode, India","RAMAKRISHNAN, V., Department of Information Technology, Bannari Amman Institute of Technology, Erode, India; PALANISAMY, C., Department of Information Technology, Bannari Amman Institute of Technology, Erode, India","Discovery of antipatterns from arbitrary SQL query log depends on the static code analysis used to enhance the quality and performance of software applications. The existence of antipatterns reduces the quality and leads to redundant SQL statements. SQL log includes a large load on the database and it is difficult for an analyst to extract large patterns in a minimal time. Existing techniques which discover antipatterns in SQL query face a lot of innumerable challenges to discover the normal sequences of queries within the log. In order to discover the antipatterns in the log, an efficient technique called Brown infomax boosted SQL query clustering (BIBSQLQC) technique is introduced. Initially, the number of patterns (i.e. queries) are extracted from the SQL query log. After extracting the patterns, the ensemble clustering process is carried out to find out the antipatterns from the given query log. The Brown infomax boost clustering is an ensemble learning method for grouping the patterns by constructing several weak learners. The Brown clustering is used as a weak learner for partitioning the patterns into 'k' number of clusters based on the Euclidean distance measure. Then the weak learner merges the two clusters with maximum information gained to minimize the time complexity. The clustering results of weak learners are combined into strong results with minimal error rate (ER). By this way, the antipattern in the SQL query log is detected with a higher accuracy. Experimental evaluation is conducted with different parameters namely detection accuracy (DA), false positive rate (FPR) and time complexity (TC) using the two SQL query log data-sets (DS). The experimental result shows that, the BIBSQLQC technique achieves higher DA with lower TC and FPR than the conventional methods. © 2020 Turkiye Klinikleri. All rights reserved.","Brown infomax boosting; Clustering; Patterns and antipatterns; Query; SQL log analysis","Application programs; Information retrieval; Learning systems; Quality control; Query processing; Conventional methods; Ensemble clustering; Euclidean distance measure; Experimental evaluation; False positive rates; Number of clusters; Software applications; Static code analysis; Clustering algorithms",,,,,,,,,,,,"RAMAKRISHNAN, V.; Department of Information Technology, India; email: rvinothsaravanan@bitsathy.ac.in",,"Turkiye Klinikleri",13000632,,,,"English","Turk J Electr Eng Comput Sci",Article,"Final","",Scopus,2-s2.0-85090162896
"Pecorelli F., Palomba F., Khomh F., De Lucia A.","57210934334;55321369000;24724747600;7003641564;","Developer-Driven Code Smell Prioritization",2020,"Proceedings - 2020 IEEE/ACM 17th International Conference on Mining Software Repositories, MSR 2020",,,,"220","231",,24,"10.1145/3379597.3387457","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85093670806&doi=10.1145%2f3379597.3387457&partnerID=40&md5=06ac9f34cf0961cfebc0e045c781d4da","SeSa Lab, University of Salerno, Italy; École Polytechnique de Montréal, Canada","Pecorelli, F., SeSa Lab, University of Salerno, Italy; Palomba, F., SeSa Lab, University of Salerno, Italy; Khomh, F., École Polytechnique de Montréal, Canada; De Lucia, A., SeSa Lab, University of Salerno, Italy","Code smells are symptoms of poor implementation choices applied during software evolution. While previous research has devoted effort in the definition of automated solutions to detect them, still little is known on how to support developers when prioritizing them. Some works attempted to deliver solutions that can rank smell instances based on their severity, computed on the basis of software metrics. However, this may not be enough since it has been shown that the recommendations provided by current approaches do not take the developer's perception of design issues into account. In this paper, we perform a first step toward the concept of developer-driven code smell prioritization and propose an approach based on machine learning able to rank code smells according to the perceived criticality that developers assign to them. We evaluate our technique in an empirical study to investigate its accuracy and the features that are more relevant for classifying the developer's perception. Finally, we compare our approach with a state-of-the-art technique. Key findings show that the our solution has an F-Measure up to 85% and outperforms the baseline approach. © 2020 ACM.","Code smells; Empirical Software Engineering; Machine Learning for Software Engineering","Learning to rank; Odors; Automated solutions; Design issues; Empirical studies; On-machines; Prioritization; Software Evolution; Software metrics; State-of-the-art techniques; Software engineering","Schweizerischer Nationalfonds zur Förderung der Wissenschaftlichen Forschung, SNF: PZ00P2_186090","Fabio gratefully acknowledges the help and financial support of the Swiss National Science Foundation through the SNF Project No. PZ00P2_186090 (TED).",,,,,,,,,,,,"Association for Computing Machinery, Inc",,9781450379571,,,"English","Proc. - IEEE/ACM Int. Conf. Min. Softw. Repos., MSR",Conference Paper,"Final","",Scopus,2-s2.0-85093670806
"Sousa L., Cedrim D., Garcia A., Oizumi W., Bibiano A.C., Oliveira D., Kim M., Oliveira A.","57194212913;57194528845;7404608626;55515918200;57202890121;57211276861;57203466476;56851872700;","Characterizing and Identifying Composite Refactorings: Concepts, Heuristics and Patterns",2020,"Proceedings - 2020 IEEE/ACM 17th International Conference on Mining Software Repositories, MSR 2020",,,,"186","197",,15,"10.1145/3379597.3387477","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85091910995&doi=10.1145%2f3379597.3387477&partnerID=40&md5=873ce4002b958603706129f5dcbda7b9","Electrical and Computer Engineering, Carnegie Mellon University, United States; Amazon, Brazil; PUC-Rio, Brazil; Ucla, United States","Sousa, L., Electrical and Computer Engineering, Carnegie Mellon University, United States; Cedrim, D., Amazon, Brazil; Garcia, A., PUC-Rio, Brazil; Oizumi, W., PUC-Rio, Brazil; Bibiano, A.C., PUC-Rio, Brazil; Oliveira, D., PUC-Rio, Brazil; Kim, M., Ucla, United States; Oliveira, A., PUC-Rio, Brazil","Refactoring consists of a transformation applied to improve the program internal structure, for instance, by contributing to remove code smells. Developers often apply multiple interrelated refactorings called composite refactoring. Even though composite refactoring is a common practice, an investigation from different points of view on how composite refactoring manifests in practice is missing. Previous empirical studies also neglect how different kinds of composite refactorings affect the removal, prevalence or introduction of smells. To address these matters, we provide a conceptual framework and two heuristics to respectively characterize and identify composite refactorings within and across commits. Then, we mined the commit history of 48 GitHub software projects. We identified and analyzed 24,911 composite refactorings involving 104,505 single refactorings. Amongst several findings, we observed that most composite refactorings occur in the same commit and have the same refactoring type. We found that several refactorings are semantically related to each other, which occur in different parts of the system but are still related to the same task. Our study is the first to reveal that many smells are introduced in a program due to ""incomplete""composite refactorings. Our study is also the first to reveal 111 patterns of composite refactorings that frequently introduce or remove certain smell types. These patterns can be used as guidelines for developers to improve their refactoring practices as well as for designers of recommender systems. © 2020 ACM.",,"Odors; Code smell; Commit history; Conceptual frameworks; Empirical studies; Internal structure; Refactorings; Software project; Software engineering","Coordenação de Aperfeiçoamento de Pessoal de Nível Superior, CAPES: 175956; Conselho Nacional de Desenvolvimento Científico e Tecnológico, CNPq: 312149/2016-6, 434969/2018-4; Fundação Carlos Chagas Filho de Amparo à Pesquisa do Estado do Rio de Janeiro, FAPERJ: 22520-7/2016","We want to thank the reviewers for their valuable suggestions. This work is funded by CNPq (grants 434969/2018-4, 312149/2016-6), CAPES (grant 175956), and FAPERJ (grant 22520-7/2016).",,,,,,,,,,,,"Association for Computing Machinery, Inc",,9781450379571,,,"English","Proc. - IEEE/ACM Int. Conf. Min. Softw. Repos., MSR",Conference Paper,"Final","",Scopus,2-s2.0-85091910995
"Cruz D., Santana A., Figueiredo E.","57207738812;57219336245;57213806535;","Detecting bad smells with machine learning algorithms: An empirical study",2020,"Proceedings - 2020 IEEE/ACM International Conference on Technical Debt, TechDebt 2020",,,,"31","40",,4,"10.1145/3387906.3388618","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85093119961&doi=10.1145%2f3387906.3388618&partnerID=40&md5=7504ccfec1b9932ac98031ae9df71572","Federal University of Minas Gerais, Belo Horizonte, Brazil","Cruz, D., Federal University of Minas Gerais, Belo Horizonte, Brazil; Santana, A., Federal University of Minas Gerais, Belo Horizonte, Brazil; Figueiredo, E., Federal University of Minas Gerais, Belo Horizonte, Brazil","Bad smells are symptoms of bad design choices implemented on the source code. They are one of the key indicators of technical debts, specifically, design debt. To manage this kind of debt, it is important to be aware of bad smells and refactor them whenever possible. Therefore, several bad smell detection tools and techniques have been proposed over the years. These tools and techniques present different strategies to perform detections. More recently, machine learning algorithms have also been proposed to support bad smell detection. However, we lack empirical evidence on the accuracy and efficiency of these machine learning based techniques. In this paper, we present an evaluation of seven different machine learning algorithms on the task of detecting four types of bad smells. We also provide an analysis of the impact of software metrics for bad smell detection using a unified approach for interpreting the models' decisions. We found that with the right optimization, machine learning algorithms can achieve good performance (F1 score) for two bad smells: God Class (0.86) and Refused Parent Bequest (0.67). We also uncovered which metrics play fundamental roles for detecting each bad smell. © 2020 ACM.","bad smells detection; empirical software engineering; machine learning; software measurement; software quality","Machine learning; Odors; Detection tools; Empirical studies; Key indicator; Software metrics; Source codes; Technical debts; Tools and techniques; Unified approach; Learning algorithms","Coordenação de Aperfeiçoamento de Pessoal de Nível Superior, CAPES; Conselho Nacional de Desenvolvimento Científico e Tecnológico, CNPq: 424340/2016-0; Fundação de Amparo à Pesquisa do Estado de Minas Gerais, FAPEMIG: PPM-00651-17","This research was partially supported by Brazilian funding agencies: CNPq (Grant 424340/2016-0), CAPES, and FAPEMIG (Grant PPM-00651-17).",,,,,,,,,,,,"Association for Computing Machinery, Inc",,9781450379601,,,"English","Proc. - IEEE/ACM Int. Conf. Tech. Debt, TechDebt",Conference Paper,"Final","",Scopus,2-s2.0-85093119961
"Mohsen R.K., Abbas A.S.","57216930493;57192159070;","Detect and diagnose Code Smell types by Using the Backpropagation Neural Network based on user feedback",2020,"Journal of Physics: Conference Series","1530","1","012022","","",,,"10.1088/1742-6596/1530/1/012022","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85086373614&doi=10.1088%2f1742-6596%2f1530%2f1%2f012022&partnerID=40&md5=ab686ad225f7649abffba58b0b3bb80e","Department of Software, Information Technology Collage, University of Babylon, Babylon, 51002, Iraq","Mohsen, R.K., Department of Software, Information Technology Collage, University of Babylon, Babylon, 51002, Iraq; Abbas, A.S., Department of Software, Information Technology Collage, University of Babylon, Babylon, 51002, Iraq","Millions of customers rely on smart phone applications for social networking, banking, health, news and many other uses and is also usable anytime, anywhere and in most environmental conditions. However, despite good planning by software engineers and organizations responsible for designing and building applications, the process of building or maintaining the application may be marred by some errors that lead to malfunction of the application or one of its functions, and this is often discovered after a long period, and this affects Opportunities of application success. Therefore, it is necessary to follow up on user feedback on the performance of applications, and to search for tools and methods that contribute to know what users want quickly to save ""effort"", ""time"" and ""cost"". This paper discusses some of the main functions of software engineering and the possibility of implementing them in machine learning to detect the presence of design errors ""Code Smell ""in Android applications with the diagnosis of error type. © Published under licence by IOP Publishing Ltd.",,"Aluminum alloys; Errors; Network coding; Neural networks; Smartphones; Android applications; Back propagation neural networks; Building applications; Design errors; Environmental conditions; Smart-phone applications; Tools and methods; User feedback; Application programs",,,,,,,,,,,,,,"Institute of Physics Publishing",17426588,,,,"English","J. Phys. Conf. Ser.",Conference Paper,"Final","All Open Access, Gold",Scopus,2-s2.0-85086373614
"Pirkelbauer P., Lin P.-H., Vanderbruggen T., Liao C.","23486289900;25626572700;57190983936;8671009000;","XPlacer: Automatic Analysis of Data Access Patterns on Heterogeneous CPU/GPU Systems",2020,"Proceedings - 2020 IEEE 34th International Parallel and Distributed Processing Symposium, IPDPS 2020",,,"9139836","997","1007",,2,"10.1109/IPDPS47924.2020.00106","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85088893063&doi=10.1109%2fIPDPS47924.2020.00106&partnerID=40&md5=e2bd982370817c5192780d651ba1ed9a","Lawrence Livermore National Laboratory, Center for Applied Scientific Computing, Livermore, CA  94550, United States","Pirkelbauer, P., Lawrence Livermore National Laboratory, Center for Applied Scientific Computing, Livermore, CA  94550, United States; Lin, P.-H., Lawrence Livermore National Laboratory, Center for Applied Scientific Computing, Livermore, CA  94550, United States; Vanderbruggen, T., Lawrence Livermore National Laboratory, Center for Applied Scientific Computing, Livermore, CA  94550, United States; Liao, C., Lawrence Livermore National Laboratory, Center for Applied Scientific Computing, Livermore, CA  94550, United States","This paper presents XPlacer, a framework to automatically analyze problematic data access patterns in C++ and CUDA code. XPlacer records heap memory operations in both host and device code for later analysis. To this end, XPlacer instruments read and write operations, function calls, and kernel launches. Programmers mark points in the program execution where the recorded data is analyzed and anomalies diagnosed. XPlacer reports data access anti-patterns, including alternating CPU/GPU accesses to the same memory, memory with low access density, and unnecessary data transfers. The diagnostic also produces summative information about the recorded accesses, which aids users in identifying code that could degrade performance.The paper evaluates XPlacer using LULESH, a Lawrence Livermore proxy application, Rodina benchmarks, and an implementation of the Smith-Waterman algorithm. XPlacer diagnosed several performance issues in these codes. The elimination of a performance problem in LULESH resulted in a 3x speedup on a heterogeneous platform combining Intel CPUs and Nvidia GPUs. © 2020 IEEE.","code instrumentation; GPGPU; heterogeneous systems; high-performance computing","Benchmarking; C++ (programming language); Data transfer; Program processors; Automatic analysis; Data access patterns; Heterogeneous platforms; Memory operations; Performance issues; Performance problems; Program execution; Smith-Waterman algorithm; Codes (symbols)","18-ERD-006, LLNL-CONF-795057; U.S. Department of Energy, USDOE; Lawrence Livermore National Laboratory, LLNL: DE-AC52-07NA27344","This work was performed under the auspices of the U.S. Department of Energy by Lawrence Livermore National Laboratory under Contract DE-AC52-07NA27344 and supported by LLNL-LDRD 18-ERD-006. LLNL-CONF-795057.",,,,,,,,,,,,"Institute of Electrical and Electronics Engineers Inc.",,9781728168760,,,"English","Proc. - IEEE Int. Parallel Distrib. Process. Symp., IPDPS",Conference Paper,"Final","",Scopus,2-s2.0-85088893063
"Rebai S., Kessentini M., Wang H., Maxim B.","57213189976;25653537200;57188742982;6602334683;","Web service design defects detection: A bi-level multi-objective approach",2020,"Information and Software Technology","121",,"106255","","",,9,"10.1016/j.infsof.2019.106255","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85077718451&doi=10.1016%2fj.infsof.2019.106255&partnerID=40&md5=ad57fe8c19e5162ae480ac4ef7f82e1f","University of Michigan, Dearborn, MI, United States; eBay, San Jose, CA, United States","Rebai, S., University of Michigan, Dearborn, MI, United States; Kessentini, M., University of Michigan, Dearborn, MI, United States; Wang, H., eBay, San Jose, CA, United States; Maxim, B., University of Michigan, Dearborn, MI, United States","Context: Web services frequently evolve to integrate new features, update existing operations and fix errors to meet the new requirements of subscribers. While this evolution is critical, it may have a negative impact on the quality of services (QoS) such as reduced cohesion, increased coupling, poor response time and availability, etc. Thus, the design of services could become hard to maintain and extend in future releases. Recent studies addressed the problem of web service design antipatterns detection, also called design defects, by either manually defining detection rules, as combination of quality metrics, or generating them automatically from a set of defect examples. The manual definition of these rules is time-consuming and difficult due to the subjective nature of design issues, especially to find the right thresholds value. The efficiency of the generated rules, using automated approaches, will depend on the quality of the training set since examples of web services antipatterns are limited. Furthermore, the majority of existing studies for design defects detection for web services are limited to structural information (interface/code static metrics) and they ignore the use of quality of services (QoS) or performance metrics, such as response time and availability, for this detection process or understanding the impact of antipatterns on these QoS attributes. Objective: To address these challenges, we designed a bi-level multi-objective optimization approach to enable the generation of antipattern examples that can improve the efficiency of detection rules. Method: The upper-level generates a set of detection rules as a combination of quality metrics with their threshold values maximizing the coverage of defect examples extracted from several existing web services and artificial ones generated by a lower level. The lower level maximizes the number of generated artificial defects that cannot be detected by the rules of the upper level and minimizes the similarity to well-designed web service examples. The generated detection rules, by our approach, are based on a combination of dynamic QoS attributes and structural information of web service (static interface/code metrics). Results: The statistical analysis of our results, based on a data-set of 662 web services, confirms the efficiency of our approach in detecting web service antipatterns comparing to the current state of the art in terms of precision and recall. Conclusion: The multi-objective search formulation at both levels helped to diversify the generated artificial web service defects which produced better quality of detection rules. Furthermore, the combination of dynamic QoS attributes and structural information of web services improved the efficiency of the generated detection rules. © 2019","Quality of services; Search based software engineering; Services design","Availability; Defects; Efficiency; Multiobjective optimization; Quality of service; Software engineering; Websites; Antipatterns detections; Artificial defects; Automated approach; Performance metrics; Precision and recall; Search-based software engineering; Services designs; Structural information; Web services",,,,,,,,,,,,"Kessentini, M.; University of MichiganUnited States; email: marouane@umich.edu",,"Elsevier B.V.",09505849,,ISOTE,,"English","Inf Software Technol",Article,"Final","",Scopus,2-s2.0-85077718451
"Al-Shaaby A., Aljamaan H., Alshayeb M.","57213149203;57220207494;6506030177;","Bad Smell Detection Using Machine Learning Techniques: A Systematic Literature Review",2020,"Arabian Journal for Science and Engineering","45","4",,"2341","2369",,22,"10.1007/s13369-019-04311-w","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85077525154&doi=10.1007%2fs13369-019-04311-w&partnerID=40&md5=06c8c3007723dae56b5cf5c617175ccc","Information and Computer Science Department, King Fahd University of Petroleum and Minerals, Dhahran, 31261, Saudi Arabia","Al-Shaaby, A., Information and Computer Science Department, King Fahd University of Petroleum and Minerals, Dhahran, 31261, Saudi Arabia; Aljamaan, H., Information and Computer Science Department, King Fahd University of Petroleum and Minerals, Dhahran, 31261, Saudi Arabia; Alshayeb, M., Information and Computer Science Department, King Fahd University of Petroleum and Minerals, Dhahran, 31261, Saudi Arabia","Code smells are indicators of potential problems in software. They tend to have a negative impact on software quality. Several studies use machine learning techniques to detect bad smells. The objective of this study is to systematically review and analyze machine learning techniques used to detect code smells to provide interested research community with knowledge about the adopted techniques and practices for code smells detection. We use a systematic literature review approach to review studies that use machine learning techniques to detect code smells. Seventeen primary studies were identified. We found that 27 code smells were used in the identified studies; God Class and Long Method, Feature Envy, and Data Class are the most frequently detected code smells. In addition, we found that 16 machine learning algorithms were employed to detect code smells with acceptable prediction accuracy. Furthermore, we the results also indicate that support vector machine techniques were investigated the most. Moreover, we observed that J48 and Random Forest algorithms outperform the other algorithms. We also noticed that, in some cases, the use of boosting techniques on the models does not always enhance their performance. More studies are needed to consider the use of ensemble learning techniques, multiclassification, and feature selection technique for code smells detection. Thus, the application of machine learning algorithms to detect code smells in systems is still in its infancy and needs more research to facilitate the employment of machine learning algorithms in detecting code smells. © 2020, King Fahd University of Petroleum & Minerals.","Anti-pattern; Artificial intelligent; Bad smell; Code smell; Machine learning; Software quality",,"King Fahd University of Petroleum and Minerals, KFUPM","The authors acknowledge the support of King Fahd University of Petroleum and Minerals in the development of this work. 1 C&K metrics (DIT, NOC, CBO, RFC, WMC, LCOM). 2 MOOD metrics (MHF, AHF, MIF, AIF, POF, COF). 3 QMOOD metrics (DSC, NOH, ANA, DAM, DCC, CAM, MOA, MFA, NOP, NOM, CIS).",,,,,,,,,,"Alshayeb, M.; Information and Computer Science Department, Saudi Arabia; email: alshayeb@kfupm.edu.sa",,"Springer",2193567X,,,,"English","Arab. J. Sci. Eng.",Review,"Final","",Scopus,2-s2.0-85077525154
"Falessi D., Roll J., Guo J.L.C., Cleland-Huang J.","13103911200;57203221152;57203289380;6506741859;","Leveraging historical associations between requirements and source code to identify impacted classes",2020,"IEEE Transactions on Software Engineering","46","4","8423658","420","441",,5,"10.1109/TSE.2018.2861735","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85050982730&doi=10.1109%2fTSE.2018.2861735&partnerID=40&md5=2b87da1a7ab6367353d6b97d8b67b4ba","California Polytechnic State University, San Luis Obispo, CA  93407, United States; School of Computer Science, McGill University, Montreal, QC  H3A 0G4, Canada; Computer Science and Engineering, University of Notre Dame, South Bend, IN  46556, United States","Falessi, D., California Polytechnic State University, San Luis Obispo, CA  93407, United States; Roll, J., California Polytechnic State University, San Luis Obispo, CA  93407, United States; Guo, J.L.C., School of Computer Science, McGill University, Montreal, QC  H3A 0G4, Canada; Cleland-Huang, J., Computer Science and Engineering, University of Notre Dame, South Bend, IN  46556, United States","As new requirements are introduced and implemented in a software system, developers must identify the set of source code classes which need to be changed. Therefore, past effort has focused on predicting the set of classes impacted by a requirement. In this paper, we introduce and evaluate a new type of information based on the intuition that the set of requirements which are associated with historical changes to a specific class are likely to exhibit semantic similarity to new requirements which impact that class. This new Requirements to Requirements Set (R2RS) family of metrics captures the semantic similarity between a new requirement and the set of existing requirements previously associated with a class. The aim of this paper is to present and evaluate the usefulness of R2RS metrics in predicting the set of classes impacted by a requirement. We consider 18 different R2RS metrics by combining six natural language processing techniques to measure the semantic similarity among texts (e.g., VSM) and three distribution scores to compute overall similarity (e.g., average among similarity scores). We evaluate if R2RS is useful for predicting impacted classes in combination and against four other families of metrics that are based upon temporal locality of changes, direct similarity to code, complexity metrics, and code smells. Our evaluation features five classifiers and 78 releases belonging to four large open-source projects, which result in over 700,000 candidate impacted classes. Experimental results show that leveraging R2RS information increases the accuracy of predicting impacted classes practically by an average of more than 60 percent across the various classifiers and projects. © 1976-2012 IEEE.","Impact analysis; mining software repositories; traceability","Classification (of information); Codes (symbols); Computational complexity; Forecasting; Job analysis; Measurement; Natural language processing systems; Open systems; Semantics; Complexity theory; Impact analysis; Mining software repositories; NAtural language processing; Task analysis; traceability; Open source software","National Science Foundation, NSF: CCF-1319680; Directorate for Computer and Information Science and Engineering, CISE: 1319680","Davide Falessi was partially supported by the Cal Poly SURP grant “Enhancing Software Impact Analysis via Semantic Requirements Analysis” and the Cal Poly RSCA grant “Software Change Predictability via Semantic Requirements Analysis”. The Notre Dame researchers were partially funded in this project by the US National Science Foundation Grant CCF-1319680.",,,,,,,,,,"Falessi, D.; California Polytechnic State UniversityUnited States; email: dfalessi@calpoly.edu",,"Institute of Electrical and Electronics Engineers Inc.",00985589,,IESED,,"English","IEEE Trans Software Eng",Review,"Final","All Open Access, Green",Scopus,2-s2.0-85050982730
"Panigrahi R., Kuanar S.K., Kumar L.","56417995400;55608980700;56120791500;","Application of Naïve Bayes classifiers for refactoring Prediction at the method level",2020,"2020 International Conference on Computer Science, Engineering and Applications, ICCSEA 2020",,,"9132849","","",,3,"10.1109/ICCSEA49143.2020.9132849","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85089773794&doi=10.1109%2fICCSEA49143.2020.9132849&partnerID=40&md5=0b7061fefd3c1a7aacb4cfc641a82c26","GIET University, Department of Computer Science and Engineering, Gunupur, Odisha, India; BITS-PILANI, Department of Computer Science and Information Systems, Hyderabad, India","Panigrahi, R., GIET University, Department of Computer Science and Engineering, Gunupur, Odisha, India; Kuanar, S.K., GIET University, Department of Computer Science and Engineering, Gunupur, Odisha, India; Kumar, L., BITS-PILANI, Department of Computer Science and Information Systems, Hyderabad, India","Software refactoring is a technique of redesigning the existing code without changing its functionality in order to improve on code readability, code adherence, maintainability and portability. Recent years have witnessed the advancement of research in the field of improvement in code quality. The challenges involved in the field has attracted many software practitioners to identify methods or classes that need refactoring. We propose a model to predict refactoring candidates by Naïve Bayes classifiers (Gaussian, Multinomial and Bernoulli (GNB, MNB, BNB)) at method level refactoring in terms of AUC and Accuracy. Method level refactoring is carried out on data set from the Tera-Promise repository and then validated. Min-max normalization and Imbalancing techniques are then applied. Then using the Wilcoxon rank test, 8 sets of significant features are drawn out of 103 sets of input features.The experimental results on the performance of 3 Naïve Bayes classifiers shows that the Bernoulli Naïve Bayes classifier gives more accuracy as compared to the other two classifiers. Statistical tests applied on all features (AF) and significant features (SF), shows that significant features gives more accurate prediction than all features. © 2020 IEEE.","code smell; naïve Bayes classifier; Software refactoring","Computer software portability; Forecasting; Accurate prediction; Bayes Classifier; Code readability; Min-max normalizations; Multinomials; Software practitioners; Software refactoring; Wilcoxon rank tests; Codes (symbols)",,,,,,,,,,,,,,"Institute of Electrical and Electronics Engineers Inc.",,9781728158303,,,"English","Int. Conf. Comput. Sci., Eng. Appl., ICCSEA",Conference Paper,"Final","",Scopus,2-s2.0-85089773794
"Thongkum P., Mekruksavanich S.","57202956185;35174894700;","Design Flaws Prediction for Impact on Software Maintainability using Extreme Learning Machine",2020,"2020 Joint International Conference on Digital Arts, Media and Technology with ECTI Northern Section Conference on Electrical, Electronics, Computer and Telecommunications Engineering, ECTI DAMT and NCON 2020",,,"9090717","79","82",,,"10.1109/ECTIDAMTNCON48261.2020.9090717","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85085624279&doi=10.1109%2fECTIDAMTNCON48261.2020.9090717&partnerID=40&md5=c9ad9312711b825a96c0fc255daacf69","University of Phayao, Department of Software Engineering, Phayao, Thailand; University of Phayao, Department of Computer Engineering, Phayao, Thailand","Thongkum, P., University of Phayao, Department of Software Engineering, Phayao, Thailand; Mekruksavanich, S., University of Phayao, Department of Computer Engineering, Phayao, Thailand","The software that contains flaws in its design is an indication that the design and coding standards have been violated by the developer during the software system's development. It has been observed in recent empirical studies that classes with flaws in the design flaws have a higher probability of change proneness or fault proneness when compared to classes without flaws in the design. There is an exponential increase in terms of the effort required to remove bugs due to design flaws in cases where the flaws are not detected in the early stages of the development of the software. The use of source code metrics for the prediction of design flaws can be implemented in the initial stages of the life cycle of the software development for the reduction of the testing effort and the maintenance of the software as well as the improvement of its quality. This empirical research study examines and assesses a variety of techniques for classification, feature selection, and data sampling in order to deal with the imbalance data for prediction of several categories of design flaws. The assessment of more than 20 application packages is the basis of the conclusions of this study. The results of the experiments indicate that the estimating capability of various classifiers, feature selection, and data imbalance techniques for the development of prediction models for design flaws can be confirmed. In addition, it was also revealed that the models that were developed through the use of one particular technique were found to be superior to the models that were developed with the use of other techniques, according to our analysis. © 2020 IEEE.","design flaws; Extreme Learning Machine; software maintenance; software metrics","Arts computing; Classification (of information); Feature extraction; Forecasting; Learning systems; Life cycle; Program debugging; Software testing; Well testing; Coding standards; Empirical research; Empirical studies; Exponential increase; Extreme learning machine; Prediction model; Software maintainability; Source code metrics; Software design",,"ACKNOWLEDGMENT This research was supported in part by the School of Information and Communication Technology, University of Phayao, Thailand.",,,,,,,,,,,,"Institute of Electrical and Electronics Engineers Inc.",,9781728163987,,,"English","Jt. Int. Conf. Digit. Arts, Media Technol. ECTI North. Sect. Conf. Electr., Electron., Comput. Telecommun. Eng., ECTI DAMT NCON",Conference Paper,"Final","",Scopus,2-s2.0-85085624279
"Barbez A., Khomh F., Guéhéneuc Y.-G.","57212377305;24724747600;13613429100;","A machine-learning based ensemble method for anti-patterns detection",2020,"Journal of Systems and Software","161",,"110486","","",,12,"10.1016/j.jss.2019.110486","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85076559059&doi=10.1016%2fj.jss.2019.110486&partnerID=40&md5=ec8a0ff172eff58af69f033014cacec9","Polytechnique Montreal, Canada; Concordia University, Canada","Barbez, A., Polytechnique Montreal, Canada; Khomh, F., Polytechnique Montreal, Canada; Guéhéneuc, Y.-G., Concordia University, Canada","Anti-patterns are poor solutions to recurring design problems. Several empirical studies have highlighted their negative impact on program comprehension, maintainability, as well as fault-proneness. A variety of detection approaches have been proposed to identify their occurrences in source code. However, these approaches can identify only a subset of the occurrences and report large numbers of false positives and misses. Furthermore, a low agreement is generally observed among different approaches. Recent studies have shown the potential of machine-learning models to improve this situation. However, such algorithms require large sets of manually-produced training-data, which often limits their application in practice. In this paper, we present SMAD (SMart Aggregation of Anti-patterns Detectors), a machine-learning based ensemble method to aggregate various anti-patterns detection approaches on the basis of their internal detection rules. Thus, our method uses several detection tools to produce an improved prediction from a reasonable number of training examples. We implemented SMAD for the detection of two well known anti-patterns: God Class and Feature Envy. With the results of our experiments conducted on eight java projects, we show that: (1) Our method clearly improves the so aggregated tools; (2) SMAD significantly outperforms other ensemble methods. © 2019","Anti-patterns; Ensemble methods; Machine learning; Software quality","Computer software selection and evaluation; Learning systems; Machine learning; Anti-patterns; Detection approach; Empirical studies; Ensemble methods; Machine learning models; Program comprehension; Software Quality; Training example; Pattern recognition","Natural Sciences and Engineering Research Council of Canada, NSERC","This work is partly supported by the The Natural Sciences and Engineering Research Council of Canada (NSERC) and the Canada Research Chair on Patterns in Mixed-language Systems.","This work is partly supported by the The Natural Sciences and Engineering Research Council of Canada (NSERC) and the Canada Research Chair on Patterns in Mixed-language Systems. Antoine Barbez received a double masters degree from the École Polytechnique de Montréal, Canada, and from Télécom SudParis, France, in 2019. His research interests include deep learning, data mining, software architecture, and software maintenance and evolution. Foutse Khomh is an associate professor at Polytechnique Montréal and FRQ-IVADO Research Chair on Software Quality Assurance for Machine Learning Applications. He received a Ph.D in Software Engineering from the University of Montreal in 2010, with the Award of Excellence. His research interests include software maintenance and evolution, cloud engineering, service-centric software engineering, empirical software engineering, and software analytic. He has published several papers in international conferences and journals, including ICSM(E), ASE, ISSRE, SANER, ICWS, HPCC, IPCCC, JSS, ASEJ, JSEP, EMSE, and TSE. His work has received three ten-year Most Influential Paper (MIP) Award, and four Best/Distinguished paper Awards. Yann-Gaël Guéhéneuc is full professor at the Department of Computer Science and Software Engineering of Concordia University. In 2003, he received a Ph.D. in Software Engineering from University of Nantes, France, under Professor Pierre Cointe’s supervision. His research interests are program understanding and program quality, in particular through the use and the identification of recurring patterns. He is interested also in empirical software engineering. He has published papers in international conferences and journals, including IEEE TSE, Springer EMSE, ACM/IEEE ICSE, IEEE ICSME, and IEEE SANER. He was the program co-chair and general chair of several events, including IEEE SANER’15, APSEC’14, and IEEE ICSM’13.",,,,,,,,,"Barbez, A.; Polytechnique MontrealCanada; email: antoine.barbez@polymtl.ca",,"Elsevier Inc.",01641212,,JSSOD,,"English","J Syst Software",Article,"Final","All Open Access, Green",Scopus,2-s2.0-85076559059
[No author name available],[No author id available],"13th Innovations in Software Engineering Conference, ISEC 2020",2020,"ACM International Conference Proceeding Series",,,,"","",166,,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-85123043159&partnerID=40&md5=6a9239b5b95c270f60849747235cb202",,"","The proceedings contain 25 papers. The topics discussed include: understanding and improving continuous integration and delivery practice using data from the wild; control-flow based anomaly detection in the bug-fixing process of open-source projects; clustering glossary terms extracted from large-sized software requirements using fasttext; StaBL: statecharts with local variables; prediction of web service anti-patterns using aggregate software metrics and machine learning techniques; towards a model-driven product line engineering process: an industrial case study; HACO: a framework for developing human-AI teaming; and a preliminary study on case-based learning teaching pedagogy: scope in SE education.",,,,,,,,,,,,,,,,"Association for Computing Machinery",,9781450375948,,,"English","ACM Int. Conf. Proc. Ser.",Conference Review,"Final","",Scopus,2-s2.0-85123043159
"Tummalapalli S., Kumar L., Murthy N.L.B.","57190253628;56120791500;57197306945;","Prediction ofWeb Service Anti-patterns Using Aggregate Software Metrics and Machine Learning Techniques",2020,"ACM International Conference Proceeding Series",,,"3385042","","",,,"10.1145/3385032.3385042","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85082663762&doi=10.1145%2f3385032.3385042&partnerID=40&md5=b383dd382441bbdbe3e71b453af90d9c","BITS Pilani, Hyderabad, India","Tummalapalli, S., BITS Pilani, Hyderabad, India; Kumar, L., BITS Pilani, Hyderabad, India; Murthy, N.L.B., BITS Pilani, Hyderabad, India","Service-Oriented Architecture(SOA) can be characterized as an approximately coupled engineering intended to meet the business needs of an association/organization. Service-Based Systems (SBSs) are inclined to continually change to enjoy new client necessities and adjust the execution settings, similar to some other huge and complex frameworks. These changes may lead to the evolution of designs/products with poor Quality of Service (QoS), resulting in the bad practiced solutions, commonly known as Anti-patterns. Anti-patterns makes the evolution and maintenance of the software systems hard and complex. Early identification of modules, classes, or source code regions where anti-patterns are more likely to occur can help in amending and maneuvering testing efforts leading to the improvement of software quality. In this work, we investigate the application of three sampling techniques, three feature selection techniques, and sixteen different classification techniques to develop the models for web service anti-pattern detection. We report the results of an empirical study by evaluating the approach proposed, on a data set of 226 Web Service Description Language(i.e., WSDL)files, a variety of five types of web-service anti-patterns. Experimental results demonstrated that SMOTE is the best performing data sampling techniques. The experimental results also reveal that the model developed by considering Uncorrelated Significant Predictors(SUCP) as the input obtained better performance compared to the model developed by other metrics. Experimental results also show that the Least Square Support Vector Machine with Linear(LSLIN) function has outperformed all other classifier techniques. © 2020 Association for Computing Machinery.","Aggregation measures; Anti-pattern; Class imbalance distribution; Classifiers.; Feature selection; Machine learning; Service-based systems(sbs); Source code metrics; Web-services; Wsdl","Classifiers; Computer software selection and evaluation; Feature extraction; Information services; Learning systems; Predictive analytics; Quality of service; Service oriented architecture (SOA); Software quality; Software testing; Support vector machines; Websites; WSDL; Anti-patterns; Class imbalance; Classification technique; Least square support vector machines; Machine learning techniques; Service-based systems; Source code metrics; Web service description language; Web services",,,,,,,,,,,,,,"Association for Computing Machinery",,9781450375948,,,"English","ACM Int. Conf. Proc. Ser.",Conference Paper,"Final","",Scopus,2-s2.0-85082663762
"Tiwari O., Joshi R.K.","57216156458;7202085331;","Functionality Based Code Smell Detection and Severity Classification",2020,"ACM International Conference Proceeding Series",,,"3385048","","",,,"10.1145/3385032.3385048","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85082651159&doi=10.1145%2f3385032.3385048&partnerID=40&md5=3888a187b222f839c4cc0d4601d6bca6","Department of Computer Science and Engineering, Indian Institute of Technology, Bombay Mumbai, India","Tiwari, O., Department of Computer Science and Engineering, Indian Institute of Technology, Bombay Mumbai, India; Joshi, R.K., Department of Computer Science and Engineering, Indian Institute of Technology, Bombay Mumbai, India","The Long Method code smell is a symptom of design defects caused by implementing multiple tasks within a single method. It limits reusability, evolvability and maintainability of a method. In this paper, we present a functionality based approach for detecting long methods. Functionalities are identified through a novel block based dependency analysis technique called Segmentation. It clusters sets of statements into extract method opportunities (or tasks). The approach uses interdependencies among various extract method opportunities identified within the method as a means to measure severity of the long method smell. The approach is validated over a Java based open source code. A comparison with expert's assessment shows that the approach is promising in detecting severe methods irrespective of their sizes. © 2020 Association for Computing Machinery.","Code smell; Extract method opportunity; Long method smell severity; Refactoring; Segmentation","Image segmentation; Open source software; Reusability; Code smell; Dependency analysis; Design defects; Extract method opportunity; Long method smell severity; Multiple tasks; Open-source code; Refactorings; Open systems",,,,,,,,,,,,,,"Association for Computing Machinery",,9781450375948,,,"English","ACM Int. Conf. Proc. Ser.",Conference Paper,"Final","",Scopus,2-s2.0-85082651159
"Tapera O., Nyakabau A.M.","57208421054;6507906742;","Limited knowledge and access to palliative care among women with cervical cancer: An opportunity for integrating oncology and palliative care in Zimbabwe",2020,"BMC Palliative Care","19","1","20","","",,12,"10.1186/s12904-020-0523-5","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85079338766&doi=10.1186%2fs12904-020-0523-5&partnerID=40&md5=0ce8e6738a09ef78d3229b0a410958c9","School of Health Systems and Public Health, University of Pretoria, Pretoria, South Africa; Parirenyatwa Group of Hospitals, Radiotherapy Centre, Harare, Zimbabwe","Tapera, O., School of Health Systems and Public Health, University of Pretoria, Pretoria, South Africa; Nyakabau, A.M., Parirenyatwa Group of Hospitals, Radiotherapy Centre, Harare, Zimbabwe","Background: Cervical cancer is mostly diagnosed at advanced stages among the majority of women in low-income settings, with palliative care being the only feasible form of care. This study was aimed at investigating palliative care knowledge and access among women with cervical cancer in Harare, Zimbabwe. Methods: Sequential mixed methods design was used, consisting of two surveys and a qualitative inquiry. A census of 134 women diagnosed with cervical cancer who visited two cancer treating health facilities and one palliative care provider in Harare between January and April, 2018 were enrolled in the study. Seventy-eight health workers were also enrolled in a census in the respective facilities for a survey. Validated structured questionnaires in electronic format were used for both surveys. Descriptive statistics were generated from the surveys after conducting univariate analysis using STATA. Qualitative study used interview/discussion guides for data collection. Thematic analysis was conducted for qualitative data. Results: Mean ages of patients and health workers in the surveys were 52 years (SD = 12) and 37 years (SD = 10,respectively. Thirty-two percent of women with cervical cancer reported knowledge of where to seek palliative care. Sixty-eight percent of women with cervical cancer had received treatment, yet only 13% reported receiving palliative care. Few women with cervical cancer associated treatment with pain (13%) and side effects (32%). More women associated cervical cancer with bad smells (81%) and death (84%). Only one of the health workers reported referring patients for palliative care. Seventy-six percent of health workers reported that the majority of patients with cervical cancer sourced their own analgesics from private pharmacies. Qualitative findings revealed a limited or lack of cervical cancer knowledge among nurses especially in primary health care, the existence of stigma among women with cervical cancer and limited implementation of palliative policy. Conclusions: This study revealed limited knowledge and access to palliative care in a low-income setting due to multi-faceted barriers. These challenges are not unique to the developing world and they present an opportunity for low-income countries to start considering and strategizing the integration of oncology and palliative care models in line with international recommendations. © 2020 The Author(s).","Access; Cervical cancer; Integration; Knowledge; Palliative care; Sequential mixed methods; Zimbabwe","adult; Article; attitude to health; cross-sectional study; death; evidence based medicine; female; groups by age; health care access; health care facility; health care personnel; health care policy; health program; health survey; human; information processing; major clinical study; middle aged; nurse; palliative therapy; patient referral; qualitative research; stigma; structured questionnaire; study design; thematic analysis; uterine cervix cancer; validation process; Zimbabwe; cancer center; health care delivery; organization and management; palliative therapy; procedures; psychology; questionnaire; uterine cervix tumor; Adult; Female; Health Services Accessibility; Humans; Middle Aged; Oncology Service, Hospital; Palliative Care; Qualitative Research; Surveys and Questionnaires; Uterine Cervical Neoplasms; Zimbabwe",,,,,,,,,,,,"Tapera, O.; School of Health Systems and Public Health, South Africa; email: oscar.tapera@gmail.com",,"BioMed Central Ltd.",1472684X,,,"32054480","English","BMC Palliative Care",Article,"Final","All Open Access, Gold, Green",Scopus,2-s2.0-85079338766
"Dong R.-Z., Li B.-X., Wang L.-L., Li H.-W., Chen H.-L., Tan J.","55901623800;9334814500;36663167700;56981810500;57216821599;7402302609;","Review of Research on Software Ecosystems [软件生态系统研究综述]",2020,"Jisuanji Xuebao/Chinese Journal of Computers","43","2",,"250","271",,,"10.11897/SP.J.1016.2020.00250","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85084791878&doi=10.11897%2fSP.J.1016.2020.00250&partnerID=40&md5=03fcfe3136d941239b7beeedab9a2a32","School of Computer Science and Technology, Changshu Institute of Technology, Changshu, Jiangsu  215500, China; School of Computer Science and Technology, Southeast University, Nanjing, 211189, China; School of Computer and Information Engineering, Jiangxi Normal University, Nanchang, 330022, China; Cynovo Technology Co. Ltd, Wuxi, Jiangsu  214028, China; Department of Computer Science, University of Wisconsin-Eau Claire, Eau Claire, WI  54701, United States","Dong, R.-Z., School of Computer Science and Technology, Changshu Institute of Technology, Changshu, Jiangsu  215500, China, School of Computer Science and Technology, Southeast University, Nanjing, 211189, China, Cynovo Technology Co. Ltd, Wuxi, Jiangsu  214028, China; Li, B.-X., School of Computer Science and Technology, Southeast University, Nanjing, 211189, China; Wang, L.-L., School of Computer Science and Technology, Southeast University, Nanjing, 211189, China; Li, H.-W., School of Computer and Information Engineering, Jiangxi Normal University, Nanchang, 330022, China; Chen, H.-L., Cynovo Technology Co. Ltd, Wuxi, Jiangsu  214028, China; Tan, J., Department of Computer Science, University of Wisconsin-Eau Claire, Eau Claire, WI  54701, United States","The innovation of software ecosystems has great influences on the production style of IT industry. It refactors the business ecosystems of IT industry. Academic and industry researchers have paid close attention to software ecosystems since 2003. Some world-wide famous IT companies make efforts towards achieving their own software ecosystems. As has developed to numerous examples of software ecosystems. Currently, emerging information technologies (such as cloud computing, mobile application development, cyber-physical systems, blockchains) are applied deeply and widely in the field of software ecosystems. The application of software ecosystems has become more and more intensive in various industries and domains. The definition of a software ecosystem has changed greatly over time. In order to clarify the context of a software ecosystem, researchers adopt biological ecosystem theories, and propose several different kinds of definitions for software ecosystems. It is not until the year of 2016 that there is consensus on what a software ecosystem is. A software ecosystem refers to a complex system in which the software and its related stakeholders interact intensively within a common technological infrastructure. In the paper, we adopt biological ecosystem theories to the context so as to come out a meta-model of software ecosystems which forms the basis for the discussion of the issues relating to software ecosystems. The meta-model, which is presented in UML class diagram, describes the key building blocks and key characteristics of software ecosystems. Typically, the research results of papers in the field of software ecosystems are compared to traditional classification which was presented in 2003. The traditional classification includes seven categories: (1) procedure or technique; (2) qualitative or descriptive model; (3) analytic model; (4) empirical model; (5) tool or notation; (6) specific solution, prototype, answer, or judgment; (7) report. But, the traditional classification schema has to be revised because that the context and the key characteristics of software ecosystems have changed greatly over time. According to our observations, we find that the combination of quantity and quality analysis is always adopted in the field, and that empirical studies reporting specific solutions for software ecosystems are in fashion. We make minor changes to the traditional classification schema for the papers focusing on software ecosystems, and then propose a five-classification pattern. Our five-classification schema combines ""qualitative or descriptive model"" and ""analytic model"" to produce a new category namely ""analytic method or framework"", and integrate ""specific solution, prototype, answer, or judgment"" into ""empirical study"". The meta-model as well as the five-classification schema forms the basis for the discussions of the issues relating to software ecosystems. Then, we provide a literal review of the research in the filed from 2015 until 2017. In total, the literature counts 196 papers. Our literature review is based on the keywords, the abstract, publication source, research content. We category the research results of papers into our five-category schema, and then identify the recent development and progress in the field. However, there exists a set of challenges for future research. Those challenges includes requirements engineering, architecture modeling, model-driven development, power mechanisms, feature analysis, information content analysis, ecologic network analysis, impact analysis of defect and/or bad smell, tool supports, emerging applications for software ecosystems. © 2020, Science Press. All right reserved.","Ecological system structure; Meta-model; Software ecosystems; Taxonomy schema","Analytical models; Application programs; Computation theory; Embedded systems; Mobile computing; Quality control; Architecture modeling; Biological ecosystem; Emerging applications; Emerging information technologies; Information content analysis; Mobile application development; Model driven development; Technological infrastructure; Ecosystems",,,,,,,,,,,,"Li, B.-X.; School of Computer Science and Technology, China; email: bx.li@seu.edu.cn",,"Science Press",02544164,,JIXUD,,"Chinese","Jisuanji Xuebao",Review,"Final","",Scopus,2-s2.0-85084791878
"Lenarduzzi V., Lomio F., Huttunen H., Taibi D.","55348964400;57216456159;7004478798;55920884000;","Are SonarQube Rules Inducing Bugs?",2020,"SANER 2020 - Proceedings of the 2020 IEEE 27th International Conference on Software Analysis, Evolution, and Reengineering",,,"9054821","501","511",,26,"10.1109/SANER48275.2020.9054821","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85083565109&doi=10.1109%2fSANER48275.2020.9054821&partnerID=40&md5=b02e9d84c6eb93fb5ccd9db67d59ae6b","Lahti-Lappeenranta University, Lahti-Lappeenranta, Finland; Tampere University, Tampere, Finland","Lenarduzzi, V., Lahti-Lappeenranta University, Lahti-Lappeenranta, Finland; Lomio, F., Tampere University, Tampere, Finland; Huttunen, H., Tampere University, Tampere, Finland; Taibi, D., Tampere University, Tampere, Finland","The popularity of tools for analyzing Technical Debt, and particularly the popularity of SonarQube, is increasing rapidly. SonarQube proposes a set of coding rules, which represent something wrong in the code that will soon be reflected in a fault or will increase maintenance effort. However, our local companies were not confident in the usefulness of the rules proposed by SonarQube and contracted us to investigate the fault-proneness of these rules. In this work we aim at understanding which SonarQube rules are actually fault-prone and to understand which machine learning models can be adopted to accurately identify fault-prone rules. We designed and conducted an empirical study on 21 well-known mature open-source projects. We applied the SZZ algorithm to label the fault-inducing commits. We analyzed the fault-proneness by comparing the classification power of seven machine learning models. Among the 202 rules defined for Java by SonarQube, only 25 can be considered to have relatively low fault-proneness. Moreover, violations considered as 'bugs' by SonarQube were generally not fault-prone and, consequently, the fault-prediction power of the model proposed by SonarQube is extremely low. The rules applied by SonarQube for calculating technical debt should be thoroughly investigated and their harmfulness needs to be further confirmed. Therefore, companies should carefully consider which rules they really need to apply, especially if their goal is to reduce fault-proneness. © 2020 IEEE.","architectural smells; code smells; coding style; machine learning; SonarQube; static analysis; Technical Debt","Machine learning; Reengineering; Classification power; Empirical studies; Fault prediction; Fault proneness; Machine learning models; Maintenance efforts; Open source projects; Technical debts; Open source software",,,,,,,,,,,,,"Kontogiannis K.Khomh F.Chatzigeorgiou A.Fokaefs M.-E.Zhou M.","Institute of Electrical and Electronics Engineers Inc.",,9781728151434,,,"English","SANER - Proc. IEEE Int. Conf. Softw. Anal., Evol., Reengineering",Conference Paper,"Final","All Open Access, Green",Scopus,2-s2.0-85083565109
"Speicher D.","54685142600;","Did JHotDraw Respect the Law of Good Style? A deep dive into the nature of false positives of bad code smells",2020,"Art, Science, and Engineering of Programming","4","3","14","","",,1,"10.22152/programming-journal.org/2020/4/14","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85118638738&doi=10.22152%2fprogramming-journal.org%2f2020%2f4%2f14&partnerID=40&md5=afb8867fbd775c3e981ec4517d9c8f7d","Bonn-Aachen International Center for Information Technology, University of Bonn, Germany","Speicher, D., Bonn-Aachen International Center for Information Technology, University of Bonn, Germany","Developers need to make a constant effort to improve the quality of their code if they want to stay productive. Tools that highlight code locations that could benefit from refactoring are thus highly desirable. The most common name for such locations is “bad code smell”. A number of tools offer such quality feedback and there is a substantial body of related research. However, all these tools, including those based on Machine Learning, still produce false positives. Every single false positive shown to the developer places a cognitive burden on her and should thus be avoided. The literature discusses the choice of metric thresholds, the general subjectivity of such a judgment and the relation to conscious design choices, “design ideas”. To examine false positives and the relation between bad smells and design ideas, we designed and conducted an exploratory case study. While previous research presented a broad overview, we have chosen a narrow setting to reach for even deeper insights: The framework JHotDraw had been designed so thoughtfully that most smell warnings are expected to be false positives. Nevertheless, the “Law of Good Style”, better known as the “Law of Demeter”, is a rather restrictive design rule so that we still expected to find some potential bad smells, i.e. violations of this “Law”. This combination led to 1215 potential smells of which at most 42 are true positives. We found generic as well as specific design ideas that were traded for the smell. Our confidence in that decision ranged from high enough to very high. We were surprised to realize that the smell definition itself required the formulation of constructive design ideas. Finally we found some smells to be the result of the limitation of the language and one could introduce auxiliary constructive design ideas to compensate for them. The decision whether a potential smell occurrence is actually a true positive was made very meticulously. For that purpose we took three qualities that the smell could affect negatively into account and we discussed the result of the recommended refactorings. If we were convinced that we had found a false positive, we described the relationships with design ideas. The realization that not only general design ideas but also specific design ideas have an influence on whether a potential smell is a true positive turns the problem of false positives from a scientific problem (“What is the true definition of the smell?”) to a engineering problem (“How can we incorporate design ideas into smell definitions?”). We recommend to add adaptation points to the smell definitions. Higher layers may then adapt the smell for specific contexts. After adaptation the tool may continuously provide distinct and precise quality feedback, reducing the cognitive load for the developer and preventing habituation. Furthermore, the schema for the discussion of potential smells may be used to elaborate more sets of true and false smell occurrences. Finally, it follows that smell detection based on machine learning should also take signs of design ideas into account. © Daniel Speicher.","Bad Code Smell; Code Quality; Design Ideas; False Positives",,,,,,,,,,,,,"Speicher, D.; Bonn-Aachen International Center for Information Technology, Germany; email: dsp@bit.uni-bonn.de",,"AOSA Inc.",24737321,,,,"English","Art Sci. Eng. Program.",Article,"Final","All Open Access, Green",Scopus,2-s2.0-85118638738
"Tummalapalli S., Kumar L., Bhanu Murthy N.L.","57190253628;56120791500;56464327000;","Detection of web service anti-patterns using machine learning framework",2020,"Intelligent Systems Reference Library","185",,,"189","210",,3,"10.1007/978-3-030-40928-9_10","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85117235687&doi=10.1007%2f978-3-030-40928-9_10&partnerID=40&md5=b14f8925348a6ee3eaffd826c33b5312","Department of Computer Science and Information Systems, Birla Institute of Science and Technology-Pilani, Hyderabad Campus, Jawahar Nagar, Telangana, Hyderabad, India","Tummalapalli, S., Department of Computer Science and Information Systems, Birla Institute of Science and Technology-Pilani, Hyderabad Campus, Jawahar Nagar, Telangana, Hyderabad, India; Kumar, L., Department of Computer Science and Information Systems, Birla Institute of Science and Technology-Pilani, Hyderabad Campus, Jawahar Nagar, Telangana, Hyderabad, India; Bhanu Murthy, N.L., Department of Computer Science and Information Systems, Birla Institute of Science and Technology-Pilani, Hyderabad Campus, Jawahar Nagar, Telangana, Hyderabad, India","Web services are being embraced by IT industry in the recent past to enable rapid development of distributed systems with optimal cost. Web services in SOA are self-adaptable to context, which makes SOA widely recognized in IT system as the technology, which has the potential of improving the receptiveness of both business and IT organizations. Web services help in building Service Based Systems (SBS) like Paytm, Amazon, Paypal, e-bay etc. which evolves frequently to fit the new user requirements which impacts the evolvability and quality of software design. Similar to software systems built using other paradigms, Service based systems also suffer from bad or poor design choices as in anti-pattern, code smells etc. Anti-patterns are explicit structures in the design that indicates violation of fundamental design principles and negatively impact the design quality. Anti-patterns have obstructive influence on the maintainability and perception of software systems. Thus there is a rising need for the early prediction of anti-patterns and refactoring them to improve the software quality in terms of execution cost, maintenance cost and memory consumption. In this work, a frame work is proposed for significant feature selection from source code metrics which includes Wilcoxon signed rank test, Univariate logistic regression analysis and Cross-correlation analysis. Then the different sets of features from various steps along with the original source code metrics are considered and are used for anti-pattern detection using 13 machine learning algorithms. Experimental results show the approximation capability of different classifiers and data balancing techniques with the features selected from the various steps of feature validation framework in addition to the original features for developing anti-pattern prediction model. The results also shows that the prediction model built with by the ensemble © Springer Nature Switzerland AG 2020.","Anti-pattern; Imbalanced data; Machine learning; Prediction; Service oriented architecture; Software engineering; Source code metric; Web service",,,,,,,,,,,,,"Tummalapalli, S.; Department of Computer Science and Information Systems, Hyderabad Campus, Jawahar Nagar, Telangana, India; email: p20170433@hyderabad.bits-pilani.ac.in",,"Springer Science and Business Media Deutschland GmbH",18684394,,,,"English","Intell. Syst. Ref. Libr.",Book Chapter,"Final","",Scopus,2-s2.0-85117235687
"Cherry B., Devroey X., Derakhshanfar P., Vanderose B.","57226387931;55445261100;57203840436;37105035900;","Crash reproduction difficulty, an initial assessment",2020,"CEUR Workshop Proceedings","2912",,,"","",,,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-85111373191&partnerID=40&md5=38be60097893cd4fe4676855d103badf","PReCISE, NaDI, Faculty of Computer Science, University of Namur, Namur, Belgium; Delft University of Technology, Delft, Netherlands","Cherry, B., PReCISE, NaDI, Faculty of Computer Science, University of Namur, Namur, Belgium; Devroey, X., Delft University of Technology, Delft, Netherlands; Derakhshanfar, P., Delft University of Technology, Delft, Netherlands; Vanderose, B., PReCISE, NaDI, Faculty of Computer Science, University of Namur, Namur, Belgium","This study presents the initial step towards a thorough analysis of the difficulty to reproduce a crash using searchbased crash reproduction. Traditionally, code size and complexity are considered representative indicators of the difficulty for search-based approaches, like search-based unit test generation, to generate tests. However, unlike unit test generation, crash reproduction does not seek to cover a set of behaviors but instead to generate one or more tests exercising a specific behavior reproducing a given crash. In this context, there is no guarantee that the indicators used for unit testing are still valid for crash reproduction. In this study, we seek to identify such indicators by considering various code metrics, code smells, and change metrics. We report our effort to collect those metrics for JCRASHPACK, a state-of-the-art crash reproduction benchmark, and an initial assessment by considering metrics individually. Our results show that although JCRASHPACK is larger than benchmarks used in previous studies, additional crashes should be added to improve its diversity and representativeness, and that no individual metric can be used to characterize the difficulty to reproduce a crash. Copyright 2020 for this paper by its authors.","Change metrics; Code quality; Search-based crash reproduction; Software measurement","Cell proliferation; Code metrics; Code size; Code smell; Initial assessment; Search-based; State of the art; Unit test generations; Unit testing; Crashworthiness","731529","Copyright 2020 for this paper by its authors. Use permitted under Creative Commons License Attribution 4.0 International (CC BY 4.0). This research was partially funded by the EU Horizon 2020 ICT-10-2016-RIA “STAMP” project (No.731529).",,,,,,,,,,"Cherry, B.; PReCISE, Belgium; email: boris.cherry@unamur.be
Vanderose, B.; PReCISE, Belgium; email: benoit.vanderose@unamur.be","Papadakis M.Cordy M.","CEUR-WS",16130073,,,,"English","CEUR Workshop Proc.",Conference Paper,"Final","",Scopus,2-s2.0-85111373191
[No author name available],[No author id available],"QuASoQ 2020 - Proceedings of the 8th International Workshop on Quantitative Approaches to Software Quality, co-located with 27th Asia-Pacific Software Engineering Conference, APSEC2020",2020,"CEUR Workshop Proceedings","2767",,,"","",86,,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-85097900807&partnerID=40&md5=2d8e8721371d69692837c049871c369d",,"","The proceedings contain 10 papers. The topics discussed include: augmenting window contents with transfer learning for effort estimation; report on the 8th International Workshop on Quantitative Approaches to Software Quality; on the evolutionary properties of fix inducing changes; using rule mining for automatic test oracle generation; an industrial case study on fault detection effectiveness of combinatorial robustness testing; an evaluation of machine learning methods for predicting flaky tests; towards the identification of process anti-patterns in enterprise architecture models; evaluating the impact of inter process communication in microservice architectures; understanding the involvement of developers in missing link community smell: an exploratory study on apache projects; detection and correction of android-specific code smells and energy bugs: an android lint extension; and comparison of code smells in iOS and android applications.",,,,,,,,,,,,,,,"Lichter H.Aydin S.Sunetnanta T.Anwar T.","CEUR-WS",16130073,,,,"English","CEUR Workshop Proc.",Conference Review,"Final","",Scopus,2-s2.0-85097900807
"Panigrahi R., Kumar L., Kuanar S.K.","56417995400;56120791500;55608980700;","An Empirical Study to Investigate Different SMOTE Data Sampling Techniques for Improving Software Refactoring Prediction",2020,"Communications in Computer and Information Science","1332",,,"23","31",,2,"10.1007/978-3-030-63820-7_3","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85097287983&doi=10.1007%2f978-3-030-63820-7_3&partnerID=40&md5=5da2efc9e92c497d6fff0a5c0f8a981b","GIET University, Gunupur, Odisha, India; BITS Pilani Hyderabad, Hyderabad, India","Panigrahi, R., GIET University, Gunupur, Odisha, India; Kumar, L., BITS Pilani Hyderabad, Hyderabad, India; Kuanar, S.K., GIET University, Gunupur, Odisha, India","The exponential rise in software systems and allied applications has alarmed industries and professionals to ensure high quality with optimal reliability, maintainability etc. On contrary software companies focus on developing software solutions at the reduced cost corresponding to the customer demands. Thus, maintaining optimal software quality at reduced cost has always been the challenge for developers. On the other hand, inappropriate code design often leads aging, smells or bugs which can harm eventual intend of the software systems. However, identifying a smell signifier or structural attribute characterizing refactoring probability in software has been the challenge. To alleviate such problems, in this research code-metrics structural feature identification and Neural Network based refactoring prediction model is developed. Our proposed refactoring prediction system at first extracts a set of software code metrics from object-oriented software systems, which are then processed for feature selection method to choose an appropriate sample set of features using Wilcoxon rank test. Once obtaining the optimal set of code-metrics, a novel ANN classifier using 5 different hidden layers is implemented on 5 open source java projects with 3 data sampling techniques SMOTE, BLSMOTE, SVSMOTE to handle class imbalance problem. The performance of our proposed model achieves optimal classification accuracy, F-measure and then it has been shown through AUC graph as well as box-plot diagram. © 2020, Springer Nature Switzerland AG.","Artificial Neural Network; Code smell; Software refactoring prediction","Application programs; Codes (symbols); Computer software selection and evaluation; Cost reduction; Forecasting; Open source software; Open systems; Optimal systems; Predictive analytics; Program debugging; Software quality; Software reliability; Software testing; Class imbalance problems; Feature selection methods; Object-oriented software systems; Optimal classification; Optimal reliability; Software refactoring; Structural feature; Wilcoxon rank tests; Object oriented programming",,,,,,,,,,,,"Panigrahi, R.; GIET University, Gunupur, India; email: rasmita@giet.edu","Yang H.Pasupa K.Leung A.C.Kwok J.T.Chan J.H.King I.","Springer Science and Business Media Deutschland GmbH",18650929,9783030638191,,,"English","Commun. Comput. Info. Sci.",Conference Paper,"Final","",Scopus,2-s2.0-85097287983
"Tummalapalli S., kumar L., Murthy N.L.B., Krishna A.","57190253628;56120791500;57197306945;57209052897;","Detection of Web Service Anti-patterns Using Neural Networks with Multiple Layers",2020,"Communications in Computer and Information Science","1333",,,"571","579",,,"10.1007/978-3-030-63823-8_65","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85097081450&doi=10.1007%2f978-3-030-63823-8_65&partnerID=40&md5=094ebb91640f8a98c646b10fbf31be79","BITS Pilani Hyderabad, Hyderabad, India; Curtin University, Perth, Australia","Tummalapalli, S., BITS Pilani Hyderabad, Hyderabad, India; kumar, L., Curtin University, Perth, Australia; Murthy, N.L.B., BITS Pilani Hyderabad, Hyderabad, India; Krishna, A., Curtin University, Perth, Australia","Anti-patterns in service-oriented architecture are solutions to common issues where the solution is ineffective and may end up in undesired consequences. It is a standard exercise that initially seems like the best solution; however, it finally ends up having bad results that outweigh any benefits. Research revealed that the presence of anti-patterns leads to the demeaning of the quality and design of the software systems, which makes the process of detecting anti-patterns in web services very crucial. In this work, we empirically investigate the effectiveness of three feature sampling techniques, five data sampling techniques, and six classification algorithms in the detection of web service anti-patterns. Experiment results revealed that the model developed by considering metrics selected by Principal Component Analysis (PCA) as the input obtained better performance compared to the model developed by other metrics. Experimental results also showed that the neural network model developed with two hidden layers has outperformed all the other models developed with varying number of hidden layers. © 2020, Springer Nature Switzerland AG.","Anti-patterns; Machine learning; SOA; Web services","Information services; Network layers; Service oriented architecture (SOA); Web services; Websites; Anti-patterns; Classification algorithm; Data sampling; Hidden layers; Multiple layers; Neural network model; Sampling technique; Software systems; Multilayer neural networks",,,,,,,,,,,,"kumar, L.; Curtin UniversityAustralia; email: lovkumar@hyderabad.bitspilani.ac.in","Yang H.Pasupa K.Leung A.C.Kwok J.T.Chan J.H.King I.","Springer Science and Business Media Deutschland GmbH",18650929,9783030638221,,,"English","Commun. Comput. Info. Sci.",Conference Paper,"Final","",Scopus,2-s2.0-85097081450
"Saidani I., Ouni A., Mkaouer M.W.","57212273039;50761492200;55904259300;","Web Service API Anti-patterns Detection as a Multi-label Learning Problem",2020,"Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)","12406 LNCS",,,"114","132",,3,"10.1007/978-3-030-59618-7_8","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85092163127&doi=10.1007%2f978-3-030-59618-7_8&partnerID=40&md5=aad9a04f8be5e0bfb3216421c8a533b5","Ecode de technologie superieure, University of Quebec, Montreal, QC, Canada; Rechester Institute of Technology, Rochester, NY, United States","Saidani, I., Ecode de technologie superieure, University of Quebec, Montreal, QC, Canada; Ouni, A., Ecode de technologie superieure, University of Quebec, Montreal, QC, Canada; Mkaouer, M.W., Rechester Institute of Technology, Rochester, NY, United States","Anti-patterns are symptoms of poor design and implementation solutions applied by developers during the development of their software systems. Recent studies have identified a variety of Web service anti-patterns and defined them as sub-optimal solutions that result from bad design choices, time pressure, or lack of developers experience. The existence of anti-patterns often leads to software systems that are hard to understand, reuse, and discover in practice. Indeed, it has been shown that service designers and developers tend to pay little attention to their service interfaces design. Web service antipatterns detection is a non-trivial and error-prone task as different anti-pattern types typically have interleaving symptoms that can be subjectively interpreted and hence detected in different ways. In this paper, we introduce an automated approach that learns from a set of interleaving Web service design symptoms that characterize the existence of anti-pattern instances in a service-based system. We build a multi-label learning model to detect 8 common types of Web service anti-patterns. We use the ensemble classifier chain (ECC) model that transforms multi-label problems into several single-label problems which are solved using genetic programming (GP) to find the optimal detection rules for each anti-pattern type. To evaluate the performance of our approach, we conducted an empirical study on a benchmark of 815 Web services. The statistical tests of our results show that our approach can detect the eight Web service antipattern types with an average F-measure of 93% achieving a better performance compared to different state-of-the-art techniques. Furthermore, we found that the most influential factors that best characterize Web service anti-patterns include the number of declared operations, the number of port types, and the number of simple and complex types in service interfaces. © 2020, Springer Nature Switzerland AG.","Ensemble classifier chain; Genetic programming; Service anti-patterns; Service interface; Web service design","Benchmarking; Computer software reusability; Genetic algorithms; Genetic programming; Learning systems; Pattern recognition; Websites; Antipatterns detections; Design and implementations; Ensemble classifiers; Multi-label learning; Multi-label problems; Service-based systems; State-of-the-art techniques; Suboptimal solution; Web services",,,,,,,,,,,,"Ouni, A.; Ecode de technologie superieure, Canada; email: ali.ouni@etsmtl.ca","Ku W.-S.Kanemasa Y.Serhani M.A.Zhang L.-J.","Springer Science and Business Media Deutschland GmbH",03029743,9783030596170,,,"English","Lect. Notes Comput. Sci.",Conference Paper,"Final","",Scopus,2-s2.0-85092163127
[No author name available],[No author id available],"ICEIS 2020 - Proceedings of the 22nd International Conference on Enterprise Information Systems",2020,"ICEIS 2020 - Proceedings of the 22nd International Conference on Enterprise Information Systems","2",,,"","",1677,,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-85091408531&partnerID=40&md5=8e9772e233ff589ab3d39d8f07d7298c",,"","The proceedings contain 176 papers. The topics discussed include: anonymization and compliance to protection data: impacts and challenges into big data; situation-aware building information models for next generation building management systems; objective measures ensemble in associative classifiers; efficient representation of very large linked datasets as graphs; an FCA-based approach to direct edges in a causal bayesian network: a pilot study using a surgery data set; mixing heterogeneous authentication and authorization infrastructures through proxies; empirical study about class change proneness prediction using software metrics and code smells; impact of developers sentiments on practices and artifacts in open source software projects: a systematic literature review; how to better form software development teams? an analysis of different formation criteria; and integrating model-driven development practices into agile process: analyzing and evaluating software evolution aspects.",,,,,,,,,,,,,,,"Filipe J.Smialek M.Brodsky A.Hammoudi S.","SciTePress",,9789897584237,,,"English","ICEIS - Proc. Int. Conf. Enterp. Inf. Syst.",Conference Review,"Final","",Scopus,2-s2.0-85091408531
"Dantas C.E.C., Maia M.D.A.","57218767617;25926542500;","On the actual use of inheritance and interface in Java projects: Evolution and implications",2020,"Proceedings of the 27th Annual International Conference on Computer Science and Software Engineering, CASCON 2017",,,,"151","160",,,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-85091340980&partnerID=40&md5=506c6a9e3b4c2d5937b955a9a5689100","Faculty of Computing, Federal University of Uberlândia, Uberlândia - MG, Brazil","Dantas, C.E.C., Faculty of Computing, Federal University of Uberlândia, Uberlândia - MG, Brazil; Maia, M.D.A., Faculty of Computing, Federal University of Uberlândia, Uberlândia - MG, Brazil","Background: Inheritance is one of the main features in the object-oriented paradigm (OOP). Nonetheless, previous work recommend carefully using it, suggesting alternatives such as the adoption of composition with implementation of interfaces. Despite of being a well-studied theme, there is still little knowledge if such recommendations have been widely adopted by developers in general. Aims: This work aims at evaluating how the inheritance and composition with interfaces have been used in Java, comparing new projects with older ones (transversal), and also the different releases of the same projects (longitudinal). Method: A total of 1,656 open-source projects built between 1997 and 2013, hosted in the repositories GitHub and SourceForge, were analyzed. The likelihood of more recent projects using inheritance and interfaces differently from older ones was analyzed considering indicators, such as, the prevalence of corrective changes, instanceof operations, and code smells. Regression analysis, chi-squared test of proportions and descriptive statistics were used to analyze the data. In addition, a thematic analysis based method was used to verify how often and why inheritance and interface are added or removed from classes. Results: We observed that developers still use inheritance primarily for code reuse, motivated by the need to avoid duplicity of source code. In newer projects, classes in inheritance had fewer corrective changes and subclasses had fewer use of the instanceof operator. However, as they evolve, classes in inheritance tend to become complex as changes occur. Classes implementing interfaces have shown little relation to the interfaces, and there is indication that interfaces are still underutilized. Conclusion: These results show there is still some lack of knowledge about the use of recommended object-oriented practices, suggesting the need of training developers on how to design better classes. © 2017 Copyright held by the owner/author(s).","Code Smells; Cohesion; GitHub; Inheritance; Interfaces; SourceForge","Codes (symbols); Object oriented programming; Open source software; Regression analysis; Chi-Squared test; Descriptive statistics; New projects; Object oriented; Object-oriented paradigm; Open source projects; Source codes; Thematic analysis; Java programming language","Coordenação de Aperfeiçoamento de Pessoal de Nível Superior, CAPES; Conselho Nacional de Desenvolvimento Científico e Tecnológico, CNPq; Fundação de Amparo à Pesquisa do Estado de Minas Gerais, FAPEMIG","We would like to thank the Brazilian agencies FAPEMIG, CAPES and CNPq for partially funding this research.",,,,,,,,,,,"Featherstone J.Lyons K.Wigglesworth J.Saraf D.","IBM / ACM",,,,,"English","Proc. Annu. Int. Conf. Comput. Sci. Softw. Eng., CASCON",Conference Paper,"Final","",Scopus,2-s2.0-85091340980
"Martins A.D.F., Melo C., Monteiro J.M., de Castro Machado J.","57211031611;57201620047;22734937400;7102792622;","Empirical study about class change proneness prediction using software metrics and code smells",2020,"ICEIS 2020 - Proceedings of the 22nd International Conference on Enterprise Information Systems","1",,,"140","147",,1,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-85090784156&partnerID=40&md5=3cb4db02dcece0d572e34c85263ebe7d","Federal University of Ceara, Fortaleza, Ceara, Brazil","Martins, A.D.F., Federal University of Ceara, Fortaleza, Ceara, Brazil; Melo, C., Federal University of Ceara, Fortaleza, Ceara, Brazil; Monteiro, J.M., Federal University of Ceara, Fortaleza, Ceara, Brazil; de Castro Machado, J., Federal University of Ceara, Fortaleza, Ceara, Brazil","During the lifecycle of software, maintenance has been considered one of the most complex and costly phases in terms of resources and costs. In addition, software evolves in response to the needs and demands of the ever-changing world and thus becomes increasingly complex. In this scenario, an approach that has been widely used to rationalize resources and costs during the evolution of object-oriented software is to predict change-prone classes. A change-prone class may indicate a part of poor quality of software that needs to be refactored. Recently, some strategies for predicting change-prone classes, which are based on the use of software metrics and code smells, have been proposed. In this paper, we present an empirical study on the performance of 8 machine learning techniques used to predict classes prone to change. Three different training scenarios were investigated: object-oriented metrics, code smells, and object-oriented metrics and code smells combined. To perform the experiments, we built a data set containing eight object-oriented metrics and 32 types of code smells, which were extracted from the source code of a web application that was developed between 2013 and 2018 over eight releases. The machine learning algorithms that presented the best results were: RF, LGBM, and LR. The training scenario that presented the best results was the combination of code smells and object-oriented metrics. Copyright © 2020 by SCITEPRESS - Science and Technology Publications, Lda. All rights reserved.","Change-proneness Prediction; Machine Learning; Software Quality","Codes (symbols); Forecasting; Information systems; Information use; Learning algorithms; Life cycle; Machine learning; Odors; Change proneness; Empirical studies; Machine learning techniques; Object oriented metrics; Object oriented software; Quality of softwares; Software metrics; Training scenario; Object oriented programming","Université de Franche-Comté, UFC","This research was funded by LSBD/UFC.",,,,,,,,,,,"Filipe J.Smialek M.Brodsky A.Hammoudi S.","SciTePress",,9789897584237,,,"English","ICEIS - Proc. Int. Conf. Enterp. Inf. Syst.",Conference Paper,"Final","",Scopus,2-s2.0-85090784156
[No author name available],[No author id available],"ICEIS 2020 - Proceedings of the 22nd International Conference on Enterprise Information Systems",2020,"ICEIS 2020 - Proceedings of the 22nd International Conference on Enterprise Information Systems","1",,,"","",820,,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-85090759165&partnerID=40&md5=03600cc94899a120ed8113b01a1dfee3",,"","The proceedings contain 176 papers. The topics discussed include: anonymization and compliance to protection data: impacts and challenges into big data; situation-aware building information models for next generation building management systems; objective measures ensemble in associative classifiers; efficient representation of very large linked datasets as graphs; an FCA-based approach to direct edges in a causal bayesian network: a pilot study using a surgery data set; mixing heterogeneous authentication and authorization infrastructures through proxies; empirical study about class change proneness prediction using software metrics and code smells; impact of developers sentiments on practices and artifacts in open source software projects: a systematic literature review; how to better form software development teams? an analysis of different formation criteria; and integrating model-driven development practices into agile process: analyzing and evaluating software evolution aspects.",,,,,,,,,,,,,,,"Filipe J.Smialek M.Brodsky A.Hammoudi S.","SciTePress",,9789897584237,,,"English","ICEIS - Proc. Int. Conf. Enterp. Inf. Syst.",Conference Review,"Final","",Scopus,2-s2.0-85090759165
"Saluja S., Batra U.","56973816900;24503967200;","Classification and analysis of static metric based antipattern detection in service computing",2020,"Recent Advances in Computer Science and Communications","13","4",,"747","757",,,"10.2174/2213275912666190809105751","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85089660392&doi=10.2174%2f2213275912666190809105751&partnerID=40&md5=c86ff11aff9c53adaf6df21a514f2ebe","G D Goenka University Gurgaon, Sohna, Haryana  122103, India","Saluja, S., G D Goenka University Gurgaon, Sohna, Haryana  122103, India; Batra, U., G D Goenka University Gurgaon, Sohna, Haryana  122103, India","Background: Design Pattern is regarded as an essential component for enhancement of system design which can further improve the reusability and maintainability whereas antipattern degrades the quality of the program. Antipatterns are sub-optimal implementation choices which initially appears to be a good concept but later on leads to low code maintainability and higher maintenance costs. Objective: The identification of antipatterns which lead to performance degradation plays an important role in the reduction of expensive work and cost involved in maintenance, redesign, reim-plementation, and redeployment. The main motivation is to refactor the source code in order to reduce maintenance efforts. Antipatterns impact reliability, testability and maintainability, but they still lack clear identification because of different interpretations and definition of each antipattern. There is a need for a benchmark to analyze the result generated by antipatterns. Methods: Static and dynamic analysis individually do not suffice for antipattern.A hybrid approach is proposed by combining rule based static analysis with dynamic run time analysis. Before applying the hybrid approach a simple manual validation was done to exclude the type of input which had the least probability of containing antipattern. The approach aims at optimizing the results by inclusion of response time metric measure which can be evaluated at runtime execution of the web service. Results and Conclusion: The paper focusses on detection of antipatterns from web services based on code level and interface level static metrics.Only a brief overview of dynamic approach for detection is proposed. The future scope of this paper will focus on detection of antipattern based on more number of dynamic metrics and also a comparative analysis of the results generated from static, dynamic and hybrid approach. © 2020 Bentham Science Publishers.","Antipatterns; Dynamic analysis; Hybrid approach; Performance; Service computing; Software quality","Computer software reusability; Costs; Optimal systems; Reusability; Static analysis; Web services; Websites; Comparative analysis; Dynamic approaches; Maintenance efforts; Performance degradation; Run-time analysis; Run-time execution; Service computing; Static and dynamic analysis; Maintainability",,,,,,,,,,,,"Saluja, S.; G D Goenka University GurgaonIndia; email: shivanisaluja3@gmail.com",,"Bentham Science Publishers",26662558,,,,"English","Recent Advances in Computer Science and Communications",Article,"Final","",Scopus,2-s2.0-85089660392
"Namrud Z., Kpodjedo S., Talhi C.","57217584064;25926481300;9275987500;","AndroVul: A repository for android security vulnerabilities",2020,"CASCON 2019 Proceedings - Conference of the Centre for Advanced Studies on Collaborative Research - Proceedings of the 29th Annual International Conference on Computer Science and Software Engineering",,,,"64","71",,5,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-85087400125&partnerID=40&md5=7f31ae39214fa1d28c68a36c827bd3ad","ETS Montreal, Montreal, QC, Canada","Namrud, Z., ETS Montreal, Montreal, QC, Canada; Kpodjedo, S., ETS Montreal, Montreal, QC, Canada; Talhi, C., ETS Montreal, Montreal, QC, Canada","Security issues in mobile apps are increasingly relevant as these software have become part of the daily life for billions. As the dominant OS, Android is a primary target for ill-intentioned programmers willing to exploit vulnerabilities and spread malwares. Significant research has been devoted to the identification of these malwares. The current paper aims to contribute to that research effort, with a focus on providing an additional benchmark of Android vulnerabilities to be used in the detection of malwares. Our proposal is AndroVul, a repository for Android security vulnerabilities, including dangerous permissions, security code smells and dangerous shell commands. Our work builds on AndroZoo, a well known Android app dataset, and proposes data on vulnerabilities for a representative sample of about 16,000 Android apps. Moreover, we briefly describe and make available the scripts we wrote to automate the extraction of security vulnerabilities, given a list of apps; this allows any researcher to readily recreate a custom repository build from his or her apps of interest. Finally, we propose preliminary findings on the effectiveness of the vulnerability metrics present in our dataset, with respect to the detection of malicious apps. Our results show that the collected metrics, as input to even basic classifiers, are enough to achieve competitive results with respect to some recent malware detection works. Overall, Androvul, with its scripts and datasets, is intended as a starting package for mobile security researchers interested in jump-starting their investigations. © 2019 Copyright held by the owner/author(s).","Mobile computing; Mobile security; Reverse engineering; Static analysis","Android (operating system); Malware; Android securities; Malware detection; Representative sample; Research efforts; Security codes; Security issues; Security vulnerabilities; Vulnerability metrics; Mobile security",,,,,,,,,,,,,"Pakfetrat T.Jourdan G.-V.Kontogiannis K.Enenkel R.","Center for Advanced Studies on Collaborative Research",,,,,"English","CASCON Proc. - Conf. Cent. Adv. Stud. Collab. Res. - Proc. Annu. Int. Conf. Comput. Sci. Softw. Eng.",Conference Paper,"Final","",Scopus,2-s2.0-85087400125
"Gupta A., Suri B., Bhat V.","57195277608;55515690800;57217088657;","Android Smells Detection Using ML Algorithms with Static Code Metrics",2020,"Communications in Computer and Information Science","1229 CCIS",,,"64","79",,2,"10.1007/978-981-15-5827-6_6","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85086145221&doi=10.1007%2f978-981-15-5827-6_6&partnerID=40&md5=fa314c2777096ade36f95c5553f4d8c3","ASET, GGS Indraprastha University, New Delhi, India; University School of ICT, GGS Indraprastha University, New Delhi, India","Gupta, A., ASET, GGS Indraprastha University, New Delhi, India; Suri, B., University School of ICT, GGS Indraprastha University, New Delhi, India; Bhat, V., ASET, GGS Indraprastha University, New Delhi, India","Mobile applications development rate is predominantly increasing in comparison with the regular applications. These mobile applications prove to be change frequently according to the user requirements. Moreover, these changes in the code base may introduce some bad design practices that are called as bad smells, which can lead to a higher maintenance cost and degrade quality of the software. A very less attention has been given in the detection of code smells in the mobile applications that are also called as android smells. This research contains the rules in combination of software metrics and their threshold values to detect the bad smells in the android applications. The proposed rules are computed using three different machine learning algorithms. This framework has been applied to 2896 instances of the android applications which are open-sourced on GitHub. The android code smells MIM, LIC, DTWC and SL have been considered for the generation of detection rules and are validated using 10-fold cross validation method. The machine learning algorithm JRip furnished the best result for the android smells up to 90% overall precision, which is quite sufficient to justify the results. © Springer Nature Singapore Pte Ltd. 2020.",,"Android (operating system); Application programs; Codes (symbols); Machine learning; Mobile computing; Odors; 10-fold cross-validation; Android applications; Maintenance cost; Mobile applications; Mobile applications development; Software metrics; Static code metrics; User requirements; Learning algorithms",,,,,,,,,,,,"Gupta, A.; ASET, India; email: aakankshi@gmail.com","Batra U.Roy N.R.Panda B.","Springer",18650929,9789811558269,,,"English","Commun. Comput. Info. Sci.",Conference Paper,"Final","",Scopus,2-s2.0-85086145221
"Mohsen R.K., Abbas A.S.","57216930493;57192159070;","A model for diagnosing the largest number of android application problems, based on reviews in download stores by use of the decision tree",2020,"Journal of Advanced Research in Dynamical and Control Systems","12","4",,"237","246",,,"10.5373/JARDCS/V12I4/20201438","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85085338430&doi=10.5373%2fJARDCS%2fV12I4%2f20201438&partnerID=40&md5=87acb633461fe8e8e0b7ef6c9b9e664a","Software Department, College of Information Technology, University of Babylon, Iraq","Mohsen, R.K., Software Department, College of Information Technology, University of Babylon, Iraq; Abbas, A.S., Software Department, College of Information Technology, University of Babylon, Iraq","Mobile applications play a pivotal role in the daily life of the user, where millions of customers rely on smartphone applications for the purpose of social networking, banking, news and many other uses, with the ability to use it anytime and anywhere and in most conditions. So that software engineers‟ race to Create and provide the applications to customer service. However, despite good planning processes for software engineers in designing and building applications, the product may be accompanied by some errors that may lead to a malfunction in the application or one of its functions, which requires performing maintenance for it, and often that difficult and costly, in addition to the possibility of repeating the process whenever new problems in the application are discovered. It is therefore essential to look for ways to diagnose application performance issues and detect as many errors in Android apps as possible to avoid repetitive maintenance, and focus on tools that help build good apps with minimal ""Effort"", ""Time"" and ""Cost”. This paper contributes to the detection of errors and performance problems in Android applications and the diagnosis of problems by used the user‟s feedback within download platforms. © 2020, Institute of Advanced Scientific Research, Inc.. All rights reserved.","Android; Code Smells; Feedback; Machine Learning; Mobile Applications; Software Engineering",,,,,,,,,,,,,,,"Institute of Advanced Scientific Research, Inc.",1943023X,,,,"English","J. Adv. Res. Dyn. Control. Syst.",Article,"Final","",Scopus,2-s2.0-85085338430
"Piotrowski P., Madeyski L.","57512511400;14045220900;","Software defect prediction using bad code smells: A systematic literature review",2020,"Lecture Notes on Data Engineering and Communications Technologies","40",,,"77","99",,6,"10.1007/978-3-030-34706-2_5","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85083433363&doi=10.1007%2f978-3-030-34706-2_5&partnerID=40&md5=6b701d5f3a3678ba7e1b1751e7e676fc","Faculty of Computer Science and Management, Wroclaw University of Science and Technology, Wroclaw, Poland","Piotrowski, P., Faculty of Computer Science and Management, Wroclaw University of Science and Technology, Wroclaw, Poland; Madeyski, L., Faculty of Computer Science and Management, Wroclaw University of Science and Technology, Wroclaw, Poland","The challenge of effective refactoring in the software development cycle brought forward the need to develop automated defect prediction models. Among many existing indicators of bad code, code smells have attracted particular interest of both the research community and practitioners in recent years. In this paper, we describe the current state-of-the-art in the field of bug prediction with the use of code smells and attempt to identify areas requiring further research. To achieve this goal, we conducted a systematic literature review of 27 research papers published between 2006 and 2019. For each paper, we (i) analysed the reported relationship between smelliness and bugginess, as well as (ii) evaluated the performance of code smell data used as a defect predictor in models developed using machine learning techniques. Our investigation confirms that code smells are both positively correlated with software defects and can positively influence the performance of fault detection models. However, not all types of smells and smell-related metrics are equally useful. God Class, God Method, Message Chains smells and Smell intensity metric stand out as particularly effective. Smells such as Inappropriate Intimacy, Variable Re-assign, Clones, Middle Man or Speculative Generality require further research to confirm their contribution. Metrics describing the introduction and evolution of anti-patterns in code present a promising opportunity for experimentation. © Springer Nature Switzerland AG 2020.",,"Codes (symbols); Defects; Fault detection; Forecasting; Odors; Predictive analytics; Software design; Defect prediction models; Machine learning techniques; Research communities; Software defect prediction; Software defects; Software development cycles; State of the art; Systematic literature review; Learning systems",,,,,,,,,,,,"Madeyski, L.; Faculty of Computer Science and Management, Poland; email: lech.madeyski@pwr.edu.pl",,"Springer Science and Business Media Deutschland GmbH",23674512,,,,"English","Lecture. Notes. Data Eng. Commun. Tech.",Book Chapter,"Final","",Scopus,2-s2.0-85083433363
"Grodzicka H., Ziobrowski A., Łakomiak Z., Kawa M., Madeyski L.","57216418094;57216409780;57216413394;24177052800;14045220900;","Code smell prediction employing machine learning meets emerging java language constructs",2020,"Lecture Notes on Data Engineering and Communications Technologies","40",,,"137","167",,4,"10.1007/978-3-030-34706-2_8","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85083421464&doi=10.1007%2f978-3-030-34706-2_8&partnerID=40&md5=afbebb1d63064a2e79adf534f960eaa3","Faculty of Computer Science and Management, Wroclaw University of Science and Technology, Wroclaw, Poland","Grodzicka, H., Faculty of Computer Science and Management, Wroclaw University of Science and Technology, Wroclaw, Poland; Ziobrowski, A., Faculty of Computer Science and Management, Wroclaw University of Science and Technology, Wroclaw, Poland; Łakomiak, Z., Faculty of Computer Science and Management, Wroclaw University of Science and Technology, Wroclaw, Poland; Kawa, M., Faculty of Computer Science and Management, Wroclaw University of Science and Technology, Wroclaw, Poland; Madeyski, L., Faculty of Computer Science and Management, Wroclaw University of Science and Technology, Wroclaw, Poland","Background: Defining code smell is not a trivial task. Their recognition tends to be highly subjective. Nevertheless some code smells detection tools have been proposed. Other recent approaches incline towards machine learning (ML) techniques to overcome disadvantages of using automatic detection tools. Objectives: We aim to develop a research infrastructure and reproduce the process of code smell prediction proposed by Arcelli Fontana et al. We investigate ML algorithms performance for samples including major modern Java language features. Those such as lambdas can shorten the code causing code smell presence not as obvious to detect and thus pose a challenge to both existing code smell detection tools and ML algorithms. Method: We extend the study with dataset consisting of 281 Java projects. For driving samples selection we define metrics considering lambdas and method reference, derived using custom JavaParser-based solution. Tagged samples with new constructions are used as an input for the utilized detection techniques. Results: Detection rules derived from the best performing algorithms like J48 and JRip incorporate newly introduced metrics. Conclusions: Presence of certain new Java language constructs may hide Long Method code smell or indicate a God Class. On the other hand, their absence or low number can suggest a Data Class. © Springer Nature Switzerland AG 2020.","Code smells detection; Machine learning; Replication study","Codes (symbols); Inspection equipment; Machine learning; Predictive analytics; Automatic Detection; Detection rules; Detection tools; Java language; Ml algorithms; New constructions; Research infrastructure; Samples selection; Java programming language","Narodowe Centrum Badań i Rozwoju, NCBR","Acknowledgements This work has been conducted as a part of research and development project POIR.01.01.01-00-0792/16 supported by the National Centre for Research and Development (NCBiR). We would like to thank Tomasz Lewowski, Tomasz Korzeniowski, Marek Skrajnowski and the entire team from code quest sp. z o.o. for tagging code smells and for all of the comments and feedback from the real-world software engineering environment.",,,,,,,,,,"Madeyski, L.; Faculty of Computer Science and Management, Poland; email: lech.madeyski@pwr.edu.pl",,"Springer Science and Business Media Deutschland GmbH",23674512,,,,"English","Lecture. Notes. Data Eng. Commun. Tech.",Book Chapter,"Final","",Scopus,2-s2.0-85083421464
"Tanwar N., Singh A., Singh R.","57221949102;57192272026;57215037820;","A Support Vector Machine Based Approach for Effective Fault Localization",2020,"Advances in Intelligent Systems and Computing","1053",,,"825","835",,1,"10.1007/978-981-15-0751-9_75","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85081370147&doi=10.1007%2f978-981-15-0751-9_75&partnerID=40&md5=5d5cd4acfe9f821f53665593124f19bf","YMCAUST, Faridabad, Haryana, India; CSE Department, DCRUST, Murthal, Sonipat, 131039, India","Tanwar, N., YMCAUST, Faridabad, Haryana, India; Singh, A., CSE Department, DCRUST, Murthal, Sonipat, 131039, India; Singh, R., CSE Department, DCRUST, Murthal, Sonipat, 131039, India","Software maintenance is one of the most costly activities in software life cycle. It costs almost 70% of the total cost of the software. Testing aims to reveal the faults from the software under test (SUT). The fault localization is tiresome, dull, costly but crucial for program debugging. As size and complexity of software increase, manual locating faults becomes very tedious and hence necessitates automatic fault localization. If the fault proneness of the software components can be predicted, then such components may be given more focus. Such approach would not only save time but also enhance the quality of the software. Support vector machine (SVM) is a prominent machine learning algorithm. Regularization of parameters, convex optimization and kernel tricks are the prevailing features of SVM. This work reports a SVM-based framework for fault localization on the basis of code smells. Paper presents a performance analysis against four popular algorithms, namely ZeroR, OneR, Naive Bayes and Decision Stump. The proposed model is empirically evaluated in the reference of Json project. The results of the experimentation show that the proposed model can effectively classify the instances in the classes of their respective categories of code smells. Also, the kernel used in the proposed model gives better performance than counterpart kernels and the proposed model itself performs better than the other compared algorithms in terms of accuracy, precision, recall and F-measure. © 2020, Springer Nature Singapore Pte Ltd.","Fault localization; Software; Support vector machine","Computer software; Convex optimization; Learning algorithms; Learning systems; Life cycle; Odors; Soft computing; Software quality; Software testing; Support vector machines; Automatic fault localizations; Decision stumps; Fault localization; Fault proneness; Kernel trick; Performance analysis; Software component; Software life cycles; Program debugging",,,,,,,,,,,,"Singh, A.; CSE Department, India; email: ajmer.saini@gmail.com","Pant M.Sharma T.K.Verma O.P.Singla R.Sikander A.","Springer",21945357,9789811507502,,,"English","Adv. Intell. Sys. Comput.",Conference Paper,"Final","",Scopus,2-s2.0-85081370147
"Yin Y., Su Q., Liu L.","35195149400;57211423776;57199083818;","Software smell detection based on machine learning and its empirical study",2020,"Proceedings of SPIE - The International Society for Optical Engineering","11427",,"114270P","","",,2,"10.1117/12.2550500","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85081170864&doi=10.1117%2f12.2550500&partnerID=40&md5=da2880aec321a214aed787a2515f6155","School of Reliability and Systems Engineering, Beihang University, Beijing, 100191, China","Yin, Y., School of Reliability and Systems Engineering, Beihang University, Beijing, 100191, China; Su, Q., School of Reliability and Systems Engineering, Beihang University, Beijing, 100191, China; Liu, L., School of Reliability and Systems Engineering, Beihang University, Beijing, 100191, China","As an important maintenance measure, software reconfiguration is the key to detect the unreasonable part of the code module, namely code smell. Traditional detection methods rely on the experience of engineers, and the location efficiency of reconfiguration points is low. The existing automatic detection tools identify code smell with limited accuracy. Aiming at the problem that the number of reconstructed points in software system is huge and various, and the automation of reconstructed activities is low and difficult to optimize, the research framework of software smell prediction based on machine learning is studied and designed. Taking four common code smells as the research object, the classification algorithm and detection model of the best code smell are established, and the dimension reduction method of feature extraction is further improved. The highest accuracy rate is 89.8%, which can improve the automation level of software smell detection. © COPYRIGHT SPIE. Downloading of the abstract is permitted for personal use only.","Code smell; Machine learning; Software refactoring","Learning systems; Machine learning; Automatic Detection; Classification algorithm; Code smell; Dimension reduction method; Location efficiency; Research frameworks; Software reconfiguration; Software refactoring; Feature extraction",,,,,,,,,,,,"Su, Q.; School of Reliability and Systems Engineering, China","Tianran W.Tianyou C.Huitao F.Qifeng Y.","SPIE",0277786X,9781510636316,PSISD,,"English","Proc SPIE Int Soc Opt Eng",Conference Paper,"Final","",Scopus,2-s2.0-85081170864
"Namiot D., Romanov V.","36968180200;57194113225;","On Data Analysis of Software Repositories",2020,"Communications in Computer and Information Science","1140 CCIS",,,"263","272",,,"10.1007/978-3-030-37436-5_24","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85081054508&doi=10.1007%2f978-3-030-37436-5_24&partnerID=40&md5=89d006a2c8a3d2f0f7912efbf6ef7419","Lomonosov Moscow State University, Leninskie Gory, 1, GSP-1, Moscow, 119991, Russian Federation","Namiot, D., Lomonosov Moscow State University, Leninskie Gory, 1, GSP-1, Moscow, 119991, Russian Federation; Romanov, V., Lomonosov Moscow State University, Leninskie Gory, 1, GSP-1, Moscow, 119991, Russian Federation","This article discusses the analysis of software repositories using data analysis methods. A review is made of methods for analyzing programs based on information retrieved from the program code stored in code repositories. A review is made of methods for analyzing programs based on information retrieved from the program code stored in repositories. The article reviews the works that apply methods of classification, clustering and depth learning in software development. For example, for classifying and predicting errors, changing the properties of code in the process of its evolution, detecting design flaws and debts, assist for code refactoring. The main ultimate goal for all models is, of course, an automation of programming. In practice, we are talking about more simple tasks. This includes, for example, information retrieval (program code), error prediction, clone detection, link analysis, evolution analysis, etc. Firstly, we discuss recurrent neural networks and their deployment for the analysis of software repositories. In the simplest case, recurrent networks model a programming language as a sequence of characters. Also, the paper covers clustering and topic modeling. © Springer Nature Switzerland AG 2020.","Architectural technical debt; Classification; Clustering; Data science; Recurrent neural networks; Software engineering; Software metrics; Software repositories","Classification (of information); Codes (symbols); Data handling; Data Science; Information analysis; Recurrent neural networks; Software engineering; Clustering; Code re-factoring; Data analysis methods; Evolution analysis; Recurrent networks; Software metrics; Software repositories; Technical debts; Software design",,,,,,,,,,,,"Namiot, D.; Lomonosov Moscow State University, Leninskie Gory, 1, GSP-1, Russian Federation; email: dnamiot@gmail.com","Sukhomlin V.Zubareva E.","Springer",18650929,9783030374358,,,"English","Commun. Comput. Info. Sci.",Conference Paper,"Final","",Scopus,2-s2.0-85081054508
"Tummalapalli S., Kumar L., Murthy Neti L.B.","57190253628;56120791500;57192228561;","An effective web service anti-pattern prediction model using SMOTE",2019,"2019 IEEE 16th India Council International Conference, INDICON 2019 - Symposium Proceedings",,,"9029090","","",,,"10.1109/INDICON47234.2019.9029090","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85083034948&doi=10.1109%2fINDICON47234.2019.9029090&partnerID=40&md5=190c757da8e402aebdbd785efcb9b21e","Bits Pilani Hyderabad Campus, India","Tummalapalli, S., Bits Pilani Hyderabad Campus, India; Kumar, L., Bits Pilani Hyderabad Campus, India; Murthy Neti, L.B., Bits Pilani Hyderabad Campus, India","An anti-pattern is a common response to a recurring problem that is usually ineffective and risks being highly counterproductive. In this work, we empirically investigate the association between the occurrence of four different types of anti-patterns and source code metrics. SMOTE is being used for data sampling as the dataset considered is imbalanced. Principle component analysis and Rough set analysis are applied for feature extraction and selection. The features selected from this two techniques along with the significant features(SIGF) are considered as input for building the predictive models for the detection of antipatterns. The effectiveness of these techniques are evaluated using Logistic Regression(LOGR), Decision Tree(DT) and Least Square Support Vector Machine(LSSVM) with three different kernels:Linear(LSVVML), Polynomial(LSSVMP) and Radbas(LSSVMR). Experimental results reveal that the model developed using SMOTE is yielding better results when compared to the models developed with the original dataset. Furthermore, we also observe that the predictive model developed using LSSVM with linear and polynomial is more effective than the models developed using other classifier techniques. © 2019 IEEE.","Anti-pattern; Service oriented architecture; Software Engineering; Source code metrics; Web services","Decision trees; Feature extraction; Logistic regression; Polynomial regression; Principal component analysis; Support vector machines; Support vector regression; Feature extraction and selection; Least square support vector machines; Prediction model; Predictive modeling; Predictive models; Principle component analysis; Rough set analysis; Source code metrics; Web services",,,,,,,,,,,,,,"Institute of Electrical and Electronics Engineers Inc.",,9781728123271,,,"English","IEEE India Counc. Int. Conf., INDICON - Symp. Proc.",Conference Paper,"Final","",Scopus,2-s2.0-85083034948
"Asghar M.Z., Alam K.A., Javed S.","57215218486;56504833200;57215219210;","Software design patterns recommendation: A systematic literature review",2019,"Proceedings - 2019 International Conference on Frontiers of Information Technology, FIT 2019",,,"8991630","167","172",,1,"10.1109/FIT47737.2019.00040","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85080146937&doi=10.1109%2fFIT47737.2019.00040&partnerID=40&md5=b3eaa99ca0e4a80c57e80b8a783558af","Deptarment of Computer Sciences, National University Fast, Islamabad, Pakistan","Asghar, M.Z., Deptarment of Computer Sciences, National University Fast, Islamabad, Pakistan; Alam, K.A., Deptarment of Computer Sciences, National University Fast, Islamabad, Pakistan; Javed, S., Deptarment of Computer Sciences, National University Fast, Islamabad, Pakistan","Design patterns are essential for development. It provides reusability, modularization, quality and consistency between design and implementation. Expert knowledge required for the selection of correct design patterns. Moreover, the recommendation of design patterns is an important task for software development. Many tools and techniques were proposed to recommend design patterns. The main objective of this research is to perform a systematic literature review based on Kitchenham guidelines. We have analyzed the studies with different perspectives: Study objective, validation, recommendation technique for design pattern and limitation of the study. We have considered the research publication from 2010 to 2019 and examined them on four electronic databases. A total of 22 studies are identified from 2010-2019 and classified them on predefined classification criteria. Overall research findings concluded that anti-pattern detection and selection and fuzzy technique are most widely used but still there is a research gap that exists from the recent 2-years. It was observed that the traditional and most practiced recommendation techniques are not used in software design patterns recommendation. © 2019 IEEE.","Design patterns; Pattern detection; Pattern recommendation; Pattern selection; Systematic literature review","Modular construction; Pattern recognition; Reusability; Design Patterns; Pattern detection; Pattern recommendation; Pattern selection; Systematic literature review; Software design",,,,,,,,,,,,,,"Institute of Electrical and Electronics Engineers Inc.",,9781728166254,,,"English","Proc. - Int. Conf. Front. Inf. Technol., FIT",Conference Paper,"Final","",Scopus,2-s2.0-85080146937
"Góis Mateus B., Martinez M.","55303205700;55938368500;","An empirical study on quality of Android applications written in Kotlin language",2019,"Empirical Software Engineering","24","6",,"3356","3393",,14,"10.1007/s10664-019-09727-4","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85068122639&doi=10.1007%2fs10664-019-09727-4&partnerID=40&md5=37a01e03312dfe31f948a3858a858314","Université Polytechnique Hauts-de-France, UPHF - Campus Mont Houy, Valenciennes, 59313, France","Góis Mateus, B., Université Polytechnique Hauts-de-France, UPHF - Campus Mont Houy, Valenciennes, 59313, France; Martinez, M., Université Polytechnique Hauts-de-France, UPHF - Campus Mont Houy, Valenciennes, 59313, France","Context: During the last years, developers of mobile applications have the possibility to use new paradigms and tools for developing mobile applications. For instance, since 2017, Android developers have the official support to write Android applications using Kotlin language. Kotlin is programming language fully interoperable with Java that combines object-oriented and functional features. Objective: The goal of this paper is twofold. First, it aims to study the degree of adoption of Kotlin language on the development of open-source Android applications and to measure the amount of Kotlin code inside those applications. Secondly, it aims to measure the quality of Android applications that are written using Kotlin and to compare it with the quality of Android applications written using Java. Method: We first defined a method to detect Kotlin applications from a dataset of open-source Android applications. Then, we analyzed those applications to detect instances of code smells and computed an estimation of the quality of the applications. Finally, we studied how the introduction of Kotlin code impacts on the quality of an Android application. Results: Our experiment found that 11.26% of applications from a dataset with 2,167 open-source applications have been written (partially or fully) using Kotlin language. We found that the introduction of Kotlin code increases the quality, in terms of the presence of 10 different code smells studied, 4 object-oriented and 6 Android, of the majority of the Android applications initially written in Java. © 2019, Springer Science+Business Media, LLC, part of Springer Nature.","Android; Code evolution; Code smells; Java; Kotlin; Mobile development; Open-Source applications; Quality","Codes (symbols); Functional programming; Image quality; Java programming language; Mobile computing; Object oriented programming; Odors; Open source software; Open systems; Android; Code evolution; Code smell; Java; Kotlin; Mobile development; Open source application; Android (operating system)",,,,,,,,,,,,"Góis Mateus, B.; Université Polytechnique Hauts-de-France, UPHF - Campus Mont Houy, France; email: Bruno.GoisMateus@etu.uphf.fr",,"Springer",13823256,,ESENF,,"English","Empir Software Eng",Article,"Final","All Open Access, Green",Scopus,2-s2.0-85068122639
"Gulabovska H., Porkolab Z.","57212345711;22433504100;","Towards More Sophisticated Static Analysis Methods of Python Programs",2019,"INFORMATICS 2019 - IEEE 15th International Scientific Conference on Informatics, Proceedings",,,"9119307","225","230",,1,"10.1109/Informatics47936.2019.9119307","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85087635673&doi=10.1109%2fInformatics47936.2019.9119307&partnerID=40&md5=ae2b133832aa71bd0240f10019d29a5b","Eötvös Loránd University, Department of Programming Languages and Compilers, Budapest, Hungary","Gulabovska, H., Eötvös Loránd University, Department of Programming Languages and Compilers, Budapest, Hungary; Porkolab, Z., Eötvös Loránd University, Department of Programming Languages and Compilers, Budapest, Hungary","Static analysis is a software verification method which is analyzing the source code without executing it for detecting code smells and possible software bugs. Various analysis methods have been successfully applied for languages with static type system, such as C, C++ and Java. Python is an important programming language with dynamic type system, used in many emerging areas, including data science, machine learning and web applications. The dynamic behavior of the Python language requires different static analysis approaches compared to the ones with static type system. In this paper we overview these methods and investigate their advantages and shortages. We compare the symbolic execution with the generally used Abstract Syntax Tree based approach and show its advantages based on concrete examples. We also highlight the restrictions of current tools and suggest further research directions to tackle these problems. © 2019 IEEE.","Python; static analysis; symbolic execution","C++ (programming language); Codes (symbols); Computer software; Computer systems programming; Program debugging; Trees (mathematics); Verification; Abstract Syntax Trees; Analysis approach; Dynamic behaviors; Dynamic type systems; Software verification; Static analysis method; Static type systems; Symbolic execution; Static analysis","European Commission, EC; European Social Fund, ESF: EFOP-3.6.3-VEKOP-16-2017-00002","This work is supported by the European Union, co-financed by the European Social Fund (EFOP-3.6.3-VEKOP-16-2017-00002).",,,,,,,,,,,,"Institute of Electrical and Electronics Engineers Inc.",,9781728131795,,,"English","INFORMATICS - IEEE Int. Sci. Conf. Informatics, Proc.",Conference Paper,"Final","",Scopus,2-s2.0-85087635673
"James Benedict Felix S., Vinod V.","57211908124;57211035803;","Design and analysis of improvised genetic algorithm with particle swarm optimization for code smell detection",2019,"International Journal of Innovative Technology and Exploring Engineering","9","1",,"5327","5330",,1,"10.35940/ijitee.A5328.119119","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85075312465&doi=10.35940%2fijitee.A5328.119119&partnerID=40&md5=886ef3d32afe8e2052ab266e431b5c99","Bharathiar University, Coimbatore, India; Department of Computer Applications, Dr.M.G.R. Educational and Research Institute University, Chennai, India","James Benedict Felix, S., Bharathiar University, Coimbatore, India; Vinod, V., Department of Computer Applications, Dr.M.G.R. Educational and Research Institute University, Chennai, India","Software development phase is very important in the Software Development Life Cycle. Software maintenance is a difficult process if code smells exist in the code. The poor design of code development is called code smells. The code smells are identified by various tools using various approaches. Many code smell approaches are rule based. The rule based approaches are based on trial and error method. Genetic Algorithm is a heuristic Algorithm by Darwin’s Theory. This paper presents a metric based code smell detection approach by Genetic Algorithm with particle swarm optimization based on Euclidean data distance. The Euclidean data distance gives best proximity value between two points. Our approach is evaluated on the three open source projects like JFreeChart v1.0.9, Log4J v1.2.1 and Xerces-J for identifying the eight types of code smells namely Functional Decomposition, Feature Envy, Blob, Long Parameter List, Spaghetti Code, Data Class, Lazy Class, Shotgun Surgery. © 2019, Blue Eyes Intelligence Engineering and Sciences Publication. All rights reserved.","Code smell; Genetic Algorithm; Improvised Genetic Algorithm",,,,,,,,,,,,,,,"Blue Eyes Intelligence Engineering and Sciences Publication",22783075,,,,"English","Int. J. Innov. Technol. Explor. Eng.",Article,"Final","All Open Access, Bronze",Scopus,2-s2.0-85075312465
"Krishna R., Menzies T.","57282246700;7003835495;","Bellwethers: A Baseline Method for Transfer Learning",2019,"IEEE Transactions on Software Engineering","45","11","8329264","1081","1105",,30,"10.1109/TSE.2018.2821670","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85044791951&doi=10.1109%2fTSE.2018.2821670&partnerID=40&md5=b3d6059205c6928084f5b65b295a4c3a","Department of Computer Science, North Carolina State University, Raleigh, NC  27695, United States","Krishna, R., Department of Computer Science, North Carolina State University, Raleigh, NC  27695, United States; Menzies, T., Department of Computer Science, North Carolina State University, Raleigh, NC  27695, United States","Software analytics builds quality prediction models for software projects. Experience shows that (a) the more projects studied, the more varied are the conclusions; and (b) project managers lose faith in the results of software analytics if those results keep changing. To reduce this conclusion instability, we propose the use of 'bellwethers': given N projects from a community the bellwether is the project whose data yields the best predictions on all others. The bellwethers offer a way to mitigate conclusion instability because conclusions about a community are stable as long as this bellwether continues as the best oracle. Bellwethers are also simple to discover (just wrap a for-loop around standard data miners). When compared to other transfer learning methods (TCA+, transfer Naive Bayes, value cognitive boosting), using just the bellwether data to construct a simple transfer learner yields comparable predictions. Further, bellwethers appear in many SE tasks such as defect prediction, effort estimation, and bad smell detection. We hence recommend using bellwethers as a baseline method for transfer learning against which future work should be compared. © 1976-2012 IEEE.","bad smells; defect prediction; effort estimation; issue close time; prediction; Transfer learning","Analytical models; Computer software; Defects; Estimation; Forecasting; Job analysis; Software engineering; Software testing; Bad smells; Benchmark testing; Complexity theory; Defect prediction; Effort Estimation; Issue Close Time; Task analysis; Transfer learning; Learning systems","National Science Foundation, NSF: 1302169, 1506586","The work is partially funded by US National Science Foundation awards #1506586 and #1302169.",,,,,,,,,,"Krishna, R.; Department of Computer Science, United States; email: i.m.ralk@gmail.com",,"Institute of Electrical and Electronics Engineers Inc.",00985589,,IESED,,"English","IEEE Trans Software Eng",Article,"Final","All Open Access, Green",Scopus,2-s2.0-85044791951
"Guo X., Shi C., Jiang H.","57211688926;26325687700;57205479128;","Deep semantic-based feature envy identification",2019,"ACM International Conference Proceeding Series",,,"3361257","","",,5,"10.1145/3361242.3361257","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85074849764&doi=10.1145%2f3361242.3361257&partnerID=40&md5=ca378a9ca02d82a06b42f75993741e00","School of Computer Science, Beijing Institute of Technology, Beijing, China","Guo, X., School of Computer Science, Beijing Institute of Technology, Beijing, China; Shi, C., School of Computer Science, Beijing Institute of Technology, Beijing, China; Jiang, H., School of Computer Science, Beijing Institute of Technology, Beijing, China","Code smells regularly cause potential software quality problems in software development. Thus, code smell detection has attracted the attention of many researchers. A number of approaches have been suggested in order to improve the accuracy of code smell detection. Most of these approaches rely solely on structural information (code metrics) extracted from source code and heuristic rules designed by people. In this paper, We propose a method-representation based model to represent the methods in textual code, which can effectively reflect the semantic relationships embedded in textual code. We also propose a deep learning based approach that combines method-representation and a CNN model to detect feature envy. The proposed approach can automatically extract semantic and features from textual code and code metrics, and can also automatically build complex mapping between these features and predictions. Evaluation results on open-source projects demonstrate that our proposed approach achieves better performance than the state-of-the-art in detecting feature envy. © 2019 Association for Computing Machinery.","Code Smell; Deep Learning; Deep Semantic; Feature Envy; Software Refactoring","Computer software selection and evaluation; Deep learning; Open source software; Semantics; Software design; Software quality; Code smell; Evaluation results; Feature Envy; Learning-based approach; Open source projects; Semantic relationships; Software refactoring; Structural information; Feature extraction",,,,,,,,,,,,,,"Association for Computing Machinery",,9781450377010,,,"English","ACM Int. Conf. Proc. Ser.",Conference Paper,"Final","",Scopus,2-s2.0-85074849764
"Palomba F., Zaidman A.","55321369000;18435685400;","The smell of fear: on the relation between test smells and flaky tests",2019,"Empirical Software Engineering","24","5",,"2907","2946",,30,"10.1007/s10664-019-09683-z","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85059605566&doi=10.1007%2fs10664-019-09683-z&partnerID=40&md5=9ec5cf9f43dde014878e2bf3c3dd872f","University of Zurich, Zurich, Switzerland; Delft University of Technology, Delft, Netherlands","Palomba, F., University of Zurich, Zurich, Switzerland; Zaidman, A., Delft University of Technology, Delft, Netherlands","Regression testing is the activity performed by developers to check whether new modifications have not introduced bugs. A crucial requirement to make regression testing effective is that test cases are deterministic. Unfortunately, this is not always the case as some tests might suffer from so-called flakiness, i.e., tests that exhibit both a passing and a failing outcome with the same code. Flaky tests are widely recognized as a serious issue, since they hide real bugs and increase software inspection costs. While previous research has focused on understanding the root causes of test flakiness and devising techniques that automatically fix them, in this paper we explore an orthogonal perspective: the relation between flaky tests and test smells, i.e., suboptimal development choices applied when developing tests. Relying on (1) an analysis of the state-of-the-art and (2) interviews with industrial developers, we first identify five flakiness-inducing test smell types, namely Resource Optimism, Indirect Testing, Test Run War, Fire and Forget, and Conditional Test Logic, and automate their detection. Then, we perform a large-scale empirical study on 19,532 JUnit test methods of 18 software systems, discovering that the five considered test smells causally co-occur with flaky tests in 75% of the cases. Furthermore, we evaluate the effect of refactoring, showing that it is not only able to remove design flaws, but also fixes all 75% flaky tests causally co-occurring with test smells. © 2019, Springer Science+Business Media, LLC, part of Springer Nature.","Flaky tests; Refactoring; Test smells","Computer software selection and evaluation; Odors; Program debugging; Testing; Empirical studies; Refactorings; Regression testing; Root cause; Software inspection; Software systems; State of the art; Test method; Software testing","731529; Schweizerischer Nationalfonds zur Förderung der Wissenschaftlichen Forschung, SNF: PP00P2_170529; Nederlandse Organisatie voor Wetenschappelijk Onderzoek, NWO: 639.022.314","We would like to thank the 10 developers that participated in the interviews, and the 2 external inspectors that helped us categorize the test smells. We thank the anonymous reviewers, whose comments and feedback significantly improved this paper. This work was partially sponsored by the EU Horizon 2020 ICT-10-2016-RIA “STAMP” project (No. 731529), the NWO “TestRoots” project (No. 639.022.314), and the SNF “Data-Driven Code Review” project (No. PP00P2_170529).",,,,,,,,,,"Palomba, F.; University of ZurichSwitzerland; email: palomba@ifi.uzh.ch",,"Springer Science and Business Media, LLC",13823256,,ESENF,,"English","Empir Software Eng",Retracted,"Final","",Scopus,2-s2.0-85059605566
"Patton E.W., Seo A., Turbak F.","36025753600;57215290111;6602293058;","Enhancing Abstraction in App Inventor with Generic Event Handlers",2019,"Proceedings - 2019 IEEE Blocks and Beyond Workshop, B and B 2019",,,"8941193","63","71",,,"10.1109/BB48857.2019.8941193","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85078147532&doi=10.1109%2fBB48857.2019.8941193&partnerID=40&md5=2610525d6322c7b2a9e66b335f0408ce","MIT, MIT App Inventor, Cambridge, MA, United States; Wellesley College, Computer Science Department, Wellesley, MA, United States","Patton, E.W., MIT, MIT App Inventor, Cambridge, MA, United States; Seo, A., Wellesley College, Computer Science Department, Wellesley, MA, United States; Turbak, F., Wellesley College, Computer Science Department, Wellesley, MA, United States","Work on code smells (undesirable programming patterns) in blocks languages has found that programmers often duplicate blocks code rather than abstracting over common patterns of computation using procedure-like features. For example, previous analyses of over a million MIT App Inventor projects have revealed that procedures are used surprisingly rarely in the wild and that many users miss opportunities for using procedural abstraction to avoid code duplication in their projects.In this work, we use data analysis to explain how particular features of App Inventor create barriers to abstracting over event handlers. In many cases, duplicated code in event handlers cannot be extracted into a procedure without using so-called generic blocks that abstract over a particular component (e.g., a label). Generic blocks are rarely used in practice, possibly because programmers do not know about them or find them difficult to use. But even proceduralization with generic blocks does not remove the need for duplicating the event handlers themselves.We address these issues with two enhancements to App Inventor. First, we add generic event handlers, a new form of abstraction that allows specifying a single handler for all components of a particular type. Second, we add a way to easily convert between specific and generic blocks to facilitate genericization, that is, abstracting actions over a particular component to apply to a group of components of that type.We also discuss related design choices and ways to encourage programmers to use the new features to avoid code duplication. Our work is an example of data-informed programming language design, in which the creation or modification of features is informed by the analysis of large datasets of programs from the language's target audience. © 2019 IEEE.","abstraction; blocks programming; code duplication; code smells; procedures; refactoring","Codes (symbols); Computer programming; Large dataset; Odors; abstraction; Code duplication; Code smell; procedures; Refactorings; Abstracting","Wellesley College, WC","Seo’s research was funded by the 2018 Wellesley College Science Center Summer Research program through the IBM Faculty Research Fund for Science and Math and by a Wellesley College Faculty Grant. The App Inventor dataset was provided by the MIT App Inventor team’s Jeff Schiller. Some of our analyses use a Python project summarization program that builds upon earlier work by Isabelle Li, Maja Svanberg, and Benji Xie.",,,,,,,,,,,"Sherman M.Turbak F.","Institute of Electrical and Electronics Engineers Inc.",,9781728148496,,,"English","Proc. - IEEE Blocks Beyond Workshop, B B",Conference Paper,"Final","",Scopus,2-s2.0-85078147532
"Techapalokul P., Tilevich E.","57189044783;6507251807;","Code Quality Improvement for All: Automated Refactoring for Scratch",2019,"Proceedings of IEEE Symposium on Visual Languages and Human-Centric Computing, VL/HCC","2019-October",,"8818950","117","125",,12,"10.1109/VLHCC.2019.8818950","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85078098118&doi=10.1109%2fVLHCC.2019.8818950&partnerID=40&md5=381c4171527ca3efb5c7dd7942506d19","Dept. of Computer Science, Virginia Tech, Software Innovations Lab, United States","Techapalokul, P., Dept. of Computer Science, Virginia Tech, Software Innovations Lab, United States; Tilevich, E., Dept. of Computer Science, Virginia Tech, Software Innovations Lab, United States","Block-based programming has been overwhelmingly successful in revitalizing introductory computing education and in facilitating end-user development. However, poor code quality makes block-based programs hard to understand, modify, and reuse, thus hurting the educational and productivity effectiveness of blocks. There is great potential benefit in empowering programmers in this domain to systematically improve the code quality of their projects. Refactoring-improving code quality while preserving its semantics-has been widely adopted in traditional software development. In this work, we introduce refactoring to Scratch. We define four new Scratch refactorings: Extract Custom Block, Extract Parent Sprite, Extract Constant, and Reduce Variable Scope. To automate the application of these refactorings, we enhance the Scratch programming environment with powerful program analysis and transformation routines. To evaluate the utility of these refactorings, we apply them to remove the code smells detected in a representative dataset of 448 Scratch projects. We also conduct a between-subjects user study with 24 participants to assess how our refactoring tools impact programmers. Our results show that refactoring improves the subjects' code quality metrics, while our refactoring tools help motivate programmers to improve code quality. © 2019 IEEE.","block-based languages; code quality; code smells; end-user programming; introductory curriculum; program analysis; Scratch; software refactoring","Application programs; Computer software reusability; Odors; Semantics; Software design; Visual languages; Block based; Code quality; Code smell; End user programming; Program analysis; Scratch; Software refactoring; Quality control","National Science Foundation, NSF: 1712131, DUE-171213, DUE-1712131","The authors would like to thank Franklyn Turbak and the anonymous reviewers for their valuable feedback that helped improve this manuscript. This research is supported by the National Science Foundation through the Grant DUE-171213","The authors would like to thank Franklyn Turbak and the anonymous reviewers for their valuable feedback that helped improve this manuscript. This research is supported by the National Science Foundation through the Grant DUE-1712131.",,,,,,,,,,"Smith J.Bogart C.A.Good J.Fleming S.D.","IEEE Computer Society",19436092,9781728108100,,,"English","Proc. of IEEE Symp. Vis. Lang. Hum.-Cent. Comput., VL/HCC",Conference Paper,"Final","",Scopus,2-s2.0-85078098118
"Kiyak E.O., Birant D., Birant K.U.","57215321783;6508164583;57190115006;","Comparison of Multi-Label Classification Algorithms for Code Smell Detection",2019,"3rd International Symposium on Multidisciplinary Studies and Innovative Technologies, ISMSIT 2019 - Proceedings",,,"8932855","","",,4,"10.1109/ISMSIT.2019.8932855","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85078017712&doi=10.1109%2fISMSIT.2019.8932855&partnerID=40&md5=822c0c56ff10453f1ade79d628429f48","Dokuz Eylul University, Graduate School of Natural and Applied Sciences, Izmir, Turkey","Kiyak, E.O., Dokuz Eylul University, Graduate School of Natural and Applied Sciences, Izmir, Turkey; Birant, D., Dokuz Eylul University, Graduate School of Natural and Applied Sciences, Izmir, Turkey; Birant, K.U., Dokuz Eylul University, Graduate School of Natural and Applied Sciences, Izmir, Turkey","Code smells in a source code shows the weakness of design or implementation. To detect code smells, several detection tools have been developed. However, these tools generally produce different results, since code smells are subjectively interpreted, informally defined and configured by the developers, domain-dependent and based on opinions and experiences. To cope with these issues, in this paper, we have used machine learning techniques, especially multi-label classification methods, to classify whether the given source code is affected with more than one code smells or not. We have conducted experiments on four code smell datasets and transformed them into two multi-label datasets (one for method level and the other one for class level). Two multi-label classification methods (Classifier Chains and Label Combination) and their ensemble models performed on the converted datasets using five different base classifiers. The results show that, as a base classifier, Random Forest algorithm performs better than Decision Tree, Naive Bayes, Support Vector Machine and Neural Network algorithms. © 2019 IEEE.","code smell detection; machine learning; multi-label classification; software engineering","Decision trees; Learning systems; Machine learning; Odors; Software engineering; Support vector machines; Base classifiers; Classifier chains; Code smell; Label combinations; Machine learning techniques; Multi label classification; Neural network algorithm; Random forest algorithm; Classification (of information)",,,,,,,,,,,,,,"Institute of Electrical and Electronics Engineers Inc.",,9781728137896,,,"English","Int. Symp. Multidiscip. Stud. Innov. Technol., ISMSIT - Proc.",Conference Paper,"Final","",Scopus,2-s2.0-85078017712
"Das A.K., Yadav S., Dhal S.","57207691905;57213186815;56205109200;","Detecting Code Smells using Deep Learning",2019,"IEEE Region 10 Annual International Conference, Proceedings/TENCON","2019-October",,"8929628","2081","2086",,12,"10.1109/TENCON.2019.8929628","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85077682252&doi=10.1109%2fTENCON.2019.8929628&partnerID=40&md5=43b2527dc20284f9b5b10e24b25d5df3","International Institute of Information Technology, Department of Software Engineering, Bangalore, India; Indian Institute of Information Technology, Department of Computer Science and Engineering, Guwahati, India","Das, A.K., International Institute of Information Technology, Department of Software Engineering, Bangalore, India; Yadav, S., Indian Institute of Information Technology, Department of Computer Science and Engineering, Guwahati, India; Dhal, S., Indian Institute of Information Technology, Department of Computer Science and Engineering, Guwahati, India","A smell in software refers to a symptom introduced in software artifacts such as architecture, design or code. A code smell can potentially cause deeper and serious problems, while dealing with mainly non-functional requirements such as testability, maintainability, extensibility and scalability. The detection of code smell is an essential step in the refactoring process, which facilitates non functional requirements in a software. The existing approaches for detecting code smells use detection rules or standards using a combination of different object-oriented metrics. Although a variety of code smell detection tools have been developed, they still have limitations and constraints in their capabilities. The most well-known object-oriented metrics are considered to identify the presence of smells in software. This paper proposes a deep learning based approach to detect two code smells (Brain Class and Brain Method). The proposed system uses thirty open source Java projects, which are shared by many users in GitHub repositories. The dataset of these Java projects is partitioned into mutually exclusive training and test sets. Our experiments have demonstrated high accuracy results for both the code smells. © 2019 IEEE.","Code smell detection tools; Code smells; Deep Learning; Object-oriented metrics","Deep learning; Inspection equipment; Java programming language; Odors; Open source software; Open systems; Statistical tests; Code smell; Detection rules; Detection tools; High-accuracy; Learning-based approach; Non-functional requirements; Object oriented metrics; Software artifacts; Object oriented programming",,,,,,,,,,,,,,"Institute of Electrical and Electronics Engineers Inc.",21593442,9781728118956,85QXA,,"English","IEEE Reg 10 Annu Int Conf Proc TENCON",Conference Paper,"Final","",Scopus,2-s2.0-85077682252
"Hussain S., Keung J., Sohail M.K., Khan A.A., Ahmad G., Mufti M.R., Khatak H.A.","56266004800;6603066702;57210691189;26434399300;24723831800;57322149300;57211253511;","Methodology for the quantification of the effect of patterns and anti-patterns association on the software quality",2019,"IET Software","13","5",,"414","422",,3,"10.1049/iet-sen.2018.5087","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85073151607&doi=10.1049%2fiet-sen.2018.5087&partnerID=40&md5=901098ae98984b262f685ef91cc89f58","Department of CS, COMSATS University Islamabad, Pakistan; Department of CS, City University of Hong Kong, Hong Kong; Nanjing University of Aeronautics and Astronautics, Nanjing, Jiangsu, 210016, China; Department of CS, COMSATS University, Vehari Campus, Pakistan","Hussain, S., Department of CS, COMSATS University Islamabad, Pakistan; Keung, J., Department of CS, City University of Hong Kong, Hong Kong; Sohail, M.K., Department of CS, COMSATS University Islamabad, Pakistan; Khan, A.A., Nanjing University of Aeronautics and Astronautics, Nanjing, Jiangsu, 210016, China; Ahmad, G., Department of CS, COMSATS University Islamabad, Pakistan; Mufti, M.R., Department of CS, COMSATS University, Vehari Campus, Pakistan; Khatak, H.A., Department of CS, COMSATS University Islamabad, Pakistan","The employment of design patterns is considered as a benchmark of software quality in terms of reducing the number of software faults. However, the quantification of the information about the hinder design issues such as the number of roles, type of design pattern, and their association with anti-pattern classes is still required. The authors propose a new methodology to evaluate the impact of certain design issues on the software quality in terms of quantification of fault density. Firstly, they mine the required information about the classes of each system under study. Secondly, they describe taxonomy to group the classes. Subsequently, they used statistical techniques to formulate and benchmark the results. They include the analysis of four open source projects with six design patterns and six anti-patterns in the case study. The main consequences are (i) the pattern participant classes are less dense in faults, (ii) the classes involved in the structural association between design patterns and anti-patterns are denser in faults, (iii) the pattern participant classes with multi-role and anti-pattern smell association is denser in faults as compared to others. The significant difference between fault density distributions of groups of classes is still unclear and required further empirical investigation. © The Institution of Engineering and Technology 2019.",,"Benchmarking; Computer software selection and evaluation; Open source software; Design Patterns; Empirical investigation; Fault density; Open source projects; Software fault; Software Quality; Statistical techniques; Structural associations; Quality control",,,,,,,,,,,,"Hussain, S.; Department of CS, Pakistan; email: shussain@comsats.edu.pk",,"Institution of Engineering and Technology",17518806,,,,"English","IET Software",Article,"Final","All Open Access, Bronze",Scopus,2-s2.0-85073151607
"Oliveira A., Sousa L., Oizumi W., Garcia A.","56851872700;57194212913;55515918200;7404608626;","On the prioritization of design-relevant smelly elements: A mixed-method, multi-project study",2019,"ACM International Conference Proceeding Series",,,,"83","92",,4,"10.1145/3357141.3357142","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85076742250&doi=10.1145%2f3357141.3357142&partnerID=40&md5=1804ef1e6fe5feaf374ea11c2bd5e1c4","Opus Research Group, Informatics Department, PUC-Rio, Rio de Janeiro, Brazil","Oliveira, A., Opus Research Group, Informatics Department, PUC-Rio, Rio de Janeiro, Brazil; Sousa, L., Opus Research Group, Informatics Department, PUC-Rio, Rio de Janeiro, Brazil; Oizumi, W., Opus Research Group, Informatics Department, PUC-Rio, Rio de Janeiro, Brazil; Garcia, A., Opus Research Group, Informatics Department, PUC-Rio, Rio de Janeiro, Brazil","Software systems are likely to face what is called design problems. Given the typical lack of design documentation, developers have to rely on implementation-level symptoms, the so-called code smells, to identify and remove design problems. A code smell is a microstructure in the program that can indicate the presence of a design problem. Large programs have hundreds or thousands of program elements (e.g., classes) in which a significant proportion may be affected by smells. Consequently, due to time constraints and the large number of elements, developers have to prioritize the design-relevant program elements, i.e., locate a shortlist of elements that are suspects of having design-relevant smells. However, this task is hard and time-consuming. Unfortunately, the literature fails to provide developers with effective heuristics that automate such prioritization task. The objective of this paper is to propose heuristics that effectively locate a shortlist of design-relevant smelly program elements. For this purpose, we report two studies. In the first one, we investigated the criteria that developers used in practice to accurately prioritize design-relevant smelly elements. Based on these criteria, we derived a preliminary suite of prioritization heuristics. Since we do not know if the heuristics are suitable for an effective prioritization across multiple projects, we performed a second study to evaluate the proposed heuristics. We found that two out of nine heuristics reached an average precision higher than 75% for the four projects we analyzed. Thus, our findings suggest these heuristics are promising to support developers in prioritizing design-relevant smelly elements. © 2019 Association for Computing Machinery.","Design problems; Heuristics; Prioritization","Odors; Design documentation; Design problems; Heuristics; Multiple projects; Prioritization; Program elements; Software systems; Time constraints; Computer software reusability","175956; Conselho Nacional de Desenvolvimento Científico e Tecnológico, CNPq: 132251/2017-5, 312149/2016-6, 434969/2018-4; Fundação Carlos Chagas Filho de Amparo à Pesquisa do Estado do Rio de Janeiro, FAPERJ: 22520 7/2016","We would like to thank the reviewers for their valuable comments and suggestions. This work is funded by CNPq (132251/2017-5, 434969/2018-4, 312149/2016-6), CAPES/Procad (175956), and FAPERJ (22520 7/2016).",,,,,,,,,,,,"Association for Computing Machinery",,9781450376372,,,"English","ACM Int. Conf. Proc. Ser.",Conference Paper,"Final","",Scopus,2-s2.0-85076742250
"Lenarduzzi V., Saarimäki N., Taibi D.","55348964400;57210642796;55920884000;","The technical debt dataset",2019,"ACM International Conference Proceeding Series",,,,"2","11",,35,"10.1145/3345629.3345630","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85076086059&doi=10.1145%2f3345629.3345630&partnerID=40&md5=bdfaeb0f9a84ed38cc34121b48587893","Tampere University, Finland","Lenarduzzi, V., Tampere University, Finland; Saarimäki, N., Tampere University, Finland; Taibi, D., Tampere University, Finland","Technical Debt analysis is increasing in popularity as nowadays researchers and industry are adopting various tools for static code analysis to evaluate the quality of their code. Despite this, empirical studies on software projects are expensive because of the time needed to analyze the projects. In addition, the results are dificult to compare as studies commonly consider different projects. In this work, we propose the Technical Debt Dataset, a curated set of project measurement data from 33 Java projects from the Apache Software Foundation. In the Technical Debt Dataset, we analyzed all commits from separately defined time frames with SonarQube to collect Technical Debt information and with Ptidej to detect code smells. Moreover, we extracted all available commit information from the git logs, the refactoring applied with Refactoring Miner, and fault information reported in the issue trackers (Jira). Using this information, we executed the SZZ algorithm to identify the fault-inducing and - fixing commits. We analyzed 78K commits from the selected 33 projects, detecting 1.8M SonarQube issues, 62K code smells, 28K faults and 57K refactorings. The project analysis took more than 200 days. In this paper, we describe the data retrieval pipeline together with the tools used for the analysis. The dataset is made available through CSV files and an SQLite database to facilitate queries on the data. The Technical Debt Dataset aims to open up diverse opportunities for Technical Debt research, enabling researchers to compare results on common projects. © 2019 Association for Computing Machinery.","Dataset; Faults; Mining software repository; Software quality; SonarQube; SZZ; Technical debt","Codes (symbols); Computer software selection and evaluation; Faulting; Odors; Predictive analytics; Query languages; Software quality; Apache software foundations; Dataset; Empirical studies; Measurement data; Mining software repositories; SonarQube; Static code analysis; Technical debts; Quality control",,"Technical Debt analysis is increasing in popularity as nowadays researchers and industry are adopting various tools for static code analysis to evaluate the quality of their code. Despite this, empirical studies on software projects are expensive because of the time needed to analyze the projects. In addition, the results are difficult to compare as studies commonly consider different projects. In this work, we propose the Technical Debt Dataset, a curated set of project measurement data from 33 Java projects from the Apache Software Foundation. In the Technical Debt Dataset, we analyzed all commits from separately defined time frames with SonarQube to collect Technical Debt information and with Ptidej to detect code smells. Moreover, we extracted all available commit information from the git logs, the refactoring applied with Refactoring Miner, and fault information reported in the issue trackers (Jira). Using this information, we executed the SZZ algorithm to identify the fault-inducing and -fixing commits. We analyzed 78K commits from the selected 33 projects, detecting 1.8M SonarQube issues, 62K code smells, 28K faults and 57K refactorings. The project analysis took more than 200 days. In this paper, we describe the data retrieval pipeline together with the tools used for the analysis. The dataset is made available through CSV files and an SQLite database to facilitate queries on the data. The Technical Debt Dataset aims to open up diverse opportunities for Technical Debt research, enabling researchers to compare results on common projects.",,,,,,,,,,,,"Association for Computing Machinery",,9781450372336,,,"English","ACM Int. Conf. Proc. Ser.",Conference Paper,"Final","All Open Access, Green",Scopus,2-s2.0-85076086059
"Barbez A., Khomh F., Gueheneuc Y.-G.","57212377305;24724747600;13613429100;","Deep Learning Anti-Patterns from Code Metrics History",2019,"Proceedings - 2019 IEEE International Conference on Software Maintenance and Evolution, ICSME 2019",,,"8919037","114","124",,9,"10.1109/ICSME.2019.00021","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85077197058&doi=10.1109%2fICSME.2019.00021&partnerID=40&md5=00675601715e50122eb0fefd215e3621","Polytechnique Montreál, Canada; Concordia University, Canada","Barbez, A., Polytechnique Montreál, Canada; Khomh, F., Polytechnique Montreál, Canada; Gueheneuc, Y.-G., Concordia University, Canada","Anti-patterns are poor solutions to recurring design problems. Number of empirical studies have highlighted the negative impact of anti-patterns on software maintenance which motivated the development of various detection techniques. Most of these approaches rely on structural metrics of software systems to identify affected components while others exploit historical information by analyzing co-changes occurring between code components. By relying solely on one aspect of software systems (i.e., structural or historical), existing approaches miss some precious information which limits their performances. In this paper, we propose CAME (Convolutional Analysis of code Metrics Evolution), a deep-learning based approach that relies on both structural and historical information to detect anti-patterns. Our approach exploits historical values of structural code metrics mined from version control systems and uses a Convolutional Neural Network classifier to infer the presence of anti-patterns from this information. We experiment our approach for the widely know God Class anti-pattern and evaluate its performances on three software systems. With the results of our study, we show that: (1) using historical values of source code metrics allows to increase the precision; (2) CAME outperforms existing static machine-learning classifiers; and (3) CAME outperforms existing detection tools. © 2019 IEEE.","Anti-patterns; Deep learning; Mining Software Repositories","Classification (of information); Computer software; Computer software maintenance; Convolution; Learning algorithms; Neural networks; Anti-patterns; Convolutional neural network; Historical information; Learning-based approach; Mining software repositories; Source code metrics; Structural metrics; Version control system; Deep learning",,,,,,,,,,,,,,"Institute of Electrical and Electronics Engineers Inc.",,9781728130941,,,"English","Proc. - IEEE Int. Conf. Softw. Maint. Evol., ICSME",Conference Paper,"Final","All Open Access, Green",Scopus,2-s2.0-85077197058
"Wang L., Yang Y., Wang Y.","57203129305;57211525544;57203486588;","Do Higher Incentives Lead to Better Performance? - An Exploratory Study on Software Crowdsourcing",2019,"International Symposium on Empirical Software Engineering and Measurement","2019-Septemer",,"8870175","","",,3,"10.1109/ESEM.2019.8870175","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85074269349&doi=10.1109%2fESEM.2019.8870175&partnerID=40&md5=bebae9597e8a39e8462bc354c388e84b","Department of Computer Science and Technology, Ocean University of China, Qingdao, China; School of Systems and Enterprises, Stevens Institute of Technology, Hoboken, United States","Wang, L., Department of Computer Science and Technology, Ocean University of China, Qingdao, China; Yang, Y., School of Systems and Enterprises, Stevens Institute of Technology, Hoboken, United States; Wang, Y., Department of Computer Science and Technology, Ocean University of China, Qingdao, China","Background: Crowdsourcing, an emerging paradigm to accomplish tasks by calling unknown workers across the internet to compete, is gaining more and more popularity in various domains. Crowdsourcing task requesters usually offer different bonuses to assure desired worker performance. Most existing studies focus on the general crowdsourcing market, and lead to inconsistent observations on the impact of different incentive strategies on worker performance. There is a lack of studies investigating this issue in crowdsourcing more complex or intelligent tasks such as software crowdsourcing. Aims: To bridge the gap and develop better understanding of the relationship between task incentives and worker performance in the field of software crowdsourcing, this study aims at examining strategic pricing behaviors of task requesters on the most popular software crowdsourcing platform, i.e. TopCoder, and evaluating the impact of monetary incentives on worker performance. Method: We first present the characterization of two specific pricing strategies employed in software crowdsourcing marketplace, design a two-step methodology to detect and identify different pricing strategies, and propose an algorithm to examine the impact of pricing strategies on worker's behaviors in terms of task participation level, completion velocity and task quality. An exploratory case study is conducted to apply the proposed methodology and algorithm on a dataset extracted from the TopCoder platform. Results: The conceptualization of pricing strategies formulates common pricing behaviors in software crowdsourcing. Main analysis results include: 1) strategic pricing patterns are prevalent in software crowdsourcing practices; 2) higher task incentives can get potentially paid-off by higher performance such as more registrants, more submissions and quicker velocity; 3) however, higher incentives do not always improve submission score of software crowdsourcing tasks, similar to moral hazard problems in economics. This implies that it is necessary to increase task award modestly; 4) in addition, higher incentives can improve the internal code which is measured by code bugs and bad smells. Conclusions: We believe the preliminary findings on the pricing strategy are beneficial for both better pricing decision-making and improved crowdsourcing market efficiency and fairness, and hope to stimulate further discussions and research in strategic crowd coordination. © 2019 IEEE.","monetary incentives; pricing strategy; software crowdsourcing; worker behaviors; worker performance","Commerce; Costs; Crowdsourcing; Decision making; Risk management; Software engineering; Crowdsourcing platforms; Exploratory case studies; Exploratory studies; Incentive strategies; monetary incentives; Pricing strategy; worker behaviors; worker performance; Behavioral research","National Natural Science Foundation of China, NSFC: 61170312, 61402355, 61502378; State Key Laboratory of Software Engineering, SKLSE: No.SKLSE2012-09-14","This work was supported by the National Natural Science Foundation of China (No.61170312, 61402355, 61502378) and the State Key Laboratory of Software Engineering (No.SKLSE2012-09-14).",,,,,,,,,,"Wang, Y.; Department of Computer Science and Technology, China; email: wangyong@ouc.edu.cn",,"IEEE Computer Society",19493770,9781728129686,,,"English","Int. Symp. Empir. Softw. Eng. Meas.",Conference Paper,"Final","",Scopus,2-s2.0-85074269349
"Alkharabsheh K., Crespo Y., Manso E., Taboada J.A.","54681569100;22733838200;56231833300;7006470270;","Software Design Smell Detection: a systematic mapping study",2019,"Software Quality Journal","27","3",,"1069","1148",,27,"10.1007/s11219-018-9424-8","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85055955349&doi=10.1007%2fs11219-018-9424-8&partnerID=40&md5=87ebddb6937cfc3d3f4c8bd25358477d","Universidade de Santiago de Compostela, Santiago de Compostela, Spain; Universidade de Valladolid, Valladolid, Spain","Alkharabsheh, K., Universidade de Santiago de Compostela, Santiago de Compostela, Spain; Crespo, Y., Universidade de Valladolid, Valladolid, Spain; Manso, E., Universidade de Valladolid, Valladolid, Spain; Taboada, J.A., Universidade de Santiago de Compostela, Santiago de Compostela, Spain","Design Smells are indicators of situations that negatively affect software quality attributes such as understandability, testability, extensibility, reusability, and maintainability in general. Improving maintainability is one of the cornerstones of making software evolution easier. Hence, Design Smell Detection is important in helping developers when making decisions that can improve software evolution processes. After a long period of research, it is important to organize the knowledge produced so far and to identify current challenges and future trends. In this paper, we analyze 18 years of research into Design Smell Detection. There is a wide variety of terms that have been used in the literature to describe concepts which are similar to what we have defined as “Design Smells,” such as design defect, design flaw, anomaly, pitfall, antipattern, and disharmony. The aim of this paper is to analyze all these terms and include them in the study. We have used the standard systematic literature review method based on a comprehensive set of 395 articles published in different proceedings, journals, and book chapters. We present the results in different dimensions of Design Smell Detection, such as the type or scope of smell, detection approaches, tools, applied techniques, validation evidence, type of artifact in which the smell is detected, resources used in evaluation, supported languages, and relation between detected smells and software quality attributes according to a quality model. The main contributions of this paper are, on the one hand, the application of domain modeling techniques to obtain a conceptual model that allows the organization of the knowledge on Design Smell Detection and a collaborative web application built on that knowledge and, on the other, finding how tendencies have moved across different kinds of smell detection, as well as different approaches and techniques. Key findings for future trends include the fact that all automatic detection tools described in the literature identify Design Smells as a binary decision (having the smell or not), which is an opportunity to evolve to fuzzy and prioritized decisions. We also find that there is a lack of human experts and benchmark validation processes, as well as demonstrating that Design Smell Detection positively influences quality attributes. © 2018, Springer Science+Business Media, LLC, part of Springer Nature.","Antipatterns; DesignSmell; Detection tools; Quality models; Systematic mapping study","Benchmarking; Computer software reusability; Computer software selection and evaluation; Inspection equipment; Maintainability; Mapping; Odors; Quality assurance; Reusability; Reviews; Anti-patterns; DesignSmell; Detection tools; Quality models; Systematic mapping studies; Software design","ED431G/08; European Regional Development Fund, FEDER","This work has received financial support from the Consellera de Cultura, Educacin e Ordenacin Universitaria (accreditation 2016-2019, ED431G/08) and the European Regional Development Fund (ERDF). The authors would like to thank Irene Lavin from Universidad de Valladolid for her work in validating the database, checking integrity, and in the implementation of the web app (smellswisdom).",,,,,,,,,,"Alkharabsheh, K.; Universidade de Santiago de CompostelaSpain; email: khalid.alkharabsheh@usc.es",,"Springer New York LLC",09639314,,,,"English","Softw. Qual. J.",Article,"Final","",Scopus,2-s2.0-85055955349
"Pecorelli F., Di Nucci D., De Roover C., De Lucia A.","57210934334;57016777600;55891851900;7003641564;","On the role of data balancing for machine learning-based code smell detection",2019,"MaLTeSQuE 2019 - Proceedings of the 3rd ACM SIGSOFT International Workshop on Machine Learning Techniques for Software Quality Evaluation, co-located with ESEC/FSE 2019",,,,"19","24",,17,"10.1145/3340482.3342744","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85076433758&doi=10.1145%2f3340482.3342744&partnerID=40&md5=79d9362df2ed37b4e2ea352f860ef181","University of Salerno, Salerno, Italy; Vrije Universiteit Brussel, Brussel, Belgium","Pecorelli, F., University of Salerno, Salerno, Italy; Di Nucci, D., Vrije Universiteit Brussel, Brussel, Belgium; De Roover, C., Vrije Universiteit Brussel, Brussel, Belgium; De Lucia, A., University of Salerno, Salerno, Italy","Code smells can compromise software quality in the long term by inducing technical debt. For this reason, many approaches aimed at identifying these design flaws have been proposed in the last decade. Most of them are based on heuristics in which a set of metrics (e.g., code metrics, process metrics) is used to detect smelly code components. However, these techniques suffer of subjective interpretation, low agreement between detectors, and threshold dependability. To overcome these limitations, previouswork applied Machine Learning techniques that can learn from previous datasets without needing any threshold definition. However, more recent work has shown that Machine Learning is not always suitable for code smell detection due to the highly unbalanced nature of the problem. In this study we investigate several approaches able to mitigate data unbalancing issues to understand their impact on MLbased approaches for code smell detection. Our findings highlight a number of limitations and open issues with respect to the usage of data balancing in ML-based code smell detection. © 2019 Association for Computing Machinery.","Code Smells; Data Balancing; Machine Learning","Codes (symbols); Computer software selection and evaluation; Learning algorithms; Learning systems; Machine learning; Odors; Quality control; Applied machine learning; Code components; Code metrics; Code smell; Process metrics; Software Quality; Technical debts; Balancing","0015718F","This work was partially supported by the Excellence of Science Project SECO-Assist (0015718F, FWO - Vlaanderen and F.R.S.-FNRS).",,,,,,,,,,,"Fontana F.A.Walter B.Ampatzoglou A.Palomba F.Perrouin G.Acher M.Cordy M.Devroey X.","Association for Computing Machinery, Inc",,9781450368551,,,"English","MaLTeSQuE - Proc. ACM SIGSOFT Int. Workshop Mach. Learn. Tech. Softw. Qual. Eval., co-located ESEC/FSE",Conference Paper,"Final","",Scopus,2-s2.0-85076433758
"Garousi V., Pfahl D., Fernandes J.M., Felderer M., Mäntylä M.V., Shepherd D., Arcuri A., Coşkunçay A., Tekinerdogan B.","13408954200;6603033193;7201540270;24832720900;7006843663;7201684174;23097099900;56426408500;15761578600;","Characterizing industry-academia collaborations in software engineering: evidence from 101 projects",2019,"Empirical Software Engineering","24","4",,"2540","2602",,19,"10.1007/s10664-019-09711-y","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85064827278&doi=10.1007%2fs10664-019-09711-y&partnerID=40&md5=bbc575e3c8c29234c2a9cd4e6f40689c","Information Technology Group, Wageningen University, Wageningen, Netherlands; Institute of Computer Science, University of Tartu, Tartu, Estonia; Department of Electrical and Computer Engineering, University of Calgary, Calgary, Canada; Department Informatics / ALGORITMI Centre, University of Minho, Braga, Portugal; University of Innsbruck, Innsbruck, Austria; Blekinge Institute of Technology, Karlskrona, Sweden; M3S, Faculty of Information Technology and Electrical Engineering, University of Oulu, Oulu, Finland; ABB Corporate Research, Raleigh, NC, United States; Kristiania University College, Oslo, Norway; Computer Engineering Department, Ataturk University, Erzurum, Turkey","Garousi, V., Information Technology Group, Wageningen University, Wageningen, Netherlands; Pfahl, D., Institute of Computer Science, University of Tartu, Tartu, Estonia, Department of Electrical and Computer Engineering, University of Calgary, Calgary, Canada; Fernandes, J.M., Department Informatics / ALGORITMI Centre, University of Minho, Braga, Portugal; Felderer, M., University of Innsbruck, Innsbruck, Austria, Blekinge Institute of Technology, Karlskrona, Sweden; Mäntylä, M.V., M3S, Faculty of Information Technology and Electrical Engineering, University of Oulu, Oulu, Finland; Shepherd, D., ABB Corporate Research, Raleigh, NC, United States; Arcuri, A., Kristiania University College, Oslo, Norway; Coşkunçay, A., Computer Engineering Department, Ataturk University, Erzurum, Turkey; Tekinerdogan, B., Information Technology Group, Wageningen University, Wageningen, Netherlands","Research collaboration between industry and academia supports improvement and innovation in industry and helps ensure the industrial relevance of academic research. However, many researchers and practitioners in the community believe that the level of joint industry-academia collaboration (IAC) projects in Software Engineering (SE) research is relatively low, creating a barrier between research and practice. The goal of the empirical study reported in this paper is to explore and characterize the state of IAC with respect to industrial needs, developed solutions, impacts of the projects and also a set of challenges, patterns and anti-patterns identified by a recent Systematic Literature Review (SLR) study. To address the above goal, we conducted an opinion survey among researchers and practitioners with respect to their experience in IAC. Our dataset includes 101 data points from IAC projects conducted in 21 different countries. Our findings include: (1) the most popular topics of the IAC projects, in the dataset, are: software testing, quality, process, and project managements; (2) over 90% of IAC projects result in at least one publication; (3) almost 50% of IACs are initiated by industry, busting the myth that industry tends to avoid IACs; and (4) 61% of the IAC projects report having a positive impact on their industrial context, while 31% report no noticeable impacts or were “not sure”. To improve this situation, we present evidence-based recommendations to increase the success of IAC projects, such as the importance of testing pilot solutions before using them in industry. This study aims to contribute to the body of evidence in the area of IAC, and benefit researchers and practitioners. Using the data and evidence presented in this paper, they can conduct more successful IAC projects in SE by being aware of the challenges and how to overcome them, by applying best practices (patterns), and by preventing anti-patterns. © 2019, The Author(s).","Anti-patterns; Best practices; Challenges; Empirical study; Evidence; Industry-academia collaborations; Patterns; Software engineering","Industrial research; Software engineering; Software testing; Statistical tests; Anti-patterns; Best practices; Challenges; Empirical studies; Evidence; Patterns; Project management","IUT20-55, UID/CEC/00319/2013; Fuel Cell Technologies Program, FCT; Eesti Teadusagentuur, ETAg; Academy of Finland: ITEA3 / TEKES; Tekes; Norges Forskningsråd: 274385","The authors would like to thank the researchers and practitioners who participated in this survey. João M. Fernandes was supported by FCT (Fundação para a Ciência e Tecnologia) within the Project Scope UID/CEC/00319/2013. Dietmar Pfahl was supported by the institutional research grant IUT20-55 of the Estonian Research Council. Andrea Arcuri was supported by the Research Council of Norway (grant agreement No 274385). Mika Mäntylä was partially supported by Academy of Finland grant and ITEA3 / TEKES grant.","The authors would like to thank the researchers and practitioners who participated in this survey. Jo?o M. Fernandes was supported by FCT (Funda??o para a Ci?ncia e Tecnologia) within the Project Scope UID/CEC/00319/2013. Dietmar Pfahl was supported by the institutional research grant IUT20-55 of the Estonian Research Council. Andrea Arcuri was supported by the Research Council of Norway (grant agreement No 274385). Mika M?ntyl? was partially supported by Academy of Finland grant and ITEA3 / TEKES grant.",,,,,,,,,"Garousi, V.; Information Technology Group, Netherlands; email: vahid.garousi@wur.nl",,"Springer New York LLC",13823256,,ESENF,,"English","Empir Software Eng",Article,"Final","All Open Access, Hybrid Gold, Green",Scopus,2-s2.0-85064827278
"Jones E.A., Shuman A.G., Egleston B.L., Liu J.C.","57208146803;16205329600;11939480200;37076038300;","Common Pitfalls of Head and Neck Research Using Cancer Registries",2019,"Otolaryngology - Head and Neck Surgery (United States)","161","2",,"245","250",,8,"10.1177/0194599819838823","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85063961088&doi=10.1177%2f0194599819838823&partnerID=40&md5=447be45424a5b54cc517b74bded2ff6c","Department of Otolaryngology, Lewis Katz School of Medicine of Temple University, Philadelphia, PA, United States; Department of Otolaryngology–Head & Neck Surgery, University of Michigan, Ann Arbor, MI, United States; Biostatistics and Bioinformatics Facility, Fox Chase Cancer Center, Temple University Health System, Philadelphia, PA, United States; Department of Surgical Oncology, Fox Chase Cancer Center, Philadelphia, PA, United States","Jones, E.A., Department of Otolaryngology, Lewis Katz School of Medicine of Temple University, Philadelphia, PA, United States; Shuman, A.G., Department of Otolaryngology–Head & Neck Surgery, University of Michigan, Ann Arbor, MI, United States; Egleston, B.L., Biostatistics and Bioinformatics Facility, Fox Chase Cancer Center, Temple University Health System, Philadelphia, PA, United States; Liu, J.C., Department of Otolaryngology, Lewis Katz School of Medicine of Temple University, Philadelphia, PA, United States, Department of Surgical Oncology, Fox Chase Cancer Center, Philadelphia, PA, United States","Objective: To highlight common pitfalls observed in scientific research derived from national cancer registries, predominantly the Survival, Epidemiology, and End Results Program and the National Cancer Database. Data Sources: Literature review and expert opinion. Review Methods: This state-of-the-art review consolidates the literature with editorial experiences describing how and why statistically flawed studies are usually rejected for publication, highlighting common errors in submitted articles employing national cancer registries. Conclusions: Pitfalls were identified in 2 major areas—design and data analysis. Design pitfalls included unbalanced cohorts, uncontrolled covariates, and flawed oncologic variables. Analytical pitfalls included incorrect application of univariate analyses, inclusion of inaccurate data, and inclusion of stage IVc disease in curative survival analysis. Additional limitations of database studies were identified, including absence of patient-related outcomes, hypothesis-generating vs practice-changing implications, and inability to differentiate between overall survival and disease-specific survival. Implications for Practice: Methodological strategies are suggested to ensure careful analytical design and appropriate interpretation. Although national cancer registries provide a wealth of data, researchers must remain vigilant when designing studies and analyzing these data sets. Inherent design flaws raise considerable problems with interpretation; however, when analyzed judiciously, registries can lead to a better understanding of cancer outcomes. © American Academy of Otolaryngology–Head and Neck Surgery Foundation 2019.","cancer registry; data analysis; editorial experiences; errors; guidelines; head and neck cancer; NCDB; pitfalls; SEER; statistical flaws; study design; submission; unbalanced","head and neck tumor; human; medical research; procedures; register; Biomedical Research; Head and Neck Neoplasms; Humans; Registries","National Cancer Institute, NCI: P30CA006927",,,,,,,,,,,"Liu, J.C.; Department of Otolaryngology, United States; email: Jeffrey.Liu@temple.edu",,"SAGE Publications Inc.",01945998,,OTOLD,"30939098","English","Otolaryngol. Head Neck Surg.",Review,"Final","All Open Access, Green",Scopus,2-s2.0-85063961088
"Hadj-Kacem M., Bouassida N.","57211276825;6506761943;","Deep Representation Learning for Code Smells Detection using Variational Auto-Encoder",2019,"Proceedings of the International Joint Conference on Neural Networks","2019-July",,"8851854","","",,10,"10.1109/IJCNN.2019.8851854","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85073195905&doi=10.1109%2fIJCNN.2019.8851854&partnerID=40&md5=2eaf6624f11a6ef208211dabcb36df5f","Mir@cl Laboratory, Sfax University, Sfax, Tunisia","Hadj-Kacem, M., Mir@cl Laboratory, Sfax University, Sfax, Tunisia; Bouassida, N., Mir@cl Laboratory, Sfax University, Sfax, Tunisia","Detecting code smells is an important research problem in the software maintenance. It assists the subsequent steps of the refactoring process so as to improve the quality of the software system. However, most of existing approaches have been limited to the use of structural information. There have been few researches to detect code smells using semantic information although its proven effectiveness in many software engineering problems. In addition, they do not capture entirely the semantic embedded in the source code. This paper attempts to fill this gap by proposing a semantic-based approach that detects bad smells which are scattered at different levels of granularity in the source code. To this end, we use an Abstract Syntax Tree with a Variational Auto-Encoder in the detection of three code smells. The code smells are Blob, Feature Envy and Long Method. We have performed our experimental evaluation on nine open-source projects and the results have achieved a considerable overall accuracy. To further evaluate the performance of our approach, we compare our results with a state-of-the-art method on the same publicly available dataset. © 2019 IEEE.",,"Codes (symbols); Information use; Odors; Open source software; Semantics; Signal encoding; Trees (mathematics); Abstract Syntax Trees; Experimental evaluation; Open source projects; Overall accuracies; Research problems; Semantic information; State-of-the-art methods; Structural information; Deep learning",,,,,,,,,,,,,,"Institute of Electrical and Electronics Engineers Inc.",,9781728119854,85OFA,,"English","Proc Int Jt Conf Neural Networks",Conference Paper,"Final","",Scopus,2-s2.0-85073195905
"Jesudoss A., Maneesha S., Lakshmi Naga Durga T.","56553329100;57216610812;57216615126;","Identification of code smell using machine learning",2019,"2019 International Conference on Intelligent Computing and Control Systems, ICCS 2019",,,"9065317","54","58",,3,"10.1109/ICCS45141.2019.9065317","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85084085773&doi=10.1109%2fICCS45141.2019.9065317&partnerID=40&md5=adb39e5d7f87fbbfb1b7e0a34875ace6","Sathyabama Institute of Science and Technology, Department of Computer Science and Engineering, Chennai, Tamil Nadu, India, India","Jesudoss, A., Sathyabama Institute of Science and Technology, Department of Computer Science and Engineering, Chennai, Tamil Nadu, India, India; Maneesha, S., Sathyabama Institute of Science and Technology, Department of Computer Science and Engineering, Chennai, Tamil Nadu, India, India; Lakshmi Naga Durga, T., Sathyabama Institute of Science and Technology, Department of Computer Science and Engineering, Chennai, Tamil Nadu, India, India","Code smells are used to improve the quality of the software. Code smell detection detects the code problems like long method, large class, lazy class, long parameter list, feature envy, primitive obsession detector and too many literal detectors present in the code. In this work, two algorithms are used namely Support Vector Machine (SVM) and Random Forest algorithm. Support Vector Machine acts as classifier and the Random Forest algorithm are used for predicting the range of data. Decision making technique is used to identify the various problems present in the code. Code smell detection is a testing tool and it is mainly used by the developers, when the size of the code becomes unmanageable for manual detection. It also identifies deeper problems like syntax error, runtime error. It gives the output by analyzing the code in six different modules in this work. © 2019 IEEE.","Bad Smells; Bloated Code Detector; Code Smell; Feature Envy; Large Class; Lazy Class Detector; Long method; Primitive Obsession Detector","Control systems; Decision making; Decision trees; Intelligent computing; Random forests; Software quality; Support vector machines; Code smell; Random forest algorithm; Run-time errors; Syntax errors; Testing tools; Codes (symbols)",,,,,,,,,,,,,,"Institute of Electrical and Electronics Engineers Inc.",,9781538681138,,,"English","Int. Conf. Intell. Comput. Control Syst., ICCS",Conference Paper,"Final","",Scopus,2-s2.0-85084085773
"Sae-Lim N., Hayashi S., Saeki M.","57190404685;13204497300;7202299264;","Toward proactive refactoring: An exploratory study on decaying modules",2019,"Proceedings - 2019 IEEE/ACM 3rd International Workshop on Refactoring, IWOR 2019",,,"8844415","39","46",,3,"10.1109/IWoR.2019.00015","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85073435706&doi=10.1109%2fIWoR.2019.00015&partnerID=40&md5=e10e2a5c9022551b1016cdc78d9b9a95","School of Computing, Tokyo Institute of Technology, Tokyo, 152-8552, Japan","Sae-Lim, N., School of Computing, Tokyo Institute of Technology, Tokyo, 152-8552, Japan; Hayashi, S., School of Computing, Tokyo Institute of Technology, Tokyo, 152-8552, Japan; Saeki, M., School of Computing, Tokyo Institute of Technology, Tokyo, 152-8552, Japan","Source code quality is often measured using code smell, which is an indicator of design flaw or problem in the source code. Code smells can be detected using tools such as static analyzer that detects code smells based on source code metrics. Further, developers perform refactoring activities based on the result of such detection tools to improve source code quality. However, such approach can be considered as reactive refactoring, i.e., developers react to code smells after they occur. This means that developers first suffer the effects of low quality source code (e.g., low readability and understandability) before they start solving code smells. In this study, we focus on proactive refactoring, i.e., refactoring source code before it becomes smelly. This approach would allow developers to maintain source code quality without having to suffer the impact of code smells. To support the proactive refactoring process, we propose a technique to detect decaying modules, which are non-smelly modules that are about to become smelly. We present empirical studies on open source projects with the aim of studying the characteristics of decaying modules. Additionally, to facilitate developers in the refactoring planning process, we perform a study on using a machine learning technique to predict decaying modules and report a factor that contributes most to the performance of the model under consideration. © 2019 IEEE.","Code quality; Code smell; Refactoring","Computer programming languages; Learning systems; Odors; Open source software; Code quality; Code smell; Exploratory studies; Machine learning techniques; Open source projects; Refactorings; Source code metrics; Source code qualities; Codes (symbols)","Japan Society for the Promotion of Science, JSPS: JP15H02683, JP15H02685, JP15K15970, JP18K11238","ACKNOWLEDGMENTS This work was partly supported by JSPS Grants-in-Aid for Scientific Research Numbers JP18K11238, JP15K15970, JP15H02683, and JP15H02685.","This work was partly supported by JSPS Grants-in-Aid for Scientific Research Numbers JP18K11238, JP15K15970, JP15H02683, and JP15H02685.",,,,,,,,,,,"Institute of Electrical and Electronics Engineers Inc.",,9781728122700,,,"English","Proc. - IEEE/ACM Int. Workshop Refactoring, IWOR",Conference Paper,"Final","",Scopus,2-s2.0-85073435706
"Rubin J., Henniche A.N., Moha N., Bouguessa M., Bousbia N.","57211058797;57211060878;18038269700;6506692442;35089975500;","Sniffing android code smells: An association rules mining-based approach",2019,"Proceedings - 2019 IEEE/ACM 6th International Conference on Mobile Software Engineering and Systems, MOBILESoft 2019",,,"8816887","123","127",,7,"10.1109/MOBILESoft.2019.00025","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85072524983&doi=10.1109%2fMOBILESoft.2019.00025&partnerID=40&md5=003a1e5c6839df97bf2fae70f5fff89a","Univeristy of Quebec, Montreal, Canada; Higher National School of Computer Science, Algiers, Algeria","Rubin, J., Univeristy of Quebec, Montreal, Canada; Henniche, A.N., Higher National School of Computer Science, Algiers, Algeria; Moha, N., Univeristy of Quebec, Montreal, Canada; Bouguessa, M., Univeristy of Quebec, Montreal, Canada; Bousbia, N., Higher National School of Computer Science, Algiers, Algeria","Interest in mobile applications (mobile apps) has grown significantly in recent years and has become an important part of the software development market. Indeed, mobile apps become more and more complex and evolve constantly, while their development time decreases. This complexity and time pressure might lead developers to adopt bad design and implementation choices, which are known as code smells. Code smells in mobile apps could lead to performance issues such as overconsumption of hardware resources (CPU, RAM, battery) or even downtime and crashes. Some tools have been proposed for the detection of code smells in Android apps, such as PAPRIKA or ADOCTOR tools. These tools rely on metrics-based detection rules, which are defined manually according to code smell definitions. However, manually defined rules might be inaccurate and subjective because they are based on user interpretations. In this paper, we present a tool-based approach, called FAKIE, which allows the automatic inference of detection rules by analysing code smells data using an association rules algorithm: FPGROWTH. We validated FAKIE by applying it on a manually analysed validation dataset of 48 opensource mobile apps. We were able to generate detection rules for a dozen code smells, with an average F-measure of 0.95. After all of that, we performed an empirical study by applying FAKIE on 2,993 apps downloaded from ANDROZOO, a repository of mobile apps. © 2019 IEEE.","Android; association rules; code smells; detection; mobile applications","Application programs; Association rules; Codes (symbols); Error detection; Inference engines; Mobile computing; Odors; Software design; Android; Association rules mining; Automatic inference; Code smell; Design and implementations; Hardware resources; Mobile applications; Performance issues; Android (operating system)",,,,,,,,,,,,,,"Institute of Electrical and Electronics Engineers Inc.",,9781728133959,,,"English","Proc. - IEEE/ACM Int. Conf. Mob. Softw. Eng. Syst., MOBILESoft",Conference Paper,"Final","",Scopus,2-s2.0-85072524983
"Schnappinger M., Osman M.H., Pretschner A., Fietzke A.","57225271803;55596310200;12645083400;57720314500;","Learning a classifier for prediction of maintainability based on static analysis tools",2019,"IEEE International Conference on Program Comprehension","2019-May",,"8813252","243","248",,9,"10.1109/ICPC.2019.00043","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85072319546&doi=10.1109%2fICPC.2019.00043&partnerID=40&md5=72bdcb647a8afcf01d10bc42bfa11312","Technical University of Munich, Munich, Germany; Itestra GmbH, Munich, Germany","Schnappinger, M., Technical University of Munich, Munich, Germany; Osman, M.H., Technical University of Munich, Munich, Germany; Pretschner, A., Technical University of Munich, Munich, Germany; Fietzke, A., Itestra GmbH, Munich, Germany","Static Code Analysis Tools are a popular aid to monitor and control the quality of software systems. Still, these tools only provide a large number of measurements that have to be interpreted by the developers in order to obtain insights about the actual quality of the software. In cooperation with professional quality analysts, we manually inspected source code from three different projects and evaluated its maintainability. We then trained machine learning algorithms to predict the human maintainability evaluation of program classes based on code metrics. The code metrics include structural metrics such as nesting depth, cloning information and abstractions like the number of code smells. We evaluated this approach on a dataset of more than 115,000 Lines of Code. Our model is able to predict up to 81% of the threefold labels correctly and achieves a precision of 80%. Thus, we believe this is a promising contribution towards automated maintainability prediction. In addition, we analyzed the attributes in our created dataset and identified the features with the highest predictive power, i.e. code clones, method length, and the number of alerts raised by the tool Teamscale. This insight provides valuable help for users needing to prioritize tool measurements. © 2019 IEEE.","Code Comprehension; Maintenance Tools; Software Maintenance; Software Quality; Static Code Analysis","Clone cells; Cloning; Codes (symbols); Computer software maintenance; Computer software selection and evaluation; Forecasting; Learning algorithms; Machine learning; Maintainability; Static analysis; Code comprehension; Maintenance tools; Monitor and control; Quality of softwares; Software Quality; Static code analysis; Static code analysis tools; Structural metrics; Quality control",,,,,,,,,,,,,,"IEEE Computer Society",,9781728115191,,,"English","IEEE Int. Conf. Program Comprehension",Conference Paper,"Final","",Scopus,2-s2.0-85072319546
"Pecorelli F., Palomba F., Di Nucci D., De Lucia A.","57210934334;55321369000;57016777600;7003641564;","Comparing heuristic and machine learning approaches for metric-based code smell detection",2019,"IEEE International Conference on Program Comprehension","2019-May",,"8813271","93","104",,51,"10.1109/ICPC.2019.00023","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85072316200&doi=10.1109%2fICPC.2019.00023&partnerID=40&md5=9d90ddc422db8353080db82eb01e152b","University of Salerno, Italy; University of Zurich, Switzerland; Vrije Universiteit Brussel, Belgium","Pecorelli, F., University of Salerno, Italy; Palomba, F., University of Zurich, Switzerland; Di Nucci, D., Vrije Universiteit Brussel, Belgium; De Lucia, A., University of Salerno, Italy","Code smells represent poor implementation choices performed by developers when enhancing source code. Their negative impact on source code maintainability and comprehensibility has been widely shown in the past and several techniques to automatically detect them have been devised. Most of these techniques are based on heuristics, namely they compute a set of code metrics and combine them by creating detection rules; while they have a reasonable accuracy, a recent trend is represented by the use of machine learning where code metrics are used as predictors of the smelliness of code artefacts. Despite the recent advances in the field, there is still a noticeable lack of knowledge of whether machine learning can actually be more accurate than traditional heuristic-based approaches. To fill this gap, in this paper we propose a large-scale study to empirically compare the performance of heuristic-based and machine-learning-based techniques for metric-based code smell detection. We consider five code smell types and compare machine learning models with DECOR, a state-of-the-art heuristic-based approach. Key findings emphasize the need of further research aimed at improving the effectiveness of both machine learning and heuristic approaches for code smell detection: while DECOR generally achieves better performance than a machine learning baseline, its precision is still too low to make it usable in practice. © 2019 IEEE.","Code Smells Detection; Empirical Study; Heuristics; Machine Learning","Computer programming; Heuristic methods; Learning systems; Machine learning; Odors; Code smell; Empirical studies; Heuristic approach; Heuristics; Large-scale studies; Machine learning approaches; Machine learning models; Reasonable accuracy; Codes (symbols)","Schweizerischer Nationalfonds zur Förderung der Wissenschaftlichen Forschung, SNF: PP00P2_170529","Palomba gratefully acknowledge the support of the Swiss National Science Foundation through the SNF Project No. PP00P2_170529.",,,,,,,,,,,,"IEEE Computer Society",,9781728115191,,,"English","IEEE Int. Conf. Program Comprehension",Conference Paper,"Final","",Scopus,2-s2.0-85072316200
[No author name available],[No author id available],"Proceedings - 2019 IEEE/ACM 27th International Conference on Program Comprehension, ICPC 2019",2019,"IEEE International Conference on Program Comprehension","2019-May",,,"","",404,,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-85072306102&partnerID=40&md5=b1405868c0291b88e60138ed6f2c450b",,"","The proceedings contain 40 papers. The topics discussed include: does BLEU score work for code migration?; removal of design problems through refactorings: are we looking at the right symptoms?; comparing heuristic and machine learning approaches for metric-based code smell detection; are static analysis violations really fixed? a closer look at realistic usage of SonarQube; a large-scale empirical study on code-comment inconsistencies; replication can improve prior results: a github study of pull request acceptance; srcPtr: a framework for implementing static pointer analysis approaches; what goes on in your brain when you read and understand code?; sequence coverage directed greybox fuzzing; and towards automated testing of blockchain-based decentralized applications.",,,,,,,,,,,,,,,,"IEEE Computer Society",,9781728115191,,,"English","IEEE Int. Conf. Program Comprehension",Conference Review,"Final","",Scopus,2-s2.0-85072306102
"Bu Y.-F., Liu H., Li G.-J.","57210819057;56862404100;57204144584;","God Class Detection Approach Based on Deep Learning [一种基于深度学习的上帝类检测方法]",2019,"Ruan Jian Xue Bao/Journal of Software","30","5",,"1359","1374",,2,"10.13328/j.cnki.jos.005724","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85071580812&doi=10.13328%2fj.cnki.jos.005724&partnerID=40&md5=3e84cc0b655d54e6680872db2f1bff94","School of Computer Science and Technology, Beijing Institute of Technology, Beijing, 100081, China","Bu, Y.-F., School of Computer Science and Technology, Beijing Institute of Technology, Beijing, 100081, China; Liu, H., School of Computer Science and Technology, Beijing Institute of Technology, Beijing, 100081, China; Li, G.-J., School of Computer Science and Technology, Beijing Institute of Technology, Beijing, 100081, China","God class refers to certain classes that have assumed more than one functionality, which obey the single responsibility principle and consequently impact on the maintainability and intelligibility of software system. Studies, detection and refactoring included, of god class have always attracted research attentions because of its commonness. As a result, a neural network based detection approach is proposed to detect god class code smell. This detection technology not only makes use of common metrics in software, but also exploits the textual information in source code, which is intended to reveal the main roles that the class plays through mining text semantics. In addition, in order to solve the massive labeled data required for supervised deep learning, an approach is proposed to construct labeled data based on open source code. Finally, the proposed approach is evaluated on an open source data set. The result of evaluation shows that the proposed approach outperforms the current method, especially the recall has been greatly improved by 35.58%. © Copyright 2019, Institute of Software, the Chinese Academy of Sciences. All rights reserved.","Code smell; Deep learning; Software refactoring","Codes (symbols); Open source software; Open systems; Semantics; Code smell; Detection approach; Detection technology; Open source datum; Open-source code; Software refactoring; Software systems; Textual information; Deep learning","National Natural Science Foundation of China, NSFC: 61472034, 61690205, 61772071; National Key Research and Development Program of China, NKRDPC: 2016YFB1000801","∗ 基金项目: 国家重点研发计划(2016YFB1000801); 国家自然科学基金(61690205, 61772071, 61472034) Foundation item: National Key Research and Development Program of China (2016YFB1000801); National Natural Science Foundation of China (61690205, 61772071, 61472034) 本文由智能化软件新技术专刊特约编辑申富饶教授和李戈副教授推荐. 收稿时间:?2018-08-31; 修改时间: 2018-10-31; 采用时间: 2018-12-13",,,,,,,,,,"Liu, H.; School of Computer Science and Technology, China; email: liuhui08@bit.edu.cn",,"Chinese Academy of Sciences",10009825,,RUXUE,,"Chinese","Ruan Jian Xue Bao",Article,"Final","",Scopus,2-s2.0-85071580812
"Lenarduzzi V., Saarimaki N., Taibi D.","55348964400;57210642796;55920884000;","On the diffuseness of code technical debt in open source projects",2019,"Proceedings - 2019 IEEE/ACM International Conference on Technical Debt, TechDebt 2019",,,"8786018","98","107",,26,"10.1109/TechDebt.2019.00028","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85064864413&doi=10.1109%2fTechDebt.2019.00028&partnerID=40&md5=5ecf686d362b504daff0ae69036e9d3b","Tampere University, Tampere, Finland","Lenarduzzi, V., Tampere University, Tampere, Finland; Saarimaki, N., Tampere University, Tampere, Finland; Taibi, D., Tampere University, Tampere, Finland","Background. Companies commonly invest majorBackground. Companies commonly invest major effort into removing, respectively not introducing, technical debt issues detected by static analysis tools such as SonarQube, Cast, or Coverity. These tools classify technical debt issues into categories according to severity, and developers commonly pay attention to not introducing issues with a high level of severity that could generate bugs or make software maintenance more difficult. Objective. In this work, we aim to understand the diffuseness of Technical Debt (TD) issues and the speed with which developers remove them from the code if they introduced such an issue. The goal is to understand which type of TD is more diffused and how much attention is paid by the developers, as well as to investigate whether TD issues with a higher level of severity are resolved faster than those with a lower level of severity. We conducted a case study across 78K commits of 33 Java projects from the Apache Software Foundation Ecosystem to investigate the distribution of 1.4M TD items. Results. TD items introduced into the code are mostly related to code smells (issues that can increase the maintenance effort). Moreover, developers commonly remove the most severe issues faster than less severe ones. However, the time needed to resolve issues increases when the level of severity increases (minor issues are removed faster that blocker ones). Conclusion. One possible answer to the unexpected issue of resolution time might be that severity is not correctly defined by the tools. Another possible answer is that the rules at an intermediate severity level could be the ones that technically require more time to be removed. The classification of TD items, including their severity and type, require thorough investigation from a research point of view.effort into removing, respectively not introducing, technical debtissues detected by static analysis tools such as SonarQube, Cast, or Coverity. These tools classify technical debt issues intocategories according to severity, and developers commonly payattention to not introducing issues with a high level of severitythat could generate bugs or make software maintenance moredifficult. Objective. In this work, we aim to understand the diffuseness ofTechnical Debt (TD) issues and the speed with which developersremove them from the code if they introduced such an issue. The goal is to understand which type of TD is more diffusedand how much attention is paid by the developers, as well asto investigate whether TD issues with a higher level of severityare resolved faster than those with a lower level of severity. Weconducted a case study across 78K commits of 33 Java projectsfrom the Apache Software Foundation Ecosystem to investigatethe distribution of 1.4M TD items. Results. TD items introduced into the code are mostly relatedto code smells (issues that can increase the maintenance effort). Moreover, developers commonly remove the most severe issuesfaster than less severe ones. However, the time needed to resolveissues increases when the level of severity increases (minor issuesare removed faster that blocker ones). Conclusion. One possible answer to the unexpected issue ofresolution time might be that severity is not correctly definedby the tools. Another possible answer is that the rules at anintermediate severity level could be the ones that technicallyrequire more time to be removed. The classification of TD items, including their severity and type, require thorough investigationfrom a research point of view. © 2019 IEEE.","SonarQube; Technical Debt; Violations","Codes (symbols); Computer software maintenance; Ecosystems; Java programming language; Odors; Open source software; Open systems; Program debugging; Apache software foundations; Code smell; Maintenance efforts; Open source projects; Resolution time; SonarQube; Technical debts; Violations; Static analysis",,,,,,,,,,,,,,"Institute of Electrical and Electronics Engineers Inc.",,9781728133713,,,"English","Proc. - IEEE/ACM Int. Conf. Tech. Debt, TechDebt",Conference Paper,"Final","",Scopus,2-s2.0-85064864413
[No author name available],[No author id available],"ACM International Conference Proceeding Series",2019,"ACM International Conference Proceeding Series",,,,"","",272,,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-85123041403&partnerID=40&md5=72395f747b6f5b409ae57b979a84c042",,"","The proceedings contain 52 papers. The topics discussed include: comparative study for detecting mobile application's anti-patterns; estimating change effort using a combination of change impact analysis technique with function point analysis; to enhance effectiveness of crowdsource software testing by applying personality types; ontology-based smart attendance using android mobile application in higher institution; objective and subjective metrics meant for evaluating quality of social web applications; brainstorming versus a scenario-based approach: results of an empirical study; some serious deliberations and reflections on the significance of non-functional requirements for improving the quality of software; to apply data mining for classification of crowd sourced software requirements; and a framework for integrating software design patterns with game design framework.",,,,,,,,,,,,,,,,"Association for Computing Machinery",,9781450361057,,,"English","ACM Int. Conf. Proc. Ser.",Conference Review,"Final","",Scopus,2-s2.0-85123041403
"Vale G., Fernandes E., Figueiredo E.","56023110600;37123675100;57213806535;","On the proposal and evaluation of a benchmark-based threshold derivation method",2019,"Software Quality Journal","27","1",,"275","306",,13,"10.1007/s11219-018-9405-y","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85063385452&doi=10.1007%2fs11219-018-9405-y&partnerID=40&md5=64fa7025e93eb1c1ad52ac007c778756","Department of Computer Science, Federal University of Minas Gerais (UFMG), Belo Horizonte, Brazil; Department of Computer Science, University of Passau, Passau, Germany; Informatics Department, Pontifical Catholic University of Rio de Janeiro (PUC-Rio), Rio de Janeiro, Brazil","Vale, G., Department of Computer Science, Federal University of Minas Gerais (UFMG), Belo Horizonte, Brazil, Department of Computer Science, University of Passau, Passau, Germany; Fernandes, E., Department of Computer Science, Federal University of Minas Gerais (UFMG), Belo Horizonte, Brazil, Informatics Department, Pontifical Catholic University of Rio de Janeiro (PUC-Rio), Rio de Janeiro, Brazil; Figueiredo, E., Department of Computer Science, Federal University of Minas Gerais (UFMG), Belo Horizonte, Brazil","Software-intensive systems have been growing in both size and complexity. Consequently, developers need better support for measuring and controlling the software quality. In this context, software metrics aim at quantifying different software quality aspects. However, the effectiveness of measurement depends on the definition of reliable metric thresholds, i.e., numbers that characterize a metric value as critical given a quality aspect. In fact, without proper metric thresholds, it might be difficult for developers to indicate problematic software components for correction, for instance. Based on a literature review, we have found several existing methods for deriving metric thresholds and observed their evolution. Such evolution motivated us to propose a new method that incorporates the best of the existing methods. In this paper, we propose a novel benchmark-based method for deriving metric thresholds. We assess our method, called Vale’s method, using a set of metric thresholds derived with the support of our method, aimed at composing detection strategies for two well-known code smells, namely god class and lazy class. For this purpose, we analyze three benchmarks composed of multiple software product lines. In addition, we demonstrate our method in practice by applying it to a benchmark composed of 103 Java open-source software systems. In the evaluation, we compare Vale’s method to two state-of-the-practice threshold derivation methods selected as a baseline, which are Lanza’s method and Alves’ method. Our results suggest that the proposed method provides more realistic and reliable thresholds, with better recall and precision in the code smell detection, when compared to both baseline methods. © 2018, Springer Science+Business Media, LLC, part of Springer Nature.","Benchmark; Code smell; Software metric; Software product lines; Threshold","Benchmarking; Codes (symbols); Computer software selection and evaluation; Open source software; Quality control; Code smell; Literature reviews; Open source software systems; Recall and precision; Software intensive systems; Software metrices; Software Product Line; Threshold; Open systems","Coordenação de Aperfeiçoamento de Pessoal de Nível Superior, CAPES; Conselho Nacional de Desenvolvimento Científico e Tecnológico, CNPq: 290136/ 2015-6, 424340/2016-0; Fundação de Amparo à Pesquisa do Estado de Minas Gerais, FAPEMIG: PPM-00651-17","Acknowledgments This work was partially supported by CAPES, CNPq (grant 424340/2016-0 and 290136/ 2015-6), and FAPEMIG (grant PPM-00651-17).",,,,,,,,,,"Vale, G.; Department of Computer Science, Brazil; email: vale@fim.uni-passau.de",,"Springer New York LLC",09639314,,,,"English","Softw. Qual. J.",Review,"Final","",Scopus,2-s2.0-85063385452
"Gupta H., Kumar L., Neti L.B.M.","57192105009;56120791500;57192228561;","An empirical framework for code smell prediction using extreme learning machine∗",2019,"IEMECON 2019 - 9th Annual Information Technology, Electromechanical Engineering and Microelectronics Conference",,,"8877082","189","195",,9,"10.1109/IEMECONX.2019.8877082","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85074957138&doi=10.1109%2fIEMECONX.2019.8877082&partnerID=40&md5=a93df6605574b0eab247679ec1d9d7fd","BITS Pilani Hyderabad Campus, India","Gupta, H., BITS Pilani Hyderabad Campus, India; Kumar, L., BITS Pilani Hyderabad Campus, India; Neti, L.B.M., BITS Pilani Hyderabad Campus, India","The software containing code smells indicates the violation of standard design and coding practices by developer during the development of the software system. Recent empirical studies observed that classes having code smells have higher probability of change proneness or fault proneness with respect to classes having no code smells [1]. The effort of removing bugs due to code smells increases exponentially if the smells are not identified during the earlier phases of software development. The code smell prediction using source code metrics can be used in starting phases of software development life cycle to reduce the maintenance and testing effort of software and also help in improving the quality of the software. The work in this paper empirically investigates and evaluates different classification techniques, feature selection techniques, and data sampling techniques to handle imbalance data in predicting 7 different types of code smell. The conclusion of this research is assessed over 629 application packages. The experimental finding confirms the estimating capability of different classifiers, feature selection, and data imbalance techniques for developing code smell prediction models. Our analysis also reveals that the models developed using one technique are superior than the models developed using other techniques. © 2019 IEEE.","Code Smell; Feature selection; Machine Learning; Software Engineering; Source Code Metrics","Classification (of information); Codes (symbols); Engineering education; Feature extraction; Forecasting; Learning systems; Life cycle; Machine learning; Microelectronics; Odors; Program debugging; Software engineering; Software testing; Change proneness; Classification technique; Code smell; Empirical studies; Extreme learning machine; Selection techniques; Software development life cycle; Source code metrics; Software design",,,,,,,,,,,,,"Chakrabarti S.Mukherjee A.","Institute of Electrical and Electronics Engineers Inc.",,9781538693254,,,"English","IEMECON - Annu. Inf. Technol., Electromechanical Eng. Microelectron. Conf.",Conference Paper,"Final","",Scopus,2-s2.0-85074957138
"Tummalapalli S., Kumar L., Neti L.B.M.","57190253628;56120791500;57192228561;","An empirical framework for web service anti-pattern prediction using machine learning techniques",2019,"IEMECON 2019 - 9th Annual Information Technology, Electromechanical Engineering and Microelectronics Conference",,,"8877008","137","143",,5,"10.1109/IEMECONX.2019.8877008","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85074923411&doi=10.1109%2fIEMECONX.2019.8877008&partnerID=40&md5=fd1e59dd7dee8fdbe6b6ed373d429e24","BITS Pilani Hyderabad Campus, India","Tummalapalli, S., BITS Pilani Hyderabad Campus, India; Kumar, L., BITS Pilani Hyderabad Campus, India; Neti, L.B.M., BITS Pilani Hyderabad Campus, India","In todays software industries, the concepts of Web Services are applied to design and develop distributed software system. These distributed software system can be designed and developed by integrating different Web Services provided by different parties. Similar to other software systems, Web Services based system also suffers from bad or poor design i.e., bad design selection, anti-pattern, poor planning etc.. Early prediction of anti-patterns can help developer and tester in fixing design issue and also effectively utilize the resources. The work in this paper empirically investigates and evaluates six classification techniques, 8 feature selection techniques (7 feature ranking techniques and 1 feature subset evaluation technique), and 1 data sampling technique to handle imbalance data in predicting 5 different types of anti-patterns. These all techniques are validated on 226 real-world web-services across several domains. The performance of the developed models using these techniques are evaluated using AUC value. Our analysis reveals that the model developed using these techniques able to predict different anti-patterns using source code metrics. Our analysis also reveals that the best feature selection technique is OneR, data sample is better that without sampling and Random Forest is best classification algorithm for anti-pattern predictions. © 2019 IEEE.","Aggregation Measures; Anti-Patterns; Feature selection; Machine Learning; Software Engineering; Source Code Metrics; Web Services","Computer software; Decision trees; Engineering education; Feature extraction; Forecasting; Learning systems; Machine learning; Microelectronics; Software engineering; Websites; Anti-patterns; Classification algorithm; Classification technique; Design selections; Distributed software system; Machine learning techniques; Selection techniques; Source code metrics; Web services",,,,,,,,,,,,,"Chakrabarti S.Mukherjee A.","Institute of Electrical and Electronics Engineers Inc.",,9781538693254,,,"English","IEMECON - Annu. Inf. Technol., Electromechanical Eng. Microelectron. Conf.",Conference Paper,"Final","",Scopus,2-s2.0-85074923411
"Fregnan E., Baum T., Palomba F., Bacchelli A.","57204930710;56576027900;55321369000;25924697100;","A survey on software coupling relations and tools",2019,"Information and Software Technology","107",,,"159","178",,13,"10.1016/j.infsof.2018.11.008","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85057992692&doi=10.1016%2fj.infsof.2018.11.008&partnerID=40&md5=04593774ea40424be63fdf90dbe398f5","University of Zurich, Switzerland; Leibniz Universität Hannover, Germany","Fregnan, E., University of Zurich, Switzerland; Baum, T., Leibniz Universität Hannover, Germany; Palomba, F., University of Zurich, Switzerland; Bacchelli, A., University of Zurich, Switzerland","Context: Coupling relations reflect the dependencies between software entities and can be used to assess the quality of a program. For this reason, a vast amount of them has been developed, together with tools to compute their related metrics. However, this makes the coupling measures suitable for a given application challenging to find. Goals: The first objective of this work is to provide a classification of the different kinds of coupling relations, together with the metrics to measure them. The second consists in presenting an overview of the tools proposed until now by the software engineering academic community to extract these metrics. Method: This work constitutes a systematic literature review in software engineering. To retrieve the referenced publications, publicly available scientific research databases were used. These sources were queried using keywords inherent to software coupling. We included publications from the period 2002 to 2017 and highly cited earlier publications. A snowballing technique was used to retrieve further related material. Results: Four groups of coupling relations were found: structural, dynamic, semantic and logical. A fifth set of coupling relations includes approaches too recent to be considered an independent group and measures developed for specific environments. The investigation also retrieved tools that extract the metrics belonging to each coupling group. Conclusion: This study shows the directions followed by the research on software coupling: e.g., developing metrics for specific environments. Concerning the metric tools, three trends have emerged in recent years: use of visualization techniques, extensibility and scalability. Finally, some coupling metrics applications were presented (e.g., code smell detection), indicating possible future research directions. Public preprint [https://doi.org/10.5281/zenodo.2002001]. © 2018 Elsevier B.V.","Coupling relations; Software engineering; Software metrics","Semantics; Software engineering; Academic community; Coupling relation; Scientific researches; Software coupling; Software entities; Software metrics; Systematic literature review; Visualization technique; Object oriented programming","Schweizerischer Nationalfonds zur Förderung der Wissenschaftlichen Forschung, SNF; Schweizerischer Nationalfonds zur Förderung der Wissenschaftlichen Forschung, SNF: PP00P2_170529","E. Fregnan, F. Palomba, and A. Bacchelli gratefully acknowledge the support of the Swiss National Science Foundation through the SNF Project No. PP00P2_170529.",,,,,,,,,,"Fregnan, E.; University of ZurichSwitzerland; email: fregnan@ifi.uzh.ch",,"Elsevier B.V.",09505849,,ISOTE,,"English","Inf Software Technol",Review,"Final","All Open Access, Green",Scopus,2-s2.0-85057992692
"Ubayawardana G.M., Karunaratna D.D.","57206889631;7801381621;","Bug prediction model using code smells",2019,"18th International Conference on Advances in ICT for Emerging Regions, ICTer 2018 - Proceedings",,,"8615550","70","77",,4,"10.1109/ICTER.8615550","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85062071925&doi=10.1109%2fICTER.8615550&partnerID=40&md5=96f2692a25ba1fc818693adb041196dd","University of Colombo, School of Computing, No 35 Reid Avenue, Colombo, 00700, Sri Lanka","Ubayawardana, G.M., University of Colombo, School of Computing, No 35 Reid Avenue, Colombo, 00700, Sri Lanka; Karunaratna, D.D., University of Colombo, School of Computing, No 35 Reid Avenue, Colombo, 00700, Sri Lanka","The term 'Code Smells' was first coined in the book Refactoring: Improving the design of existing code by M Fowler in 1999. Code smells are poor design choices which have the potential to cause an error or failure in a computer program. The objective of this study is to use code smells as a candidate metric to build a bug prediction model. In this study we have built a bug prediction model using both source code metrics and code smell based metrics proposed in the literature. We used Naive Bayes, Random Forest and Logistic Regression as our candidate algorithms to build the model. We have trained our model against multiple versions of 13 different Java based open source projects. The trained model was used to predict bugs in a particular version of a project, within a particular project and among different projects. We were able to demonstrate, that code smell based metrics can significantly improve the accuracy of a bug prediction model when integrated with source code metrics. Random Forest algorithm based model showed higher accuracy within a version, within a project and among projects when compared to other algorithms. © 2018 IEEE.","Bug prediction; Code smells; Source code metrics","Computer programming languages; Decision trees; Forecasting; Odors; Open source software; Bug predictions; Code smell; Logistic regressions; Open source projects; Random forest algorithm; Random forests; Refactorings; Source code metrics; Codes (symbols)",,,,,,,,,,,,,,"Institute of Electrical and Electronics Engineers Inc.",,9781538673515,,,"English","Int. Conf. Adv. ICT Emerg. Reg., ICTer - Proc.",Conference Paper,"Final","",Scopus,2-s2.0-85062071925
[No author name available],[No author id available],"CEUR Workshop Proceedings",2019,"CEUR Workshop Proceedings","2520",,,"","",84,,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-85077575846&partnerID=40&md5=c150a18f06e14911dc71de1f4a36bf05",,"","The proceedings contain 9 papers. The topics discussed include: A curated dataset of microservices-based systems; but do commit messages matter? an empirical association analysis with technical debt; migrating learning management systems towards microservice architecture; research on software project developer behaviors with K-means clustering analysis; algorithm for detecting antipatterns in microservices projects; machine learning and SonarQube KPIs to predict increasing bug resolution times; managing open-source microservices projects; and semantic patterns extraction of code smells: retrieving the solutions of bugs.",,,,,,,,,,,,,,,"Saarimaki N.Lenarduzzi V.Taibi D.","CEUR-WS",16130073,,,,"English","CEUR Workshop Proc.",Conference Review,"Final","",Scopus,2-s2.0-85077575846
"Li X.","56203689000;","Research on software project developer behaviors with K-means clustering analysis",2019,"CEUR Workshop Proceedings","2520",,,"54","61",,1,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-85077510435&partnerID=40&md5=70bfd4c4b4d7d9d7a5a883c200ea9df0","Tampere University, Kalevantie 4, Tampere, 33100, Finland","Li, X., Tampere University, Kalevantie 4, Tampere, 33100, Finland","Research on technical debt and community smell have drawn increasing attention in the academia of software engineering in the latest decade. Furthermore, data mining methods have been widely applied in the very domain as well. However, limited studies have contribute to the understanding of software project community using data mining methods, especially regarding the analysis of developer behaviors. Using K-means clustering, this study provides a preliminary analysis on the classification of open source software project developers based on the statistics of their behaviors related to technical debts. The results show that developers can be categorized into three different behavior groups, including, Veterans, Vulnerability Creators, and Fault Inducers/ Commoners. Copyright © 2019 for this paper by its authors.","Clustering; Code smell; Community smell; Data mining; Developer behaviors; K-means; Technical debt","Computer software maintenance; Data mining; Open source software; Open systems; Clustering; Code smell; Community smell; Developer behavior; K-means; Technical debts; K-means clustering",,,,,,,,,,,,"Li, X.; Tampere University, Kalevantie 4, Finland; email: xiaozhou.li@tuni.fi","Saarimaki N.Lenarduzzi V.Taibi D.","CEUR-WS",16130073,,,,"English","CEUR Workshop Proc.",Conference Paper,"Final","",Scopus,2-s2.0-85077510435
"Gulabovska H., Porkoláb Z.","57212345711;22433504100;","Survey on static analysis tools of python programs",2019,"CEUR Workshop Proceedings","2508",,"3","","",,1,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-85076490291&partnerID=40&md5=3e4616d10a4a4ee3f4564b54f33431c2","Eötvös Loránd University, Faculty of Informatics, Dept. of Programming Languages and Compilers, Pázmány Péter sétány 1/C, Budapest, H-1177, Hungary","Gulabovska, H., Eötvös Loránd University, Faculty of Informatics, Dept. of Programming Languages and Compilers, Pázmány Péter sétány 1/C, Budapest, H-1177, Hungary; Porkoláb, Z., Eötvös Loránd University, Faculty of Informatics, Dept. of Programming Languages and Compilers, Pázmány Péter sétány 1/C, Budapest, H-1177, Hungary","Static program analysis is a popular software technique performed by automated tools for verifying large scale software systems. It works without executing the program, just analyzing the source code and applying various heuristics to find possible errors, code smells and style discrepancies. Programming languages with strong static type system, like C, C++, Java are the usual targets of static analysis, as their type system provides additional information for the analyzer. However, there is a growing demand for applying static analysis for dynamically typed languages, like Python. In this paper we overview the current methods and tools available for static analysis on Python code base and describe some new research directions. Copyright © 2019 for this paper by its authors. Use permitted under Creative Commons License Attribution 4.0 International (CC BY 4.0).",,"Application programs; C++ (programming language); Computer software selection and evaluation; Quality control; Automated tools; Dynamically typed languages; Growing demand; Large-scale software systems; Software techniques; Static program analysis; Static type systems; Type systems; Static analysis","European Commission, EC; European Social Fund, ESF: EFOP-3.6.3-VEKOP-16-2017-00002","This work is supported by the European Union, co-financed by the European Social Fund (EFOP-3.6.3-VEKOP-16-2017-00002). Author’s addresses: Eötvös Loránd University, Faculty of Informatics, Dept. of Programming Languages and Compilers, Pázmány Péter sétány 1/C, Budapest, Hungary, H-1177, hristina@gulab.me, gsd@elte.hu Copyright ©c 2019 for this paper by its authors. Use permitted under Creative Commons License Attribution 4.0 International (CC BY 4.0). In: Z. Budimac and B. Koteska (eds.): Proceedings of the SQAMIA 2019: 8th Workshop of Software Quality, Analysis, Monitoring, Improvement, and Applications, Ohrid, North Macedonia, 22–25. September 2019. Also published online by CEUR Workshop Proceedings (http://ceur-ws.org, ISSN 1613-0073)",,,,,,,,,,,"Budimac Z.Koteska B.","CEUR-WS",16130073,9788670314764,,,"English","CEUR Workshop Proc.",Conference Paper,"Final","",Scopus,2-s2.0-85076490291
"Albahar M.A.","57192877385;","Recurrent Neural Network Model Based on a New Regularization Technique for Real-Time Intrusion Detection in SDN Environments",2019,"Security and Communication Networks","2019",,"8939041","","",,20,"10.1155/2019/8939041","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85076009173&doi=10.1155%2f2019%2f8939041&partnerID=40&md5=7a20449e6b871b80dedcded928a20e01","Umm Al Qura University, College of Computers in Al-Leith, Mecca, Saudi Arabia","Albahar, M.A., Umm Al Qura University, College of Computers in Al-Leith, Mecca, Saudi Arabia","Software-defined networking (SDN) is a promising approach to networking that provides an abstraction layer for the physical network. This technology has the potential to decrease the networking costs and complexity within huge data centers. Although SDN offers flexibility, it has design flaws with regard to network security. To support the ongoing use of SDN, these flaws must be fixed using an integrated approach to improve overall network security. Therefore, in this paper, we propose a recurrent neural network (RNN) model based on a new regularization technique (RNN-SDR). This technique supports intrusion detection within SDNs. The purpose of regularization is to generalize the machine learning model enough for it to be performed optimally. Experiments on the KDD Cup 1999, NSL-KDD, and UNSW-NB15 datasets achieved accuracies of 99.5%, 97.39%, and 99.9%, respectively. The proposed RNN-SDR employs a minimum number of features when compared with other models. In addition, the experiments also validated that the RNN-SDR model does not significantly affect network performance in comparison with other options. Based on the analysis of the results of our experiments, we conclude that the RNN-SDR model is a promising approach for intrusion detection in SDN environments. © 2019 Marwan Ali Albahar.",,"Abstracting; Intrusion detection; Network security; Abstraction layer; Integrated approach; Machine learning models; Physical network; Recurrent neural network (RNN); Recurrent neural network model; Regularization technique; Software defined networking (SDN); Recurrent neural networks",,,,,,,,,,,,"Albahar, M.A.; Umm Al Qura University, Saudi Arabia; email: marwanalialbahar@gmail.com",,"Hindawi Limited",19390114,,,,"English","Secur. Commun. Networks",Article,"Final","All Open Access, Gold",Scopus,2-s2.0-85076009173
"Elsayed E.K., ElDahshan K.A., El-Sharawy E.E., Ghannam N.E.","56711014000;36967841100;57211491168;57209745379;","Reverse engineering approach for improving the quality of mobile applications",2019,"PeerJ Computer Science","2019","8","e212","","",,3,"10.7717/peerj-cs.212","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85074154029&doi=10.7717%2fpeerj-cs.212&partnerID=40&md5=07abf5f0ed8d20c9391fbefe8f4ac0f8","Department of Mathematical and Computer Science, Faculty of Science, Al-Azhar University (Girls Branch), Cairo, Egypt; Department of Mathematical and Computer Science, Faculty of Science, Al-Azhar University, Cairo, Egypt; Computer Department, College of Science and Humanities in Jubail, Imam Abdulrahman Bin Faisal University, Saudi Arabia","Elsayed, E.K., Department of Mathematical and Computer Science, Faculty of Science, Al-Azhar University (Girls Branch), Cairo, Egypt; ElDahshan, K.A., Department of Mathematical and Computer Science, Faculty of Science, Al-Azhar University, Cairo, Egypt; El-Sharawy, E.E., Department of Mathematical and Computer Science, Faculty of Science, Al-Azhar University (Girls Branch), Cairo, Egypt, Computer Department, College of Science and Humanities in Jubail, Imam Abdulrahman Bin Faisal University, Saudi Arabia; Ghannam, N.E., Department of Mathematical and Computer Science, Faculty of Science, Al-Azhar University (Girls Branch), Cairo, Egypt","Background: Portable-devices applications (Android applications) are becoming complex software systems that must be developed quickly and continuously evolved to fit new user requirements and execution contexts. Applications must be produced rapidly and advance persistently in order to fit new client requirements and execution settings. However, catering to these imperativesmay bring about poor outline decisions on design choices, known as anti-patterns, which may possibly corrupt programming quality and execution. Thus, the automatic detection of anti-patterns is a vital process that facilitates bothmaintenance and evolution tasks. Additionally, it guides developers to refactor their applications and consequently enhance their quality. Methods: We proposed a general method to detect mobile applications' anti-patterns that can detect both semantic and structural design anti-patterns. The proposed method is via reverse-engineering and ontology by using a UML modeling environment, an OWL ontology-based platform and ontology-driven conceptual modeling. We present and test a new method that generates the OWL ontology of mobile applications and analyzes the relationships among object-oriented anti-patterns and offer methods to resolve the anti-patterns by detecting and treating 15 different design's semantic and structural anti-patterns that occurred in analyzing of 29 mobile applications. We choose 29 mobile applications randomly. Selecting a browser is not a criterion in this method because the proposed method is applied on a design level. We demonstrate a semantic integration method to reduce the incidence of anti-patterns using the ontology merging on mobile applications. Results: The proposed method detected 15 semantic and structural design anti-patterns which have appeared 1,262 times in a random sample of 29 mobile applications. The proposedmethod introduced a new classification of the anti-patterns divided into four groups. ""The anti-patterns in the class group"" is the most group that has themaximum occurrences of anti-patterns and ""The anti-patterns in the operation group"" is the smallest one that has the minimum occurrences of the anti-patterns which are detected by the proposed method. The results also showed the correlation between the selected tools which we used as Modelio, the Protégé platform, and the OLED editor of the OntoUML. The results showed that there was a high positive relation between Modelio and Protégé which implies that the combination between both increases the accuracy level of the detection of anti-patterns. In the evaluation and analyzing the suitable integration method, we applied the different methods on homogeneous mobile applications and found that using ontology increased the detection percentage approximately by 11.3% in addition to guaranteed consistency. © 2019 Elsayed et al.","Anti-patterns; Mobile applications; Ontology engineering; OntoUML; Reverse engineering; UML","Application programs; Birds; Mobile computing; Object oriented programming; Ontology; Reverse engineering; Semantics; Structural design; Android applications; Anti-patterns; Complex software systems; Mobile applications; Ontology engineering; Ontology-Driven Conceptual Modeling; OntoUML; Semantic integration; Pattern recognition",,,,,,,,,,,,"Ghannam, N.E.; Department of Mathematical and Computer Science, Egypt; email: naglaasaeed@azhar.edu.eg",,"PeerJ Inc.",23765992,,,,"English","PeerJ Comput. Sci.",Article,"Final","All Open Access, Gold, Green",Scopus,2-s2.0-85074154029
[No author name available],[No author id available],"12th International Conference on the Quality of Information and Communications Technology, QUATIC 2019",2019,"Communications in Computer and Information Science","1010",,,"","",346,,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-85072836114&partnerID=40&md5=d0c06d64658ce9f57ac5d8f48585e932",,"","The proceedings contain 25 papers. The special focus in this conference is on Quality of Information and Communications Technology. The topics include: A Systematic Review on Software Testing Ontologies; hamcrest vs AssertJ: An Empirical Assessment of Tester Productivity; do We Rework? A Path to Manage One of the Primary Cause of Uncertainty in Software Industry; Studying Continual Service Improvement and Monitoring the Quality of ITSM; strategies for Developing Process Reference Models: An Analysis of Selected Cases from the Product Development and Management Domain; concern Metrics for Modularity-Oriented Modernizations; a Family of Domain-Specific Languages for Integrated Modular Avionics; proFit – Performing Dynamic Analysis of Software Systems; code Smells Survival Analysis in Web Apps; privacy Oriented Software Development; evaluation of Maritime Event Detection Against Missing Data; Toward the Measure of Credibility of Hospital Administrative Datasets in the Context of DRG Classification; RETORCH: Resource-Aware End-to-End Test Orchestration; android Testing Crawler; local Observability and Controllability Enforcement in Distributed Testing; mutation-Based Web Test Case Generation; Assessing Data Cybersecurity Using ISO/IEC 25012; data-Driven Elicitation of Quality Requirements in Agile Companies; On the Use of Non-technical Requirements for the Evaluation of FOSS Software Components; challenges in Requirement Engineering: Could Design Thinking Help?; understanding Process Models Using the Eye-Tracking: A Systematic Mapping; fakeChain: A Blockchain Architecture to Ensure Trust in Social Media Networks; an Experience in Modelling Business Process Architecture.",,,,,,,,,,,,,,,"Piattini M.Rupino da Cunha P.Garcia Rodriguez de Guzman I.Perez-Castillo R.","Springer Verlag",18650929,9783030292379,,,"English","Commun. Comput. Info. Sci.",Conference Review,"Final","",Scopus,2-s2.0-85072836114
"Vargas-Alba Á., Troiano G.M., Chen Q., Harteveld C., Robles G.","57211109240;56241353800;57211109562;23392508000;8286496000;","Bad smells in scratch projects: A preliminary analysis",2019,"CEUR Workshop Proceedings","2434",,,"","",,1,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-85072680321&partnerID=40&md5=a13b8fea8d57d971a4a2fefc59dcf59d","Universidad Rey Juan Carlos, Madrid, Spain; Northeastern University, Boston, MA, United States","Vargas-Alba, Á., Universidad Rey Juan Carlos, Madrid, Spain; Troiano, G.M., Northeastern University, Boston, MA, United States; Chen, Q., Northeastern University, Boston, MA, United States; Harteveld, C., Northeastern University, Boston, MA, United States; Robles, G., Universidad Rey Juan Carlos, Madrid, Spain","Computational Thinking (CT) is an area of great relevance today. Although its skills may be developed in various ways, one of the most common tools to learn it, train it and develop it, is through programming. From software engineering, we know that problems solved through programming may have not been solved in the most appropriate way. These symptoms are known as “bad smells”. This article aims to analyze the presence of several bad smells in Scratch projects and how they relate to the development of CT skills. Therefore, we make use of a dataset of several hundreds of Scratch projects with the aim of creating a game on climate change. Our results show that bad smells can be found in all types of Scratch projects, independently of the development of CT skills they require. We discuss why the learning community should address bad smells appropriately, as they may hinder the development of abstraction, reuse and other relevant skills. Copyright ©2019 for this paper by its authors.",,"Climate change; Odors; Software engineering; Bad smells; Computational thinkings; Know-that; Learning community; Preliminary analysis; Learning systems","P2018/TCS-4307; Faculty of Science and Engineering, University of Manchester, FSE; Federación Española de Enfermedades Raras, FEDER","This work has been co-funded by the Madrid Regional Government, through the project e-Madrid-CM (P2018/TCS-4307). The e-Madrid-CM project is also co-financed by the Structural Funds (FSE and FEDER).",,,,,,,,,,,"Fronza I.Pahl C.","CEUR-WS",16130073,,,,"English","CEUR Workshop Proc.",Conference Paper,"Final","",Scopus,2-s2.0-85072680321
"Haendler T., Neumann G.","57163856400;7202631028;","Serious games for software refactoring",2019,"Lecture Notes in Informatics (LNI), Proceedings - Series of the Gesellschaft fur Informatik (GI)","P-292",,,"181","182",,1,"10.18420/se2019-58","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85072124452&doi=10.18420%2fse2019-58&partnerID=40&md5=6e7d0a79603e4716953fb6716a2da113","Institute for Information Systems and New Media, Vienna University of Economics and Business (WU), Austria","Haendler, T., Institute for Information Systems and New Media, Vienna University of Economics and Business (WU), Austria; Neumann, G., Institute for Information Systems and New Media, Vienna University of Economics and Business (WU), Austria","This summary refers to the paper Serious Refactoring Games published as a full research paper in the proceedings of the 52nd Hawaü International Conference on System Sciences (HICSS 2019) [HN19]. Software design issues can severely impede software development and maintenance. Thus, it is important for the success of software projects that developers are aware of bad smells in code artifacts and improve their skills to reduce these issues via refactoring. However, software refactoring is a complex activity and involves multiple tasks and aspects. Therefore, imparting competences for identifying bad smells and refactoring code efficiently is challenging for software engineering education and training. The approaches proposed for teaching software refactoring in recent years mostly concentrate on small and artificial tasks and fall short in terms of higher level competences, such as analysis and evaluation. In this paper, we investigate the possibilities and challenges of designing serious games for software refactoring on real-world code artifacts. In particular, we propose a game design, where students can compete either against a predefined benchmark (technical debt) or against each other. In addition, we describe a lightweight architecture as the technical foundation for the game design that integrates pre-existing analysis tools such as test frameworks and software-quality analyzers. Finally, we provide an exemplary game scenario to illustrate the application of serious games in a learning setting. © 2019 Gesellschaft fur Informatik (GI). All rights reserved.","Refactoring; Serious Games; Software Engineering Education; Training","Codes (symbols); Computer software selection and evaluation; Engineering education; Odors; Personnel training; Quality control; Software design; Software engineering; Software testing; Analysis and evaluation; Learning settings; Lightweight architecture; Refactorings; Software development and maintenances; Software Quality; Software refactoring; Teaching software; Serious games",,,,,,,,,,,,,"Becker S.Bogicevic I.Herzwurm G.Wagner S.","Gesellschaft fur Informatik (GI)",16175468,9783885796862,,,"English","Lect. Notes Informatics (LNI), Proc. - Series Ges. Inform. (GI)",Conference Paper,"Final","",Scopus,2-s2.0-85072124452
"Haendler T., Neumann G.","57163856400;7202631028;","Serious refactoring games",2019,"Proceedings of the Annual Hawaii International Conference on System Sciences","2019-January",,,"7691","7700",,12,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-85072121486&partnerID=40&md5=65cecf761ea87804f8ebec2c931cd0e9","Institute for Information Systems and New Media, Vienna University of Economics and Business, (WU), Austria","Haendler, T., Institute for Information Systems and New Media, Vienna University of Economics and Business, (WU), Austria; Neumann, G., Institute for Information Systems and New Media, Vienna University of Economics and Business, (WU), Austria","Software design issues can severely impede software development and maintenance. Thus, it is important for the success of software projects that developers are aware of bad smells in code artifacts and improve their skills to reduce these issues via refactoring. However, software refactoring is a complex activity and involves multiple tasks and aspects. Therefore, imparting competences for identifying bad smells and refactoring code efficiently is challenging for software engineering education and training. The approaches proposed for teaching software refactoring in recent years mostly concentrate on small and artificial tasks and fall short in terms of higher level competences, such as analysis and evaluation. In this paper, we investigate the possibilities and challenges of designing serious games for software refactoring on real-world code artifacts. In particular, we propose a game design, where students can compete either against a predefined benchmark (technical debt) or against each other. In addition, we describe a lightweight architecture as the technical foundation for the game design that integrates pre-existing analysis tools such as test frameworks and software-quality analyzers. Finally, we provide an exemplary game scenario to illustrate the application of serious games in a learning setting. © 2019 IEEE Computer Society. All rights reserved.",,"Computer software selection and evaluation; Odors; Quality control; Software design; Software quality; Software testing; Analysis and evaluation; Complex activity; Learning settings; Lightweight architecture; Software development and maintenances; Software project; Software refactoring; Teaching software; Serious games",,,,,,,,,,,,,"Bui T.X.","IEEE Computer Society",15301605,9780998133126,,,"English","Proc. Annu. Hawaii Int. Conf. Syst. Sci.",Conference Paper,"Final","",Scopus,2-s2.0-85072121486
"Moesus N., Scholze M., Schlesinger S., Herber P.","57210786209;57210792250;57072959500;26424642900;","A Rating Tool for the Automated Selection of Software Refactorings that Remove Antipatterns to Improve Performance and Stability",2019,"Communications in Computer and Information Science","1077",,,"28","54",,,"10.1007/978-3-030-29157-0_2","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85071681750&doi=10.1007%2f978-3-030-29157-0_2&partnerID=40&md5=f9c232f7ab5a63efcd5557485709f957","QMETHODS – Business & IT Consulting GmbH, Berlin, Germany; Software and Embedded Systems Engineering, Technische Universität Berlin, Berlin, Germany; Embedded Systems Group, University of Münster, Münster, Germany","Moesus, N., QMETHODS – Business & IT Consulting GmbH, Berlin, Germany; Scholze, M., QMETHODS – Business & IT Consulting GmbH, Berlin, Germany; Schlesinger, S., Software and Embedded Systems Engineering, Technische Universität Berlin, Berlin, Germany; Herber, P., Embedded Systems Group, University of Münster, Münster, Germany","Antipatterns are known to be bad solutions for recurring design problems. To detect and remove antipatterns has proven to be a useful mean to improve the quality of software. While there exist several approaches to detect antipatterns automatically, existing work on antipattern detection often does not solve the detected design problems automatically. Although there exist refactorings that have the potential to significantly increase the quality of a program, it is hard to decide which refactorings effectively yield improvements with respect to performance and stability. In this paper, we present a rating tool that makes use of static antipattern detection together with software profiling for the automated selection of refactorings that remove antipatterns and are promising candidates to improve performance and stability. Our key idea is to extend a previously proposed heuristics that utilizes software properties determined by both static code analyses and dynamic software analyses to compile a list of concrete refactorings sorted by their assessed potential to improve performance with an approach to identify refactorings that may improve stability. We do not impose an order on the refactorings that may improve stability. We demonstrate the practical applicability of our overall approach with experimental results. © 2019, Springer Nature Switzerland AG.","Performance; Software refactoring; Stability antipattern detection","Anti-patterns; Automated selection; Improve performance; Performance; Quality of softwares; Software properties; Software refactoring; Static code analysis; Stability",,,,,,,,,,,,"Herber, P.; Embedded Systems Group, Germany; email: paula.herber@uni-muenster.de","Maciaszek L.A.Maciaszek L.A.van Sinderen M.","Springer Verlag",18650929,9783030291563,,,"English","Commun. Comput. Info. Sci.",Conference Paper,"Final","",Scopus,2-s2.0-85071681750
"Alkharabsheh K., Crespo Y., Fernández-Delgado M., Cotos J.M., Taboada J.A.","54681569100;22733838200;6603469737;7801471608;7006470270;","Assessing the influence of size category of the project in god class detection, an experimental approach based on machine learning (MLA)",2019,"Proceedings of the International Conference on Software Engineering and Knowledge Engineering, SEKE","2019-July",,,"361","366",,2,"10.18293/SEKE2019-140","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85071394552&doi=10.18293%2fSEKE2019-140&partnerID=40&md5=8d3ff525050e844cbb7fb81b340ae7b9","CiTIUS, Universidad de Santiago de Compostela, Santiago de Compostela, Spain; Departamento de Informatica, Universidad de Valladolid, Valladolid, Spain","Alkharabsheh, K., CiTIUS, Universidad de Santiago de Compostela, Santiago de Compostela, Spain; Crespo, Y., Departamento de Informatica, Universidad de Valladolid, Valladolid, Spain; Fernández-Delgado, M., CiTIUS, Universidad de Santiago de Compostela, Santiago de Compostela, Spain; Cotos, J.M., CiTIUS, Universidad de Santiago de Compostela, Santiago de Compostela, Spain; Taboada, J.A., CiTIUS, Universidad de Santiago de Compostela, Santiago de Compostela, Spain","Design Smell detection has proven to be an effective strategy to improve software quality and consequently decrease maintainability expenses. In this work, we explore the influence of the size category of the software project on the automatic detection of God Class Design Smell by different machine learning techniques. A set of experiments were conducted with eight different learning classifiers on a dataset formed by 12,588 classes of 24 systems. The results were evaluated using ROC area and Kappa tests. The classifiers change their behaviour when they are used in sets that differ in the value of the selected size information of their classes. This study concludes that it is possible to improve results, mainly in agreement, of God Class detection feeding machine learning classifiers with project size information of the classes to analyze. © 2019 Knowledge Systems Institute Graduate School. All rights reserved.","Design smell detection; God class; Machine learning","Classification (of information); Classifiers; Computer software selection and evaluation; Knowledge engineering; Learning systems; Automatic Detection; Experimental approaches; Feeding machines; God class; Learning classifiers; Machine learning techniques; Software project; Software Quality; Machine learning",,,,,,,,,,,,,,"Knowledge Systems Institute Graduate School",23259000,1891706489,,,"English","Proc. Int. Conf. Softw. Eng. Knowl. Eng., SEKE",Conference Paper,"Final","All Open Access, Bronze",Scopus,2-s2.0-85071394552
"Guggulothu T., Moiz S.A.","57208908165;23467539000;","An Approach to Suggest Code Smell Order for Refactoring",2019,"Communications in Computer and Information Science","985",,,"250","260",,5,"10.1007/978-981-13-8300-7_21","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85066074957&doi=10.1007%2f978-981-13-8300-7_21&partnerID=40&md5=b852aa710e8ca62c4702e4152cf35bcc","University of Hyderabad, Hyderabad, Telangana, India","Guggulothu, T., University of Hyderabad, Hyderabad, Telangana, India; Moiz, S.A., University of Hyderabad, Hyderabad, Telangana, India","Code smell is an indicator of issues in source code qualities that may hinder maintenance, and evolution. Source code metrics are used to measure the quality of the code. In the literature, there are many code smells, refactoring techniques, and refactoring tools. However, a software project often contains thousands of code smells and many of them have no relation with design quality. It is a challenge for developers to decide which kind of code smell should be refactored first. We have proposed an approach that suggests a code smell order based on two aspects: (1) finding relevant metrics for each code smell dataset with the help of feature selection technique (2) analyzing the internal relation among the code smells with those relevant metrics. With this analysis, we are suggesting code smell order for developers to save their effort in the refactoring stage. The suggested order is evaluated on simple java source code. © 2019, Springer Nature Singapore Pte Ltd.","Code smell; Code smell order; Design quality; Feature selection technique; Maintenance; Refactoring","Advanced Analytics; Big data; Computer programming languages; Feature extraction; Maintenance; Odors; Code smell; Design Quality; Java source codes; Refactoring tools; Refactorings; Selection techniques; Source code metrics; Source code qualities; Codes (symbols)",,,,,,,,,,,,"Guggulothu, T.; University of HyderabadIndia; email: thirupathi.gugguloth@gmail.com","Somani A.K.Ramakrishna S.Chaudhary A.Choudhary C.Agarwal B.","Springer Verlag",18650929,9789811382994,,,"English","Commun. Comput. Info. Sci.",Conference Paper,"Final","",Scopus,2-s2.0-85066074957
"Pritam N., Khari M., Hoang Son L., Kumar R., Jha S., Priyadarshini I., Abdel-Basset M., Viet Long H.","56453436900;45060953400;56829588000;57198684981;57200599175;57189072220;57217514491;36662390100;","Assessment of code smell for predicting class change proneness using machine learning",2019,"IEEE Access","7",,"8667419","37414","37425",,32,"10.1109/ACCESS.2019.2905133","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85065259117&doi=10.1109%2fACCESS.2019.2905133&partnerID=40&md5=e33ba76bc0e0de065603019ff732d346","Leading Pseudo Code Labs, Delhi, 110012, India; Department of Computer Science and Engineering, AIACTR, New Delhi, 110031, India; VNU Information Technology Institute, Vietnam National University, Hanoi, 010000, Viet Nam; College of Electronics and Information Engineering, Sejong University, Seoul, 100083, South Korea; Department of Computer Science and Engineering, LNCT College, Jabalpur, 482053, India; School of Computer Engineering, KIIT University, Bhubaneswar, 751024, India; Department of Electrical and Computer Engineering, University of Delaware, Newark, DE  19716, United States; Department of Operations Research and Decision Support, Faculty of Computers and Informatics, Zagazig University, Zagazig, 44159, Egypt; Division of Computational Mathematics and Engineering, Institute for Computational Science, Ton Duc Thang University, Ho Chi Minh City, 700000, Viet Nam; Faculty of Mathematics and Statistics, Ton Duc Thang University, Ho Chi Minh City, 700000, Viet Nam","Pritam, N., Leading Pseudo Code Labs, Delhi, 110012, India; Khari, M., Department of Computer Science and Engineering, AIACTR, New Delhi, 110031, India; Hoang Son, L., VNU Information Technology Institute, Vietnam National University, Hanoi, 010000, Viet Nam, College of Electronics and Information Engineering, Sejong University, Seoul, 100083, South Korea; Kumar, R., Department of Computer Science and Engineering, LNCT College, Jabalpur, 482053, India; Jha, S., School of Computer Engineering, KIIT University, Bhubaneswar, 751024, India; Priyadarshini, I., Department of Electrical and Computer Engineering, University of Delaware, Newark, DE  19716, United States; Abdel-Basset, M., Department of Operations Research and Decision Support, Faculty of Computers and Informatics, Zagazig University, Zagazig, 44159, Egypt; Viet Long, H., Division of Computational Mathematics and Engineering, Institute for Computational Science, Ton Duc Thang University, Ho Chi Minh City, 700000, Viet Nam, Faculty of Mathematics and Statistics, Ton Duc Thang University, Ho Chi Minh City, 700000, Viet Nam","Assessment of code smell for predicting software change proneness is essential to ensure its significance in the area of software quality. While multiple studies have been conducted in this regard, the number of systems studied and the methods used in this paper are quite different, thus, causing confusion for understanding the best methodology. The objective of this paper is to approve the effect of code smell on the change inclination of a specific class in a product framework. This is the novelty and surplus of this work against the others. Furthermore, this paper aims to validate code smell for predicting class change proneness to find an error in the prediction of change proneness using code smell. Six typical machine learning algorithms (Naive Bayes Classifier, Multilayer Perceptron, LogitBoost, Bagging, Random Forest, and Decision Tree) have been used to predict change proneness using code smell from a set of 8200 Java classes spanning 14 software systems. The experimental results suggest that code smell is indeed a powerful predictor of class change proneness with multilayer perceptron being the most effective technique. The sensitivity and specificity values for all the models are well over 70% with a few exceptions. © 2019 IEEE.","change proneness; Code smell; machine learning; multilayer perceptron; software maintenance","Classifiers; Codes (symbols); Computer software maintenance; Computer software selection and evaluation; Data mining; Decision trees; Forecasting; Learning algorithms; Learning systems; Multilayer neural networks; Multilayers; Change proneness; Code smell; Naive Bayes classifiers; Sensitivity and specificity; Software change; Software Quality; Software systems; Specific class; Machine learning",,,,,,,,,,,,"Viet Long, H.; Division of Computational Mathematics and Engineering, Viet Nam; email: hoangvietlong@tdtu.edu.vn",,"Institute of Electrical and Electronics Engineers Inc.",21693536,,,,"English","IEEE Access",Article,"Final","All Open Access, Gold",Scopus,2-s2.0-85065259117
"Ouni A., Wang H., Kessentini M., Bouktif S., Inoue K.","50761492200;57188742982;25653537200;7801624534;7601540520;","A hybrid approach for improving the design quality of web service interfaces",2019,"ACM Transactions on Internet Technology","19","1","4","","",,11,"10.1145/3226593","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85061278790&doi=10.1145%2f3226593&partnerID=40&md5=2c3fdf127d1f9c286dc702b09bf1698f","ETS Montreal, Montreal, QC, Canada; eBay, San Jose, CA, United States; University of Michigan, Dearborn, MI, United States; UAE University, Al Ain, United Arab Emirates; Osaka University, Suita, Osaka, Japan","Ouni, A., ETS Montreal, Montreal, QC, Canada; Wang, H., eBay, San Jose, CA, United States; Kessentini, M., University of Michigan, Dearborn, MI, United States; Bouktif, S., UAE University, Al Ain, United Arab Emirates; Inoue, K., Osaka University, Suita, Osaka, Japan","A key success of a Web service is to appropriately design its interface to make it easy to consume and understand. In the context of service-oriented computing (SOC), the service's interface is the main source of interaction with the consumers to reuse the service functionality in real-world applications. The SOC paradigm provides a collection of principles and guidelines to properly design services to provide best practice of third-party reuse. However, recent studies showed that service designers tend to pay little care to the design of their service interfaces, which often lead to several side effects known as antipatterns. One of the most common Web service interface antipatterns is to expose a large number of semantically unrelated operations, implementing different abstractions, in one single interface. Such bad design practices may have a significant impact on the service reusability, understandability, as well as the development and run-time characteristics. To address this problem, in this article, we propose a hybrid approach to improve the design quality of Web service interfaces and fix antipatterns as a combination of both deterministic and heuristic-based approaches. The first step consists of a deterministic approach using a graph partitioning-based technique to split the operations of a large service interface into more cohesive interfaces, each one representing a distinct abstraction. Then, the produced interfaces will be checked using a heuristic-based approach based on the non-dominated sorting genetic algorithm (NSGA-II) to correct potential antipatterns while reducing the interface design deviation to avoid taking the service away from its original design. To evaluate our approach, we conduct an empirical study on a benchmark of 26 real-world Web services provided by Amazon and Yahoo. Our experiments consist of a quantitative evaluation based on design quality metrics, as well as a qualitative evaluation with developers to assess its usefulness in practice. The results show that our approach significantly outperforms existing approaches and provides more meaningful results from a developer's perspective. © 2018 ACM","Antipattern; Search-based software engineering; Service-oriented computing; Web service design; Web services","Abstracting; Distributed computer systems; Genetic algorithms; Petroleum reservoir evaluation; Quality control; Reusability; Software engineering; Websites; Anti-patterns; Non dominated sorting genetic algorithm (NSGA II); Qualitative evaluations; Quantitative evaluation; Search-based software engineering; Service design; Service functionalities; Service oriented computing; Web services","Natural Sciences and Engineering Research Council of Canada, NSERC; National Research University Higher School of Economics, HSE; Doctoral Scientific Research Start-up Foundation from Henan University of Technology: G00002211","This work is partially supported by the Research Start-up (2) 2016 Grant G00002211 funded by UAE University, and by NSERC Discovery grant.","This work is partially supported by the Research Start-up (2) 2016 Grant G00002211 funded by UAE University, and by NSERC Discovery grant. Authors’ addresses: A. Ouni, ETS Montreal, Montreal, QC, Canada; email: ali.ouni@etsmtl.ca; H. Wang, eBay, San Jose, CA; email: hanzwang@ebay.com; M. Kessentini, University of Michigan, Dearborn, MI; email: marouane@umich.edu; S. Bouktif, UAE University, Al Ain, United Arab Emirates; email: salahb@uaeu.ac.ae; K. Inoue, Osaka University, Suita, Osaka, Japan; email: inoue@ist.osaka-u.ac.jp. Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. Copyrights for components of this work owned by others than ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. Request permissions from permissions@acm.org. © 2018 ACM 1533-5399/2018/11-ART4 $15.00 https://doi.org/10.1145/3226593",,,,,,,,,,,"Association for Computing Machinery",15335399,,,,"English","ACM Trans. Internet Technol.",Article,"Final","",Scopus,2-s2.0-85061278790
"Yadav T., Sadhukhan K.","57189035481;57189044320;","Identification of bugs and vulnerabilities in TLS implementation for windows operating system using state machine learning",2019,"Communications in Computer and Information Science","969",,,"348","362",,2,"10.1007/978-981-13-5826-5_27","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85061120232&doi=10.1007%2f978-981-13-5826-5_27&partnerID=40&md5=f173fc077527b1291d06ec203f4255dc","Defence Research and Development Organisation, Delhi, India","Yadav, T., Defence Research and Development Organisation, Delhi, India; Sadhukhan, K., Defence Research and Development Organisation, Delhi, India","TLS protocol is an essential part of secure Internet communication. In the past, many attacks have been identified on the protocol. Most of these attacks are not due to design flaws of the protocol, but due to flaws in specific implementation of protocol. One of the widely used implementation of TLS is SChannel which is used in Windows operating system since its inception. In this paper, we have used “protocol state fuzzing” to identify vulnerable and undesired state transitions in the state machine models of the protocol for various versions of SChannel. The technique of protocol state fuzzing has been implemented using query based state machine learning. The client as well as server components have been analyzed thoroughly using this technique and various flaws have been discovered in the implementation. Exploitation of these flaws under specific circumstances may lead to serious attacks which have potential to disrupt secure communication. © Springer Nature Singapore Pte Ltd. 2019.","Fuzzing; SChannel; State machine; TLS protocol","Machine learning; Program debugging; Seebeck effect; Fuzzing; Internet communication; SChannel; Server components; State machine; State machine models; State transitions; TLS protocols; Windows operating system",,,,,,,,,,,,"Yadav, T.; Defence Research and Development OrganisationIndia; email: tarunyadav@sag.drdo.in","Thampi S.M.Rawat D.B.Alcaraz Calero J.M.Madria S.Wang G.","Springer Verlag",18650929,9789811358258,,,"English","Commun. Comput. Info. Sci.",Conference Paper,"Final","All Open Access, Green",Scopus,2-s2.0-85061120232
[No author name available],[No author id available],"The Joint International Symposium on Artificial Intelligence and Natural Language Processing, iSAI-NLP 2017",2019,"Advances in Intelligent Systems and Computing","807",,,"","",253,,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-85059091575&partnerID=40&md5=acdca0efd592dba1b74ce34dbc4b4407",,"","The proceedings contain 22 papers. The special focus in this conference is on Artificial Intelligence and Natural Language Processing. The topics include: Isan Dhamma Characters Segmentation and reading in Thai; ontology-assisted structural design flaw detection of object-oriented software; virtual reality application for animal cruelty education; anti-theft motorcycle system using face recognition by deep learning under concept on Internet of Things; balanced scorecard quality information dashboards model for competitive business advantage; criminal background check program with fingerprint; Jobs analysis for business intelligence skills requirements in the ASEAN region: A text mining study; the model of teenager’s internet usage behavior analysis using data mining; privacy-preserving reputation management in fully decentralized systems: Challenges and opportunities; cloud-based services for cooperative robot learning of 3D object detection and recognition; empirical testing of a technique for assessing prior knowledge in the field of research training; problem content table construction based on extracting Sym-Multi-Word-Co from texts; Unpredictable disaster evacuation guide for weak people by real-time sensor network, SNS and maps; Detection of normal and abnormal ECG signal using ANN; dynamic relation-based analysis of objective interestingness measures in association rules mining; image encryption using cellular neural network and matrix transformation; improved term weighting factors for keyword extraction in hierarchical category structure and Thai text classification; ontology-based classifiers for wikipedia article quality classification; thai Named-Entity Recognition using variational long short-term memory with conditional random field; cardiac arrhythmia classification using Hjorth Descriptors.",,,,,,,,,,,,,,,"Ketcham M.Supnithi T.Hnoohom N.Hashimoto K.Kongkachandra R.Songmuang P.Theeramunkong T.","Springer Verlag",21945357,9783319947020,,,"English","Adv. Intell. Sys. Comput.",Conference Review,"Final","",Scopus,2-s2.0-85059091575
"Karaduzovic-Hadziabdic K., Spahic R.","55601026300;57205581722;","Comparison of Machine Learning Methods for Code Smell Detection Using Reduced Features",2018,"UBMK 2018 - 3rd International Conference on Computer Science and Engineering",,,"8566561","670","672",,5,"10.1109/UBMK.2018.8566561","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85060586083&doi=10.1109%2fUBMK.2018.8566561&partnerID=40&md5=7942d919f6c33d6af2ce277934d148b4","Faculty of Engineering AndNatural Sciences, International University of Sarajevo, Sarajevo, Bosnia, Bosnia and Herzegovina; Equinor ASA Research Center Trondheim, Rotvoll, Norway","Karaduzovic-Hadziabdic, K., Faculty of Engineering AndNatural Sciences, International University of Sarajevo, Sarajevo, Bosnia, Bosnia and Herzegovina; Spahic, R., Equinor ASA Research Center Trondheim, Rotvoll, Norway","We examine a machine learning approach for detecting common Class and Method level code smells (Data Class and God Class, Feature Envy and Long Method). The focus of the work is selection of reduced set of features that will achieve high classification accuracy. The proposed features may be used by the developers to develop better quality software since the selected features focus on the most critical parts of the code that is responsible for creation of common code smells. We obtained a high accuracy results for all four code smells using the selected features: 98.57% for Data Class, 97.86% for God Class, 99.67% for Feature Envy, and 99.76% for Long Method. © 2018 IEEE.","code smells; feature selection; machine learning","Classification (of information); Codes (symbols); Learning systems; Machine learning; Odors; Classification accuracy; Code smell; Data class; High-accuracy; Machine learning approaches; Machine learning methods; Quality software; Feature extraction",,,,,,,,,,,,,,"Institute of Electrical and Electronics Engineers Inc.",,9781538678930,,,"English","UBMK - Int. Conf. Comput. Sci. Eng.",Conference Paper,"Final","",Scopus,2-s2.0-85060586083
"Singh S., Kaur S.","7407874009;57215553685;","A systematic literature review: Refactoring for disclosing code smells in object oriented software",2018,"Ain Shams Engineering Journal","9","4",,"2129","2151",,32,"10.1016/j.asej.2017.03.002","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85015808258&doi=10.1016%2fj.asej.2017.03.002&partnerID=40&md5=5c660ecb8b2ded05a6eade8de60650ca","Central University of Punjab, Bathinda, India; IKGPTU, Jalandhar, India","Singh, S., Central University of Punjab, Bathinda, India; Kaur, S., IKGPTU, Jalandhar, India","Context: Reusing a design pattern is not always in the favor of developers. Thus, the code starts smelling. The presence of “Code Smells” leads to more difficulties for the developers. This racket of code smells is sometimes called Anti-Patterns. Objective: The paper aimed at a systematic literature review of refactoring with respect to code smells. However the review of refactoring is done in general and the identification of code smells and anti-patterns is performed in depth. Method: A systematic literature survey has been performed on 238 research items that includes articles from leading Conferences, Workshops and premier journals, theses of researchers and book chapters. Results: Several data sets and tools for performing refactoring have been revealed under the specified research questions. Conclusion: The work done in the paper is an addition to prior systematic literature surveys. With the study of paper the attentiveness of readers about code smells and anti-patterns will be enhanced. © 2017","Anti-patterns; Code smells; Refactoring","Codes (symbols); Odors; Surveys; Anti-patterns; Code smell; Design Patterns; Literature survey; Object oriented software; Refactorings; Research questions; Systematic literature review; Object oriented programming",,"I would like to thanks IKGPTU Jalandhar for providing me the opportunity to study as a research scholar. We are thankful to the reviewer and editor for the valuable suggestions and guidelines. The ideas provided by them were really worthy for attaining the perfection in the work. We are also grateful to the collegeous and family members for their continuous support.",,,,,,,,,,"Kaur, S.; IKGPTUIndia; email: sharancgm@gmail.com",,"Ain Shams University",20904479,,,,"English","Ain Shams Eng. J.",Article,"Final","All Open Access, Gold",Scopus,2-s2.0-85015808258
"Mumtaz H., Beck F., Weiskopf D.","57200160465;25824730200;6603960393;","Detecting Bad Smells in Software Systems with Linked Multivariate Visualizations",2018,"Proceedings - 6th IEEE Working Conference on Software Visualization, VISSOFT 2018",,,"8530127","12","20",,8,"10.1109/VISSOFT.2018.00010","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85058477221&doi=10.1109%2fVISSOFT.2018.00010&partnerID=40&md5=87ff31a67527f553481c2f0bd7d482b4","VISUS, University of Stuttgart, Germany; Paluno, University of Duisburg-Essen, Germany","Mumtaz, H., VISUS, University of Stuttgart, Germany; Beck, F., Paluno, University of Duisburg-Essen, Germany; Weiskopf, D., VISUS, University of Stuttgart, Germany","Parallel coordinates plots and RadViz are two visualization techniques that deal with multivariate data. They complement each other in identifying data patterns, clusters, and outliers. In this paper, we analyze multivariate software metrics linking the two approaches for detecting outliers, which could be the indicators for bad smells in software systems. Parallel coordinates plots provide an overview, whereas the RadViz representation allows for comparing a smaller subset of metrics in detail. We develop an interactive visual analytics system supporting automatic detection of bad smell patterns. In addition, we investigate the distinctive properties of outliers that are not considered harmful, but noteworthy for other reasons. We demonstrate our approach with open source Java systems and describe detected bad smells and other outlier patterns. © 2018 IEEE.","Bad smells; Multivariate visualization; Software metrics","Data visualization; Odors; Open source software; Statistics; Visualization; Automatic Detection; Bad smells; Multivariate data; Multivariate visualization; Parallel coordinates; Software metrics; Visual analytics systems; Visualization technique; Open systems","Baden-Württemberg Stiftung","ACKNOWLEDGMENT Fabian Beck is indebted to the Baden-Württemberg Stiftung for the financial support of this research project within the Postdoctoral Fellowship for Leading Early Career Researchers.",,,,,,,,,,,,"Institute of Electrical and Electronics Engineers Inc.",,9781538682920,,,"English","Proc. - IEEE Working Conf. Softw. Vis., VISSOFT",Conference Paper,"Final","",Scopus,2-s2.0-85058477221
[No author name available],[No author id available],"Proceedings - 18th IEEE International Working Conference on Source Code Analysis and Manipulation, SCAM 2018",2018,"Proceedings - 18th IEEE International Working Conference on Source Code Analysis and Manipulation, SCAM 2018",,,,"","",256,,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-85058305515&partnerID=40&md5=c9b3f4157fa52fae19f9fb80cd65b68c",,"","The proceedings contain 27 papers. The topics discussed include: combining obfuscation and optimizations in the real world; obfuscating java programs by translating selected portions of bytecode to native libraries; enabling the continuous analysis of security vulnerabilities with VulData7; towards anticipation of architectural smells using link prediction techniques; periodic developer metrics in software defect prediction; which method-stereotype changes are indicators of code smells?; semantics-based code search using input/output examples; detecting evolutionary coupling using transitive association rules; the case for adaptive change recommendation; and on the use of machine learning techniques towards the design of cloud based automatic code clone validation tools.",,,,,,,,,,,,,,,,"Institute of Electrical and Electronics Engineers Inc.",,9781538682906,,,"English","Proc. - IEEE Int. Working Conf. Source Code Anal. Manip., SCAM",Conference Review,"Final","",Scopus,2-s2.0-85058305515
"Davis J.C., Coghlan C.A., Servant F., Lee D.","57194212372;57205350546;36461842200;55697057900;","The impact of Regular Expression Denial of Service (ReDoS) in practice: An empirical study at the ecosystem scale",2018,"ESEC/FSE 2018 - Proceedings of the 2018 26th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering",,,,"246","256",,40,"10.1145/3236024.3236027","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85058321067&doi=10.1145%2f3236024.3236027&partnerID=40&md5=589f0a268fcd4158bbd61bfe611eb5b5","Virginia Tech, United States","Davis, J.C., Virginia Tech, United States; Coghlan, C.A., Virginia Tech, United States; Servant, F., Virginia Tech, United States; Lee, D., Virginia Tech, United States","Regular expressions (regexes) are a popular and powerful means of automatically manipulating text. Regexes are also an understudied denial of service vector (ReDoS). If a regex has super-linear worst-case complexity, an attacker may be able to trigger this complexity, exhausting the victim's CPU resources and causing denial of service. Existing research has shown how to detect these superlinear regexes, and practitioners have identified super-linear regex anti-pattern heuristics that may lead to such complexity. In this paper, we empirically study three major aspects of ReDoS that have hitherto been unexplored: The incidence of super-linear regexes in practice, how they can be prevented, and how they can be repaired. In the ecosystems of two of the most popular programming languages D JavaScript and Python S we detected thousands of super-linear regexes affecting over 10,000 modules across diverse application domains. We also found that the conventional wisdom for super-linear regex anti-patterns has few false negatives but many false positives; these anti-patterns appear to be necessary, but not sufficient, signals of super-linear behavior. Finally, we found that when faced with a super-linear regex, developers favor revising it over truncating input or developing a custom parser, regardless of whether they had been shown examples of all three fix strategies. These findings motivate further research into ReDoS, since many modules are vulnerable to it and existing mechanisms to avoid it are insufficient. We believe that ReDoS vulnerabilities are a larger threat in practice than might have been guessed. © 2018 Association for Computing Machinery.","catastrophic backtracking; empirical software engineering; mining software repositories; ReDoS; Regular expressions","Ecosystems; High level languages; Lead compounds; Object oriented programming; Software engineering; catastrophic backtracking; Empirical Software Engineering; Mining software repositories; ReDoS; Regular expressions; Pattern matching","National Science Foundation, NSF: 1814430",,,,,,,,,,,"Coghlan, C.A.; Virginia TechUnited States; email: ccogs@vt.edu","Garci A.Pasareanu C.S.Leavens G.T.","Association for Computing Machinery, Inc",,9781450355735,,,"English","ESEC/FSE - Proc. ACM Jt. Meet. Eur. Softw. Eng. Conf. Symp. Found. Softw. Eng.",Conference Paper,"Final","All Open Access, Bronze",Scopus,2-s2.0-85058321067
"Charalampidou S., Arvanitou E.-M., Ampatzoglou A., Avgeriou P., Chatzigeorgiou A., Stamelos I.","56968008000;55209903200;16027681600;17343671200;6701702023;6604041235;","Structural quality metrics as indicators of the long method bad smell: An empirical study",2018,"Proceedings - 44th Euromicro Conference on Software Engineering and Advanced Applications, SEAA 2018",,,"8498213","234","238",,6,"10.1109/SEAA.2018.00046","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85057175684&doi=10.1109%2fSEAA.2018.00046&partnerID=40&md5=f6794a79a709178b1e9c2c7e709f3c44","Department of Computer Science, University of Groningen, Netherlands; Department of Applied Informatics, University of Macedonia, Thessaloniki, Greece; Department of Informatics, Aristotle University, Thessaloniki, Greece, United States","Charalampidou, S., Department of Computer Science, University of Groningen, Netherlands; Department of Applied Informatics, University of Macedonia, Thessaloniki, Greece; Department of Informatics, Aristotle University, Thessaloniki, Greece, United States; Arvanitou, E.-M., Department of Computer Science, University of Groningen, Netherlands; Department of Applied Informatics, University of Macedonia, Thessaloniki, Greece; Department of Informatics, Aristotle University, Thessaloniki, Greece, United States; Ampatzoglou, A., Department of Computer Science, University of Groningen, Netherlands; Department of Applied Informatics, University of Macedonia, Thessaloniki, Greece; Department of Informatics, Aristotle University, Thessaloniki, Greece, United States; Avgeriou, P., Department of Computer Science, University of Groningen, Netherlands; Department of Applied Informatics, University of Macedonia, Thessaloniki, Greece; Department of Informatics, Aristotle University, Thessaloniki, Greece, United States; Chatzigeorgiou, A., Department of Computer Science, University of Groningen, Netherlands; Department of Applied Informatics, University of Macedonia, Thessaloniki, Greece; Department of Informatics, Aristotle University, Thessaloniki, Greece, United States; Stamelos, I., Department of Computer Science, University of Groningen, Netherlands; Department of Applied Informatics, University of Macedonia, Thessaloniki, Greece; Department of Informatics, Aristotle University, Thessaloniki, Greece, United States","Empirical evidence has pointed out that Extract Method refactorings are among the most commonly applied refactorings by software developers. The identification of Long Method code smells and the ranking of the associated refactoring opportunities is largely based on the use of metrics, primarily with measures of cohesion, size and coupling. Despite the relevance of these proper-ties to the presence of large, complex and non-cohesive pieces of code, the empirical validation of these metrics has exhibited relatively low accuracy (max precision: 66%) regarding their predictive power for long methods or extract method opportunities. In this work we perform an empirical validation of the ability of cohesion, coupling and size metrics to predict the existence and the intensity of long method occurrences. According to the statistical analysis, the existence and the intensity of the Long Method smell can be effectively predicted by two size (LoC and NoLV), two coupling (MPC and RFC), and four cohesion (LCOM1, LCOM2, Coh, and CC) metrics. Furthermore, the integration of these metrics into a multiple logistic regression model can predict whether a method should be refactored with a precision of 89% and a recall of 91%. The model yields suggestions whose ranking is strongly correlated to the ranking based on the effect of the corresponding refactorings on source code (correl. coef. 0.520). The results are discussed by providing interpretations and implications for research and practice. © 2018 IEEE.","Case study; Cohesion; Coupling; Long method; Size","Codes (symbols); Couplings; Regression analysis; Cohesion; Empirical studies; Empirical validation; Long method; Multiple logistic regression; Size; Software developer; Structural qualities; Application programs","Horizon 2020 Framework Programme, H2020: 780572, SDK4ED; European Social Fund, ESF","Work reported in this paper: (a) has received funding from the European Union Horizon 2020 research and innovation programme under grant agreement No. 780572 (project: SDK4ED); and (b) was financially supported by the action ""Strengthening Human Resources Research Potential via Doctorate Research"" of the Operational Program ""Human Resources Development Program, Education and Lifelong Learning, 2014-2020”, implemented from State Scholarship Foundation (IKY) and co-financed by the European Social Fund and the Greek public (National Strategic Reference Frame-work (NSRF) 2014–2020).",,,,,,,,,,,"Bures T.Angelis L.","Institute of Electrical and Electronics Engineers Inc.",,9781538673829,,,"English","Proc. - Euromicro Conf. Softw. Eng. Adv. Appl., SEAA",Conference Paper,"Final","All Open Access, Green",Scopus,2-s2.0-85057175684
"Zhu J., Song W., Zhu Z., Ying J., Li B., Tu B., Shi G., Hou R., Meng D.","57204733497;57203982602;57199280648;57204725112;57204729069;8640655500;57189342099;55684325200;55308382800;","CPU security benchmark",2018,"Proceedings of the ACM Conference on Computer and Communications Security",,,,"8","14",,5,"10.1145/3267494.3267499","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85056906587&doi=10.1145%2f3267494.3267499&partnerID=40&md5=3cc0602c5560e05c91f125f1c37452f2","Institute of Information Engineering, Chinese Academy of Sciences, Beijing, China","Zhu, J., Institute of Information Engineering, Chinese Academy of Sciences, Beijing, China; Song, W., Institute of Information Engineering, Chinese Academy of Sciences, Beijing, China; Zhu, Z., Institute of Information Engineering, Chinese Academy of Sciences, Beijing, China; Ying, J., Institute of Information Engineering, Chinese Academy of Sciences, Beijing, China; Li, B., Institute of Information Engineering, Chinese Academy of Sciences, Beijing, China; Tu, B., Institute of Information Engineering, Chinese Academy of Sciences, Beijing, China; Shi, G., Institute of Information Engineering, Chinese Academy of Sciences, Beijing, China; Hou, R., Institute of Information Engineering, Chinese Academy of Sciences, Beijing, China; Meng, D., Institute of Information Engineering, Chinese Academy of Sciences, Beijing, China","The current electronic-economy is booming, electronic-wallets, encrypted virtual-money, mobile payments, and other new generations of economic instruments are springing up. As the most important cornerstone, CPU is facing serious security challenges. And with the blowout of actual application requirements, the importance of CPU security testing is increasing. However, the actual security threats to computer systems are also becoming increasingly rampant (now attackers often use multiple different types of vulnerabilities to construct complex attack systems, not just a single attack chain). The traditional vulnerability detection model is not capable of comprehensive security assessment. We first proposed a comprehensive CPU Security Benchmark solution with high coverage for existing known vulnerabilities, including Undocumented Instructions detection, Control Flow Integrity test, Memory Errors detection, and Cache Side Channels detection, Out of Order and Speculative execution vulnerabilities (Meltdown and Spectre series) tests, and more. Our benchmark provides meaningful and constructive feedbacks for evading architecture/microarchitecture design flaws, system security (OS and libraries) software patches design, and user programming vulnerabilities tips. We hope that the work of this paper will promote the computer system security testing from the past scatter point and line mode (single specific vulnerability and attack chain testing) to coordinated and whole surface mode (multi-type vulnerabilities and attack network testing), thus creating a new research direction of the comprehensive and balanced CPU Security Benchmark. Our test suite will play an inspiring role in the comprehensive assessment of security in personal computer devices (PC/Mobile Phone) and large server clusters (Servers/Cloud), as well as the construction of more secure Block-Chain nodes (IOT), and many other practical applications. © 2018 Association for Computing Machinery.","Comprehensive benchmark; CPU security; Vulnerability detection","Computer architecture; Electronic money; Network architecture; Personal computers; Side channel attack; Application requirements; Comprehensive assessment; Computer system security; Constructive feedback; Control-flow integrities; Economic instruments; Speculative execution; Vulnerability detection; Network security",,,,,,,,,,,,,,"Association for Computing Machinery",15437221,9781450359917,,,"English","Proc ACM Conf Computer Commun Secur",Conference Paper,"Final","",Scopus,2-s2.0-85056906587
"Beranič T., Podgorelec V., Heričko M.","57203508230;6701496970;6603385018;","Towards a reliable identification of deficient code with a combination of software metrics",2018,"Applied Sciences (Switzerland)","8","10","1902","","",,2,"10.3390/app8101902","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85054769455&doi=10.3390%2fapp8101902&partnerID=40&md5=d159a5c90da2427a86371925b4d16b0b","Faculty of Electrical Engineering and Computer Science, University of Maribor, Koroška cesta 46, Maribor, 2000, Slovenia","Beranič, T., Faculty of Electrical Engineering and Computer Science, University of Maribor, Koroška cesta 46, Maribor, 2000, Slovenia; Podgorelec, V., Faculty of Electrical Engineering and Computer Science, University of Maribor, Koroška cesta 46, Maribor, 2000, Slovenia; Heričko, M., Faculty of Electrical Engineering and Computer Science, University of Maribor, Koroška cesta 46, Maribor, 2000, Slovenia","Different challenges arise while detecting deficient software source code. Usually a large number of potentially problematic entities are identified when an individual software metric or individual quality aspect is used for the identification of deficient program entities. Additionally, a lot of these entities quite often turn out to be false positives, i.e., the metrics indicate poor quality whereas experienced developers do not consider program entities as problematic. The number of entities identified as potentially deficient does not decrease significantly when the identification of deficient entities is carried out by applying code smell detection rules. Moreover, the intersection of entities identified as allegedly deficient among different code smell detection tools is small, which suggests that the implementation of code smell detection rules are not consistent and uniform. To address these challenges, we present a novel approach for identifying deficient entities that is based on applying the majority function on the combination of software metrics. Program entities are assessed according to selected quality aspects that are evaluated with a set of software metrics and corresponding threshold values derived from benchmark data, considering the statistical distributions of software metrics values. The proposed approach was implemented and validated on projects developed in Java, C++ and C#. The validation of the proposed approach was done with expert judgment, where software developers and architects with multiple years of experiences assessed the quality of the software classes. Using a combination of software metrics as the criteria for the identification of deficient source code, the number of potentially deficient object-oriented program entities proved to be reduced. The results show the correctness of quality ratings determined by the proposed identification approach, and most importantly, confirm the absence of false positive entities. © 2018 by the authors.","Expert judgment; Majority function; Metric thresholds; Object-oriented; Reliable identification; Smelling entities; Smells in source code; Software metrics; Software quality",,"Javna Agencija za Raziskovalno Dejavnost RS, ARRS: 35512, P2-0057, RO 0796","Funding: This work was supported by the Slovenian Research Agency (SRA) under The Young Researchers Programme (SICRIS/SRA code 35512, RO 0796, Programme P2-0057).",,,,,,,,,,"Beranič, T.; Faculty of Electrical Engineering and Computer Science, Koroška cesta 46, Slovenia; email: tina.beranic@um.si",,"MDPI AG",20763417,,,,"English","Appl. Sci.",Article,"Final","All Open Access, Gold, Green",Scopus,2-s2.0-85054769455
"Alkharabsheh K., Taboada J.A., Crespo Y., Alzu'Bi T.","54681569100;7006470270;22733838200;57204695805;","Improving Design Smell Detection for Adoption in Industry",2018,"2018 8th International Conference on Computer Science and Information Technology, CSIT 2018",,,"08486180","213","218",,1,"10.1109/CSIT.2018.8486180","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85056697250&doi=10.1109%2fCSIT.2018.8486180&partnerID=40&md5=4f77f030b97da36b728d4fa2689fb10e","CiTIUS, Centro Singular de Investigacion en Tecnologias de la Informacion, Universidade de Santiago de Compostela, Santiago de Compostela, Spain; Dpto. Informática, Universidad de Valladolid, Valladolid, Spain","Alkharabsheh, K., CiTIUS, Centro Singular de Investigacion en Tecnologias de la Informacion, Universidade de Santiago de Compostela, Santiago de Compostela, Spain; Taboada, J.A., CiTIUS, Centro Singular de Investigacion en Tecnologias de la Informacion, Universidade de Santiago de Compostela, Santiago de Compostela, Spain; Crespo, Y., Dpto. Informática, Universidad de Valladolid, Valladolid, Spain; Alzu'Bi, T., CiTIUS, Centro Singular de Investigacion en Tecnologias de la Informacion, Universidade de Santiago de Compostela, Santiago de Compostela, Spain","This work deals with the development of a classification algorithm that will improve the usefulness of design smell detection tools for its adoption in industry in order to increase software quality (maintainability, understandability, etc.). The current knowledge of Design Smell Detection (types of smells, approaches, strategies, algorithms, tools, etc.) will be identified. After that, a dataset that allow the comparison of different machine learning techniques will be developed. Analysis of possible improvements derived of the introduction of subjectivity, adaptability and gray scale are also an objective of the work. © 2018 IEEE.","Design Smell; Detection Tools; Empirical Study; Machine Learning; Software Quality","Artificial intelligence; Computer software selection and evaluation; Inspection equipment; Classification algorithm; Detection tools; Empirical studies; Gray scale; Improving designs; Machine learning techniques; Software Quality; Understandability; Learning systems",,,,,,,,,,,,,,"Institute of Electrical and Electronics Engineers Inc.",,9781538641521,,,"English","Int. Conf. Comput. Sci. Inf. Technol., CSIT",Conference Paper,"Final","",Scopus,2-s2.0-85056697250
"Liu H., Li B., Yang Y., Ma W., Jia R.","57196220498;9334814500;55883652400;56949541600;57204005440;","Exploring the Impact of Code Smells on Fine-Grained Structural Change-Proneness",2018,"International Journal of Software Engineering and Knowledge Engineering","28","10",,"1487","1516",,4,"10.1142/S0218194018500432","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85054031457&doi=10.1142%2fS0218194018500432&partnerID=40&md5=577bccdc905f34ed6bd1ac86acf7bd2a","School of Computer Science and Engineering, Southeast University, Nanjing, China; State Key Laboratory for Novel Software Technology, Nanjing University, Nanjing, China; School of Software and Electrical Engineering, Swinburne University of Technology, Melbourne, Australia","Liu, H., School of Computer Science and Engineering, Southeast University, Nanjing, China; Li, B., School of Computer Science and Engineering, Southeast University, Nanjing, China; Yang, Y., State Key Laboratory for Novel Software Technology, Nanjing University, Nanjing, China; Ma, W., State Key Laboratory for Novel Software Technology, Nanjing University, Nanjing, China; Jia, R., School of Software and Electrical Engineering, Swinburne University of Technology, Melbourne, Australia","Code smells are used to describe the bad structures in the source code, which could hinder software maintainability, understandability and changeability. Nowadays, scholars mainly focus on the impact of smell on textual change-proneness. However, in comparison to textual changes, structural changes could better reveal the change nature. In practice, not all code change types are equally important in terms of change risk severity levels, and software developers are more interested in particular changes relevant to their current tasks. Therefore, we investigate the relationship between smells and fine-grained structural change-proneness to solve these issues. Our experiment was conducted on 11 typical open source projects. We first employed Fishers exact test and Mann-Whitney test to explore whether smelly files (affected by at least one smell type) had higher structural change-proneness than other files, and whether files with more smell instances are more likely to undergo structural changes, respectively. Multivariate logistic regression model was built to study the relation between each kind of smell and change-proneness with respect to five change categories. Our results showed that: (1) in most cases, smelly files were more prone to structural changes and files with more smell instances tend to undergo higher structural changes; (2) quite a few smell types were related to structural change-proneness, particularly, Refused Parent Bequest (RPB), Message Chains (MCH), Divergent Change (DIVC), Feature Envy (FE) and Shotgun Surgery (SS) increased structural changes for some change categories. However, when controlling the file size Lines of Code (LOC), significant change-proneness of some smells disappeared or the magnitude of significance decreased more or less. © 2018 World Scientific Publishing Company.","change-proneness; code change; Code smell; fine-grained change type","Odors; Open source software; Regression analysis; Change proneness; Code changes; Code smell; Fine-grained changes; Multivariate logistic regressions; Open source projects; Software developer; Software maintainability; Codes (symbols)","National Natural Science Foundation of China, NSFC: 61402103, 61572008, 61572126; Huawei Technologies","Many thanks were given to Dr. Tong Wang for her constructive comments on an earlier draft as well as quick resolution for my Latex typeset problems. This work was partially supported by the National Natural Science Foundation of China under Grant Nos. 61572126, 61572008, 61402103 and partially supported by Huawei Technologies Co., Ltd. under Grant No. YBN2016020009.",,,,,,,,,,"Li, B.; School of Computer Science and Engineering, China; email: bx.li@seu.edu.cn",,"World Scientific Publishing Co. Pte Ltd",02181940,,ISEKE,,"English","Int. J. Software Engineer. Knowledge Engineer.",Article,"Final","",Scopus,2-s2.0-85054031457
"Santos J.A.M., Rocha-Junior J.B., Prates L.C.L., Nascimento R.S.D., Freitas M.F., Mendonça M.G.D.","56712246700;37081769400;57202993697;57199324360;57202982903;7005160540;","A systematic review on the code smell effect",2018,"Journal of Systems and Software","144",,,"450","477",,32,"10.1016/j.jss.2018.07.035","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85050081131&doi=10.1016%2fj.jss.2018.07.035&partnerID=40&md5=b882822659f4a20d49e3fd2c3be4b4c5","Technology Department, State University of Feira de Santana, Bahia, Brazil; Department of Exact Science, State University of Feira de Santana, Bahia, Brazil; Fraunhofer Project Center for Software & Systems Engineering, Federal University of Bahia, Bahia, Brazil; Mathematic Institute, Federal University of Bahia, Bahia, Brazil","Santos, J.A.M., Technology Department, State University of Feira de Santana, Bahia, Brazil; Rocha-Junior, J.B., Department of Exact Science, State University of Feira de Santana, Bahia, Brazil, Fraunhofer Project Center for Software & Systems Engineering, Federal University of Bahia, Bahia, Brazil; Prates, L.C.L., Mathematic Institute, Federal University of Bahia, Bahia, Brazil; Nascimento, R.S.D., Mathematic Institute, Federal University of Bahia, Bahia, Brazil; Freitas, M.F., Mathematic Institute, Federal University of Bahia, Bahia, Brazil; Mendonça, M.G.D., Fraunhofer Project Center for Software & Systems Engineering, Federal University of Bahia, Bahia, Brazil, Mathematic Institute, Federal University of Bahia, Bahia, Brazil","Context: Code smell is a term commonly used to describe potential problems in the design of software. The concept is well accepted by the software engineering community. However, some studies have presented divergent findings about the usefulness of the smell concept as a tool to support software development tasks. The reasons of these divergences have not been considered because the studies are presented independently. Objective: To synthesize current knowledge related to the usefulness of the smell concept. We focused on empirical studies investigating how smells impact the software development, the code smell effect. Method: A systematic review about the smell effect is carried out. We grouped the primary studies findings in a thematic map. Result: The smell concept does not support the evaluation of quality design in practice activities of software development. There is no strong evidence correlating smells and some important software development attributes, such as effort in maintenance. Moreover, the studies point out that human agreement on smell detection is low. Conclusion: In order to improve analysis on the subject, the area needs to better outline: (i) factors affecting human evaluation of smells; and (ii) a classification of types of smells, grouping them according to relevant characteristics. © 2018 Elsevier Inc.","Code smell; Systematic review; Thematic synthesis","Codes (symbols); Maps; Odors; Quality control; Code smell; Design of softwares; Empirical studies; Engineering community; Human evaluation; Potential problems; Quality design; Systematic Review; Software design","International Business Machines Corporation, IBM","Manoel Gomes Mendonça is Professor of Computer Science at the Federal University of Bahia (UFBA). Prof. Mendonça holds a Ph.D. in computer science from the University of Maryland at College Park (UMCP). From 1994 to 1997, he was a visiting scientist and was awarded a doctoral fellowship from IBM Toronto Laboratory’s Centre for Advanced Studies. From 1997 to 2000, he worked as a Faculty Research Associate at UMCP and as a scientist at the Fraunhofer Center Maryland. He joined Salvador University (Brazil) as a Professor in 2000. There he headed the university’s Computing Research Center and helped to create the first computer science master and doctoral programs at his home state of Bahia. From 2008 to 2009, he was the president of the Special Commission for Software Engineering of the Brazilian Computer Society (SBC). He joined UFBA in 2009. There, he has headed the computer science graduate program and the university’s software engineering lab. From 2012 to 2015, he was the Founding Director of the Fraunhofer Project Center for Software and Systems Engineering at UFBA. Dr. Mendonça has published over 150 technical papers. His main research interests are on software engineering and information visualization. He is a member of SBC, and senior member of both IEEE and ACM.","This work was partially supported by SECTI-BA (Bureau of Science and Technology of Bahia) - Fraunhofer Project Center for Software & Systems Eng. agreement 2012/001.",,,,,,,,,"Santos, J.A.M.; Technology Department, Brazil; email: zeamancio@uefs.br",,"Elsevier Inc.",01641212,,JSSOD,,"English","J Syst Software",Article,"Final","",Scopus,2-s2.0-85050081131
"Walter B., Fontana F.A., Ferme V.","14046404000;6601971118;55319324200;","Code smells and their collocations: A large-scale experiment on open-source systems",2018,"Journal of Systems and Software","144",,,"1","21",,15,"10.1016/j.jss.2018.05.057","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85047970347&doi=10.1016%2fj.jss.2018.05.057&partnerID=40&md5=13247a0e7927890a2a6e02889e25dbc8","Faculty of Computing, Poznań University of Technology, Poznań, Poland; Department of Informatics, Systems and Communication University of Milano-Bicocca, Milano, Italy; Software Institute, Faculty of Informatics, USI Lugano, Switzerland","Walter, B., Faculty of Computing, Poznań University of Technology, Poznań, Poland; Fontana, F.A., Department of Informatics, Systems and Communication University of Milano-Bicocca, Milano, Italy; Ferme, V., Software Institute, Faculty of Informatics, USI Lugano, Switzerland","Code smells indicate possible flaws in software design, that could negatively affect system's maintainability. Interactions among smells located in the same classes (i.e., collocated smells) have even more detrimental effect on quality. Extracted frequent patterns of collocated smells could help to understand practical consequences of collocations. In this paper we identify and empirically validate frequent collocations of 14 code smells detected in 92 Java systems, using three approaches: pairwise correlation analysis, PCA and associative rules. To cross-validate the results, we used up to 6 detectors for each smell. Additionally, we examine and compare techniques used to extract the relationships. The contribution is three-fold: (1) we identify and empirically validate relationships among the examined code smells on a large dataset that we made publicly available, (2) we discuss how the choice of code smell detectors affects results, and (3) we analyze the impact of software domain on existence of the smell collocations. Additionally, we found that analytical methods we used to discover collocations, are complementary. Smells collocations display recurring patterns that could help prioritizing the classes affected by code smells to be refactored and developing or enhancing detectors exploiting information about collocations. They can also help the developers focusing on classes deserving more maintenance effort. © 2018","Code smell detectors; Code smells; Collocated smells; Inter-smell relationships; Smell interaction; Source code quality","Codes (symbols); Odors; Open source software; Software design; Code smell; Collocated smells; Inter-smell relationships; Smell interaction; Source code qualities; Open systems",,,,,,,,,,,,"Walter, B.; Faculty of Computing, Poland; email: bartosz.walter@cs.put.poznan.pl",,"Elsevier Inc.",01641212,,JSSOD,,"English","J Syst Software",Article,"Final","",Scopus,2-s2.0-85047970347
"Liu H., Xu Z., Zou Y.","56862404100;57200119166;23491099400;","Deep learning based feature envy detection",2018,"ASE 2018 - Proceedings of the 33rd ACM/IEEE International Conference on Automated Software Engineering",,,,"385","396",,46,"10.1145/3238147.3238166","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85056520897&doi=10.1145%2f3238147.3238166&partnerID=40&md5=00d55dc0fc8e1e85803d2eb565f42674","School of Computer Science and Technology, Beijing Institute of Technology, Beijing, China; Key Laboratory of High Confidence Software Technologies, Peking University, Ministry of Education, Beijing, China; School of Electronics Engineering and Computer Science, Peking University, China","Liu, H., School of Computer Science and Technology, Beijing Institute of Technology, Beijing, China; Xu, Z., School of Computer Science and Technology, Beijing Institute of Technology, Beijing, China; Zou, Y., Key Laboratory of High Confidence Software Technologies, Peking University, Ministry of Education, Beijing, China, School of Electronics Engineering and Computer Science, Peking University, China","Software refactoring is widely employed to improve software quality. A key step in software refactoring is to identify which part of the software should be refactored. To facilitate the identification, a number of approaches have been proposed to identify certain structures in the code (called code smells) that suggest the possibility of refactoring. Most of such approaches rely on manually designed heuristics to map manually selected source code metrics to predictions. However, it is challenging to manually select the best features, especially textual features. It is also difficult to manually construct the optimal heuristics. To this end, in this paper we propose a deep learning based novel approach to detecting feature envy, one of the most common code smells. The key insight is that deep neural networks and advanced deep learning techniques could automatically select features (especially textual features) of source code for feature envy detection, and could automatically build the complex mapping between such features and predictions. We also propose an automatic approach to generating labeled training data for the neural network based classifier, which does not require any human intervention. Evaluation results on open-source applications suggest that the proposed approach significantly improves the state-of-the-art in both detecting feature envy smells and recommending destinations for identified smelly methods. © 2018 Copyright held by the owner/author(s).","Code smells; Deep learning; Feature envy; Software refactoring","Classification (of information); Codes (symbols); Computer software selection and evaluation; Deep learning; Deep neural networks; Odors; Open source software; Automatic approaches; Code smell; Feature envy; Labeled training data; Learning techniques; Open source application; Software refactoring; Source code metrics; Feature extraction","National Natural Science Foundation of China, NSFC: 61472034,61772071, 61690205; National Basic Research Program of China (973 Program): 2016YFB1000801","This work is supported by the National Natural Science Foundation of China under Grant No.: 61690205, 61472034,61772071, and National Key Research and Development Program of China under Grant No.: 2016YFB1000801",,,,,,,,,,"Liu, H.; School of Computer Science and Technology, China; email: Liuhui08@bit.edu.cn","Kastner C.Huchard M.Fraser G.","Association for Computing Machinery, Inc",,9781450359375,,,"English","ASE - Proc. ACM/IEEE Int. Conf. Autom. Soft. Eng.",Conference Paper,"Final","",Scopus,2-s2.0-85056520897
"Krüger J., Fenske W., Thüm T., Aporius D., Saake G., Leich T.","57191578129;37161126200;35761739500;57204431248;7004621677;13005454000;","Apo-games-a case study for reverse engineering variability from cloned Java variants",2018,"ACM International Conference Proceeding Series","1",,,"251","256",,16,"10.1145/3233027.3236403","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85055553040&doi=10.1145%2f3233027.3236403&partnerID=40&md5=87e1efe515bf4a13895db6c2d1f4979d","Harz University of Applied Science, Otto-von-Guericke-University, Wernigerode, Germany; Harz University of Applied Science, Otto-von-Guericke-University, Magdeburg, Germany; Otto-von-Guericke-University, Magdeburg, Germany; Technische Universität Braunschweig, Braunschweig, Germany; Eudemonia Solutions AG, Magdeburg, Germany; Harz University of Applied Sciences, METOP GmbH, Wernigerode, Germany; Harz University of Applied Sciences, METOP GmbH, Magdeburg, Germany","Krüger, J., Harz University of Applied Science, Otto-von-Guericke-University, Wernigerode, Germany, Harz University of Applied Science, Otto-von-Guericke-University, Magdeburg, Germany; Fenske, W., Otto-von-Guericke-University, Magdeburg, Germany; Thüm, T., Technische Universität Braunschweig, Braunschweig, Germany; Aporius, D., Eudemonia Solutions AG, Magdeburg, Germany; Saake, G., Harz University of Applied Science, Otto-von-Guericke-University, Magdeburg, Germany; Leich, T., Harz University of Applied Sciences, METOP GmbH, Wernigerode, Germany, Harz University of Applied Sciences, METOP GmbH, Magdeburg, Germany","Software-product-line engineering is an approach to systematically manage reusable software features and has been widely adopted in practice. Still, in most cases, organizations start with a single product that they clone and modify when new customer requirements arise (a.k.a. Clone-and-own). With an increasing number of variants, maintenance can become challenging and organizations may consider migrating towards a software product line, which is referred to as extractive approach. While this is the most common approach in practice, techniques to extract variability from cloned variants still fall short in several regards. In particular, this accounts for the low accuracy of automated analyses and refactoring, our limited understanding of the costs involved, and the high manual effort. A main reason for these limitations is the lack of realistic case studies. To tackle this problem, we provide a set of cloned variants. In this paper, we characterize these variants and challenge the research community to apply techniques for reverse engineering feature models, feature location, code smell analysis, architecture recovery, and the migration towards a software product line. By evaluating solutions with the developer of these variants, we aim to contribute to a larger body of knowledge on this real-world case study. © 2018 Copyright held by the owner/author(s).","Case study; Data set; Extractive approach; Feature location; Reverse engineering; Software-product-line engineering","Cloning; Computer software reusability; Java programming language; Reverse engineering; Software design; Architecture recovery; Customer requirements; Data set; Extractive approach; Feature location; Research communities; Software Product Line; Software product line engineerings; Feature extraction",,,,,,,,,,,,,"Light A.Lee Y.Lee Y.Garde J.Botterweck G.Nadi S.Kanstrup A.M.Borba P.Vines J.Berger T.Mannisto T.Teli M.Brandt E.Bodker K.Benavides D.","Association for Computing Machinery",,9781450363716; 9781450364645,,,"English","ACM Int. Conf. Proc. Ser.",Conference Paper,"Final","",Scopus,2-s2.0-85055553040
"Faujdar N., Srivastav K., Gupta M., Saraswat S.","56910217600;57203938289;57203936750;56785819200;","Detection Strategies of Bad Smells in Highly Configurable Software",2018,"Proceedings of the 8th International Conference Confluence 2018 on Cloud Computing, Data Science and Engineering, Confluence 2018",,,"8443066","31","35",,1,"10.1109/CONFLUENCE.2018.8443066","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85053687595&doi=10.1109%2fCONFLUENCE.2018.8443066&partnerID=40&md5=5188ed8227367c3bff4410e3f5d2e80e","Amity University, Department of CSE, Noida, India","Faujdar, N., Amity University, Department of CSE, Noida, India; Srivastav, K., Amity University, Department of CSE, Noida, India; Gupta, M., Amity University, Department of CSE, Noida, India; Saraswat, S., Amity University, Department of CSE, Noida, India","Software maintenance is a tough work and when code become very large its hard to track the changes and bad code makes it harder. One way to track the quality of software is to track for bad smells in the software. They can help track the code which can cause problems in near future. The objective is to build a bot that crawls through our code daily and gives a status of smells in the code. To achieve this, developed a set of instruction and strategies and implemented them in python to parse code of Java and track the software with time. All statistics are shown with the python library matplotlib and the bot can be automated to crawl in Linux, Mac, and Windows. Found that, the bot can detect smells which are not detectable by the developer. The life of software can be increased by a refracting the code time to time with the help of smells detected by the bot. Only Java is supported till now but this paper increased the support to other languages also. © 2018 IEEE.","Bad smells; Code Smells; Software Maintainability","Cloud computing; Codes (symbols); Computer operating systems; High level languages; Odors; Bad smells; Code smell; Quality of softwares; Software maintainability; Java programming language",,,,,,,,,,,,,,"Institute of Electrical and Electronics Engineers Inc.",,9781538617182,,,"English","Proc. Int. Conf. Conflu. Cloud Comput., Data Sci. Eng., Conflu.",Conference Paper,"Final","",Scopus,2-s2.0-85053687595
"Saini V., Sajnani H., Lopes C.","56553828400;53878296500;7103222266;","Cloned and non-cloned Java methods: a comparative study",2018,"Empirical Software Engineering","23","4",,"2232","2278",,6,"10.1007/s10664-017-9572-7","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85038089408&doi=10.1007%2fs10664-017-9572-7&partnerID=40&md5=f1d11b414cfaf5968cf72883b7433263","University of California Irvine, Irvine, CA, United States; Microsoft, Redmond, WA, United States","Saini, V., University of California Irvine, Irvine, CA, United States; Sajnani, H., Microsoft, Redmond, WA, United States; Lopes, C., University of California Irvine, Irvine, CA, United States","Reusing code via copy-and-paste, with or without modification is a common behavior observed in software engineering. Traditionally, cloning has been considered as a bad smell suggesting flaws in design decisions. Many studies exist targeting clone discovery, removal, and refactoring. However there are not many studies which empirically investigate and compare the quality of cloned code to that of the code which has not been cloned. To this end, we present a statistical study that shows whether qualitative differences exist between cloned methods and non-cloned methods in Java projects. The dataset consists of 3562 open source Java projects containing 412,705 cloned and 616,604 non-cloned methods. The study uses 27 software metrics as a proxy for quality, spanning across complexity, modularity, and documentation (code-comments) categories. When controlling for size, no statistically significant differences were found between cloned and non-cloned methods for most of the metrics, except for three of them. The main statistically significant difference found was that cloned methods are on an average 18% smaller than non-cloned methods. After doing a mixed method analysis, we provide some insight for why cloned methods are smaller. © 2017, Springer Science+Business Media, LLC.","Code clones; Open source software; Quality metrics","Codes (symbols); Copying; Java programming language; Open source software; Open systems; Code clone; Comparative studies; Design decisions; Qualitative differences; Quality metrics; Software metrics; Statistical study; Statistically significant difference; Cloning","National Science Foundation, NSF; Directorate for Computer and Information Science and Engineering, CISE: 1218228; Defense Advanced Research Projects Agency, DARPA","Acknowledgments This work was partially supported by a grant from the National Science Foundation No.1218228, and by the DARPA MUSE program.",,,,,,,,,,"Saini, V.; University of California IrvineUnited States; email: vpsaini@uci.edu",,"Springer New York LLC",13823256,,ESENF,,"English","Empir Software Eng",Article,"Final","",Scopus,2-s2.0-85038089408
"Liu H., Yu Y., Li B., Yang Y., Jia R.","57196220498;35236020500;9334814500;55883652400;57204005440;","Are Smell-Based Metrics Actually Useful in Effort-Aware Structural Change-Proneness Prediction? An Empirical Study",2018,"Proceedings - Asia-Pacific Software Engineering Conference, APSEC","2018-December",,"8719536","315","324",,4,"10.1109/APSEC.2018.00046","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85066804270&doi=10.1109%2fAPSEC.2018.00046&partnerID=40&md5=669fc991a8bdba3fa2d88342df8ee13e","School of Computer Science and Engineering, Southeast University, Nanjing, China; Centre for Research in Computing, Open University, United Kingdom; State Key Laboratory for Novel Software Technology, Nanjing University, Nanjing, China; School of Software and Electrical Engineering, Swinburne University of Technology, Melbourne, Australia","Liu, H., School of Computer Science and Engineering, Southeast University, Nanjing, China; Yu, Y., Centre for Research in Computing, Open University, United Kingdom; Li, B., School of Computer Science and Engineering, Southeast University, Nanjing, China; Yang, Y., State Key Laboratory for Novel Software Technology, Nanjing University, Nanjing, China; Jia, R., School of Software and Electrical Engineering, Swinburne University of Technology, Melbourne, Australia","Bad code smells (also named as code smells) are symptoms of poor design choices in implementation. Existing increases the likelihood of subsequent changes (i.e., change-proness). However, to the best of our knowledge, no prior studies have leveraged smell-based metrics to predict particular change type (i.e., structural changes). Moreover, when evaluating the effectiveness of smell-based metrics in structural change-proneness prediction, none of existing studies take into account of the effort inspecting those change-prone source code. In this paper, we consider five smell-based metrics for effort-aware structural change-proneness prediction and compare these metrics with a baseline of well-known CK metrics in predicting particular categories of change types. Specifically, we first employ univariate logistic regression to analyze the correlation between each smellbased metric and structural change-proneness. Then, we build multivariate prediction models to examine the effectiveness of smell-based metrics in effort-aware structural change-proneness prediction when used alone and used together with the baseline metrics, respectively. Our experiments are conducted on six Java open-source projects with up to 60 versions and results indicate that: (1) all smell-based metrics are significantly related to structural change-proneness, except metric ANOS in hive and SCM in camel after removing confounding effect of file size; (2) in most cases, smell-based metrics outperform the baseline metrics in predicting structural change-proneness; and (3) when used together with the baseline metrics, the smell-based metrics are more effective to predict change-prone files with being aware of inspection effort. © 2018 IEEE.","change-proneness prediction; code smell; effort-aware; structual change","Codes (symbols); Knowledge management; Odors; Open source software; Change proneness; Code smell; effort-aware; Empirical studies; Logistic regressions; Open source projects; Prediction model; structual change; Forecasting","Engineering and Physical Sciences Research Council, EPSRC: EP/R013144/1; National Natural Science Foundation of China, NSFC: 61402103, 61572008, 61572126","This work was supported in part by the National Natural Science Foundation of China under Grants No.61572126, No.61572008 and No.61402103. Besides, this work was also supported in part by SAUSE: Secure, Adaptive, Usable Software Engineering (EPSRC Platform Grant EP/R013144/1).",,,,,,,,,,,,"IEEE Computer Society",15301362,9781728119700,,,"English","Proc. Asia Pac. Softw. Eng. Conf. APSEC",Conference Paper,"Final","All Open Access, Green",Scopus,2-s2.0-85066804270
"Zhao Z., Liu M., Deb A.","57193160878;57209026313;57209023953;","Safely and quickly deploying new features with a staged rollout framework using sequential test and adaptive experimental design",2018,"Proceedings - 3rd International Conference on Computational Intelligence and Applications, ICCIA 2018",,,"8711492","59","70",,4,"10.1109/ICCIA.2018.00019","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85066301227&doi=10.1109%2fICCIA.2018.00019&partnerID=40&md5=3a57869bf918f92319fc77d3d082b089","Uber Technologies, Inc., San Francisco, United States","Zhao, Z., Uber Technologies, Inc., San Francisco, United States; Liu, M., Uber Technologies, Inc., San Francisco, United States; Deb, A., Uber Technologies, Inc., San Francisco, United States","During the rapid development cycle for Internet products (websites and mobile apps), new features are developed and rolled out to users constantly. Features with code defects or design flaws can cause outages and significant degradation of user experience. The traditional method of code review and change management can be time-consuming and error-prone. In order to make the feature rollout process safe and fast, this paper proposes a methodology for rolling out features in an automated way using an adaptive experimental design. Under this framework, a feature is gradually ramped up from a small proportion of users to a larger population based on real-time evaluation of the performance of important metrics. If there are any regression detected during the ramp-up step, the ramp-up process stops and the feature developer is alerted. There are two main algorithm components powering this framework: 1) a continuous monitoring algorithm - using a variant of the sequential probability ratio test (SPRT) to monitor the feature performance metrics and alert feature developers when a metric degradation is detected, 2) an automated ramp-up algorithm - deciding when and how to ramp up to the next stage with larger sample size. This paper presents one monitoring algorithm and three ramping up algorithms including time-based, power-based, and risk-based (a Bayesian approach) schedules. These algorithms are evaluated and compared on both simulated data and real data. There are three benefits provided by this framework for feature rollout: 1) for defective features, it can detect the regression early and reduce negative effect, 2) for healthy features, it rolls out the feature quickly, 3) it reduces the need for manual intervention via the automation of the feature rollout process. © 2018 IEEE.","Adaptive experiment design; Bayesian; Bootstrap; Experimentation; Jackknife; Markov decision process; Sequential test","Artificial intelligence; Automation; Bayesian networks; Design of experiments; Markov processes; Statistical tests; Statistics; Bayesian; Bootstrap; Experiment design; Experimentation; Jackknife; Markov Decision Processes; Sequential tests; Feature extraction",,,,,,,,,,,,,,"Institute of Electrical and Electronics Engineers Inc.",,9780769565286,,,"English","Proc. - Int. Conf. Comput. Intell. Appl., ICCIA",Conference Paper,"Final","All Open Access, Green",Scopus,2-s2.0-85066301227
"Mekruksavanich S.","35174894700;","Applied Artificial Optimization Algorithm in Design Flaws Detection",2018,"2018 International Joint Symposium on Artificial Intelligence and Natural Language Processing, iSAI-NLP 2018 - Proceedings",,,"8692943","","",,,"10.1109/iSAI-NLP.2018.8692943","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85065084302&doi=10.1109%2fiSAI-NLP.2018.8692943&partnerID=40&md5=26c1ca2bf4a2d04793299a5893786316","Department of Computer Engineering, School of Information and Communication Technology, University of Phayao, Phayao, Thailand","Mekruksavanich, S., Department of Computer Engineering, School of Information and Communication Technology, University of Phayao, Phayao, Thailand","The detection of design flaws is one of the most important aspects of software quality control, and the process should therefore be an integral part of the development and also the maintenance of software. It is possible to lower costs and extend the useful like cycle of the software simply by detecting design flaws at an early stage, and therefore attempts have been made to automate the procedures involved in detecting and fixing these flaws. One of the most common ways of detecting flaws is through the use of heuristic metrics which use predetermined standards as a means of analyzing the findings. While the approach can work successfully, the problem lies in the determination of those standards, or thresholds. This research study seeks to develop an enhanced method to improve threshold determination to be applied in flaw detection using metric-based designs. Accordingly, for each metric, an algorithm was employed for optimization of the contribution metrics to determine the threshold. The model produced threshold values which could then be adjusted to fit the requirements of the software data input. The findings from the experiments revealed that this approach could generate more appropriate thresholds for application in this context. In addition, the technique was relatively simple and could be used with different software programming languages, reducing the implementation time, and eliminating the need for the specialist expert support which would have traditionally been required in metric-based detection methods. © 2018 IEEE.","Artificial Optimization Algorithm; Design Flaws; Detection; Refactoring","Artificial intelligence; Computer software selection and evaluation; Error detection; Optimization; Detection methods; Optimization algorithms; Refactorings; Research studies; Software programming; Software quality control; Specialist experts; Threshold determination; Natural language processing systems",,"ACKNOWLEDGMENT This research was supported in part by the School of Information and Communication Technology, University of Phayao, Thailand.",,,,,,,,,,"Mekruksavanich, S.; Department of Computer Engineering, Thailand; email: sakorn.me@up.ac.th",,"Institute of Electrical and Electronics Engineers Inc.",,9781728101644,,,"English","Int. Jt. Symp. Artif. Intell. Natural Lang. Process., iSAI-NLP - Proc.",Conference Paper,"Final","",Scopus,2-s2.0-85065084302
[No author name available],[No author id available],"Proceedings - International Computer Software and Applications Conference",2018,"Proceedings - International Computer Software and Applications Conference","1",,,"","",1911,,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-85055455675&partnerID=40&md5=ab9f431df7826503520e8c3d89d2e089",,"","The proceedings contain 158 papers. The topics discussed include: an empirical analysis on web service anti-pattern detection using a machine learning framework; DevOps improvements for reduced cycle times with integrated test optimizations for continuous integration; a framework for updating functionalities based on the MAPE loop mechanism; combining constraint solving with different MOEAs for configuring large software product lines: a case study; visualizing a tangled change for supporting its decomposition and commit construction; an assertion framework for mobile robotic programming with spatial reasoning; DistGear: a lightweight event-driven framework for developing distributed applications; a lightweight program dependence based approach to concurrent mutation analysis; SPESC: a specification language for smart contracts; an insight into the impact of dockerfile evolutionary trajectories on quality and latency; automatic detection of outdated comments during code changes; search-based efficient automated program repair using mutation and fault localization; identifying supplementary bug-fix commits; a generalized approach to verification condition generation; runtime verification of robots collision avoidance case study; formalization and verification of mobile systems calculus using the rewriting engine Maude; predicting the breakability of blocking bug pairs; model checking of embedded systems using RTCTL while generating timed Kripke structure; PERDICE: towards discovering software inefficiencies leading to cache misses and branch mispredictions; and loop invariant generation for non-monotone loop structures.",,,,,,,,,,,,,,,"Lung C.-H.Conte T.Liu L.Akiyama T.Hasan K.Tovar E.Takakura H.Claycomb W.Cimato S.Yang J.-J.Zhang Z.Ahamed S.I.Reisman S.Demartini C.Nakamura M.","IEEE Computer Society",07303157,9781538626665,PSICD,,"English","Proc Int Comput Software Appl Conf",Conference Review,"Final","",Scopus,2-s2.0-85055455675
"Wang Y., Hu S., Yin L., Zhou X.","57204397980;57204391861;57204396882;14017207600;","Using Code Evolution Information to Improve the Quality of Labels in Code Smell Datasets",2018,"Proceedings - International Computer Software and Applications Conference","1",,"8377639","48","53",,1,"10.1109/COMPSAC.2018.00015","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85055446660&doi=10.1109%2fCOMPSAC.2018.00015&partnerID=40&md5=1f214cb0dd32cce58b9061f6e84b8e89","School of Data and Computer Science, Sun Yat-sen University, Guangzhou, 510275, China","Wang, Y., School of Data and Computer Science, Sun Yat-sen University, Guangzhou, 510275, China; Hu, S., School of Data and Computer Science, Sun Yat-sen University, Guangzhou, 510275, China; Yin, L., School of Data and Computer Science, Sun Yat-sen University, Guangzhou, 510275, China; Zhou, X., School of Data and Computer Science, Sun Yat-sen University, Guangzhou, 510275, China","Several approaches are proposed to detect code smells. A set of important approaches are based on machine learning algorithms, which require the code smells have been labeled in source codes as training data firstly. The common labeling approaches are based on manual or tools, but it is difficult for current approaches to get reliable large-scale datasets. In this paper, an approach using the evolution information of source codes is proposed to get large-scale and more reliable training datasets for detecting code smells based on machine learning algorithms. Our approach analyzes the evolving of the source code smells firstly labeled by a tool from the baseline version into the contrastive version of a software system, and then constructs training datasets based on those 'changed smells'. Experiments conducted on three open source software projects for detecting four types of code smells(which are Data Class, God Class, Brain Class and Brain Method) show that the models obtained by changed smells datasets have better performance on code smell detection than those obtained by unchanged smells datasets (with an average improvement rate of 7.8% and a maximum increase of 30%). The experiments results indicate that using the evolution information of source codes can construct more reliable training datasets for detecting code smells based on machine learning algorithms. © 2018 IEEE.","Code smells; Machine learning; Refactoring; Training dataset","Application programs; Artificial intelligence; Codes (symbols); Computer programming languages; Information use; Learning systems; Odors; Open source software; Open systems; Code smell; Large-scale datasets; Open source software projects; Refactorings; Software systems; Training data; Training data sets; Training dataset; Learning algorithms","2016B030305006","ACKNOWLEDGEMENTS This paper is supported by the Important Science and Technology Specific Project of Guangdong Province of China(Grant No.2016B030305006).",,,,,,,,,,,"Lung C.-H.Conte T.Liu L.Akiyama T.Hasan K.Tovar E.Takakura H.Claycomb W.Cimato S.Yang J.-J.Zhang Z.Ahamed S.I.Reisman S.Demartini C.Nakamura M.","IEEE Computer Society",07303157,9781538626665,PSICD,,"English","Proc Int Comput Software Appl Conf",Conference Paper,"Final","",Scopus,2-s2.0-85055446660
"Kumar L., Sureka A.","56120791500;55922095600;","An Empirical Analysis on Web Service Anti-pattern Detection Using a Machine Learning Framework",2018,"Proceedings - International Computer Software and Applications Conference","1",,"8377634","2","11",,15,"10.1109/COMPSAC.2018.00010","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85055422017&doi=10.1109%2fCOMPSAC.2018.00010&partnerID=40&md5=113dc4f5016dfb79b9dc7d7f916be276","BITS Pilani Hyderabad, India; Ashoka University, India","Kumar, L., BITS Pilani Hyderabad, India; Sureka, A., Ashoka University, India","Web Services are application components characterised by interoperability, extensibility, distributed application development and service oriented architecture. A complex distributed application can be developed by combing several third-party web-services. Anti-patterns are counter-productive and poor design and practices. Web-services suffer from a multitude of anti-patterns such as God object Web service and Fine grained Web service. Our work is motivated by the need to build techniques for automatically detecting common web-services anti-patterns by static analysis of the source code implementing a web-service. Our approach is based on the premise that summary values of object oriented source code metrics computed at a web-service level can be used as a predictor for anti-patterns. We present an empirical analysis of 4 data sampling techniques to encounter the class imbalance problem, 5 feature ranking techniques to identify the most informative and relevant features and 8 machine learning algorithms for predicting 5 different types of anti-patterns on 226 real-world web-services across several domains. We conclude that it is possible to predict anti-patterns using source code metrics and a machine learning framework. Our analysis reveals that the best performing classification algorithm is Random Forest, best performing data sampling technique is SMOTE and the best performing feature ranking method is OneR. © 2018 IEEE.","Anti Patterns; Empirical Software Engineering; Feature Selection; Imbalanced Learning; Machine Learning; Predictive Modeling; Service Oriented Architecture; Software Analytics; Source Code Analysis; Source Code Metrics; Web Services","Application programs; Artificial intelligence; Codes (symbols); Computer programming languages; Decision trees; Design for testability; Feature extraction; Information services; Interoperability; Learning algorithms; Learning systems; Object oriented programming; Pattern recognition; Predictive analytics; Service oriented architecture (SOA); Static analysis; Websites; Anti-patterns; Empirical Software Engineering; Imbalanced Learning; Predictive modeling; Source code analysis; Source code metrics; Web services",,,,,,,,,,,,,"Lung C.-H.Conte T.Liu L.Akiyama T.Hasan K.Tovar E.Takakura H.Claycomb W.Cimato S.Yang J.-J.Zhang Z.Ahamed S.I.Reisman S.Demartini C.Nakamura M.","IEEE Computer Society",07303157,9781538626665,PSICD,,"English","Proc Int Comput Software Appl Conf",Conference Paper,"Final","",Scopus,2-s2.0-85055422017
"Mori A., Vale G., Viggiato M., Oliveira J., Figueiredo E., Cirilo E., Jamshidi P., Kastner C.","57203393001;56023110600;57203384629;57190229935;57213806535;23476361200;34880055700;35547901100;","Evaluating domain-specific metric thresholds: An empirical study",2018,"Proceedings - International Conference on Software Engineering",,,,"41","50",,16,"10.1145/3194164.3194173","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85051486330&doi=10.1145%2f3194164.3194173&partnerID=40&md5=4dc45a9f967364a60204d0d376da94bd","Computer Science Department, Federal University of Minas Gerais (UFMG), Belo Horizonte, Brazil; Department of Informatics and Mathematics, University of Passau, Passau, Germany; Computer Science Department, Pontifical Catholic University of Minas Gerais (PUC-Minas), Belo Horizonte, Brazil; Computer Science Department, Federal University of Sao Joao Del-Rei (UFSJ), Sao Joao del-Rei, Brazil; Institute for Software Research, Carnegie Mellon University (CMU), Pittsburgh, United States","Mori, A., Computer Science Department, Federal University of Minas Gerais (UFMG), Belo Horizonte, Brazil; Vale, G., Department of Informatics and Mathematics, University of Passau, Passau, Germany; Viggiato, M., Computer Science Department, Federal University of Minas Gerais (UFMG), Belo Horizonte, Brazil; Oliveira, J., Computer Science Department, Pontifical Catholic University of Minas Gerais (PUC-Minas), Belo Horizonte, Brazil; Figueiredo, E., Computer Science Department, Federal University of Minas Gerais (UFMG), Belo Horizonte, Brazil, Institute for Software Research, Carnegie Mellon University (CMU), Pittsburgh, United States; Cirilo, E., Computer Science Department, Federal University of Sao Joao Del-Rei (UFSJ), Sao Joao del-Rei, Brazil; Jamshidi, P., Institute for Software Research, Carnegie Mellon University (CMU), Pittsburgh, United States; Kastner, C., Institute for Software Research, Carnegie Mellon University (CMU), Pittsburgh, United States","Software metrics and thresholds provide means to quantify several quality attributes of software systems. Indeed, they have been used in a wide variety of methods and tools for detecting different sorts of technical debts, such as code smells. Unfortunately, these methods and tools do not take into account characteristics of software domains, as the intrinsic complexity of geo-localization and scientific software systems or the simple protocols employed by messaging applications. Instead, they rely on generic thresholds that are derived from heterogeneous systems. Although derivation of reliable thresholds has long been a concern, we still lack empirical evidence about threshold variation across distinct software domains. To tackle this limitation, this paper investigates whether and how thresholds vary across domains by presenting a large-scale study on 3,107 software systems from 15 domains. We analyzed the derivation and distribution of thresholds based on 8 well-known source code metrics. As a result, we observed that software domain and size are relevant factors to be considered when building benchmarks for threshold derivation. Moreover, we also observed that domain-specific metric thresholds are more appropriated than generic ones for code smell detection. © 2018 ACM.","software domains; software metrics; thresholds","Codes (symbols); Heterogeneous systems; Large-scale studies; Messaging applications; Scientific softwares; Software domains; Software metrics; Source code metrics; thresholds; Application programs","Coordenação de Aperfeiçoamento de Pessoal de Nível Superior, CAPES; Conselho Nacional de Desenvolvimento Científico e Tecnológico, CNPq: 290136/2015-6, 424340/2016-0; Fundação de Amparo à Pesquisa do Estado de Minas Gerais, FAPEMIG: PPM-00651-17","This research was partially supported by Brazilian funding agencies: CNPq (Grant 290136/2015-6 and 424340/2016-0), CAPES, and FAPEMIG (Grant PPM-00651-17).",,,,,,,,,,,,"IEEE Computer Society",02705257,9781450357135,PCSED,,"English","Proc Int Conf Software Eng",Conference Paper,"Final","",Scopus,2-s2.0-85051486330
"Koch P., Schekotihin K., Jannach D., Hofer B., Wotawa F., Schmitz T.","57192979750;57202912802;6602129680;7005768844;6603677377;56026322200;","Combining spreadsheet smells for improved fault prediction",2018,"Proceedings - International Conference on Software Engineering",,,,"25","28",,3,"10.1145/3183399.3183402","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85049772205&doi=10.1145%2f3183399.3183402&partnerID=40&md5=b053fdc49293eef2acce0cd7a2205897","AAU Klagenfurt, Austria; Graz University of Technology, Austria; TU Dortmund, Germany","Koch, P., AAU Klagenfurt, Austria; Schekotihin, K., AAU Klagenfurt, Austria; Jannach, D., AAU Klagenfurt, Austria; Hofer, B., Graz University of Technology, Austria; Wotawa, F., Graz University of Technology, Austria; Schmitz, T., TU Dortmund, Germany","Spreadsheets are commonly used in organizations as a programming tool for business-related calculations and decision making. Since faults in spreadsheets can have severe business impacts, a number of approaches from general software engineering have been applied to spreadsheets in recent years, among them the concept of code smells. Smells can in particular be used for the task of fault prediction. An analysis of existing spreadsheet smells, however, revealed that the predictive power of individual smells can be limited. In this work we therefore propose a machine learning based approach which combines the predictions of individual smells by using an AdaBoost ensemble classifier. Experiments on two public datasets containing real-world spreadsheet faults show significant improvements in terms of fault prediction accuracy. © 2018 Association for Computing Machinery.","Fault Prediction; Spreadsheet QA; Spreadsheet Smells","Adaptive boosting; Decision making; Forecasting; Learning systems; Odors; Software engineering; Business impact; Code smell; Ensemble classifiers; Fault prediction; Predictive power; Programming tools; Real-world; Spreadsheets",,,,,,,,,,,,,,"IEEE Computer Society",02705257,9781450356626,PCSED,,"English","Proc Int Conf Software Eng",Conference Paper,"Final","All Open Access, Bronze, Green",Scopus,2-s2.0-85049772205
"Sharma T.","25224153100;","Detecting and managing code smells: Research and practice",2018,"Proceedings - International Conference on Software Engineering",,,,"546","547",,1,"10.1145/3183440.3183460","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85049690506&doi=10.1145%2f3183440.3183460&partnerID=40&md5=759b627aa88b43f48d0a82e9450c545c","Dept. of Management Science and Technology, Athens University of Economics and Business, Athens, Greece","Sharma, T., Dept. of Management Science and Technology, Athens University of Economics and Business, Athens, Greece","Code smells indicate the presence of quality problems that make the software hard to maintain and evolve. A software development team can keep their software maintainable by identifying smells and refactor them. In the first part of the session, we present a comprehensive overview of the literature concerning smells covering various dimensions of the metaphor including defining characteristics, classification, types, as well as causes and impacts of smells. In the second part, we delve into the details of smell detection methods prevailed currently both in research prototypes and industrial tools. The final part present actionable and pragmatic strategies for practitioners to avoid, detect, and eradicate smells from their codebase. © 2018 ACM.","Antipatterns; Code Quality; Code Smells; Smell Detection Tools; Software Maintenance; Software Quality; Technical Debt","Codes (symbols); Computer software maintenance; Computer software selection and evaluation; Industrial research; Odors; Anti-patterns; Code quality; Code smell; Detection tools; Software Quality; Technical debts; Software design","Horizon 2020 Framework Programme, H2020: 642954",,,,,,,,,,,"Sharma, T.; Dept. of Management Science and Technology, Greece; email: tushar@aueb.gr",,"IEEE Computer Society",02705257,9781450356633,PCSED,,"English","Proc Int Conf Software Eng",Conference Paper,"Final","All Open Access, Green",Scopus,2-s2.0-85049690506
"Azadi U., Fontana F.A., Zanoni M.","57202893233;6601971118;56599129300;","Poster: Machine learning based code smell detection through WekaNose",2018,"Proceedings - International Conference on Software Engineering",,,,"288","289",,11,"10.1145/3183440.3194974","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85049672648&doi=10.1145%2f3183440.3194974&partnerID=40&md5=43c3c8842795418bc59a1a63e1dd0adc","Universit degli Studi di Milano Bicocca, Milan, Italy","Azadi, U., Universit degli Studi di Milano Bicocca, Milan, Italy; Fontana, F.A., Universit degli Studi di Milano Bicocca, Milan, Italy; Zanoni, M., Universit degli Studi di Milano Bicocca, Milan, Italy","Code smells can be subjectively interpreted, the results provided by detectors are usually different, the agreement in the results is scarce, and a benchmark for the comparison of these results is not yet available. The main approaches used to detect code smells are based on the computation of a set of metrics. However code smell detectors often use different metrics and/or different thresholds, according to their detection rules. As result of this inconsistency the number of detected smells can increase or decrease accordingly, and this makes hard to understand when, for a specific software, a certain characteristic identifies a code smell or not. In this work, we introduce WekaNose, a tool that allows to perform an experiment to study code smell detection through machine learning techniques. The experiment's purpose is to select rules, and/or obtain trained algorithms, that can classify an instance (method or class) as affected or not by a code smell. These rules have the main advantage of being extracted through an example-based approach, rather then a heuristic-based one. © 2018 Authors.",,"Artificial intelligence; Learning systems; Odors; Software engineering; Code smell; Detection rules; Example based; Machine learning techniques; Codes (symbols)",,,,,,,,,,,,,,"IEEE Computer Society",02705257,9781450356633,PCSED,,"English","Proc Int Conf Software Eng",Conference Paper,"Final","",Scopus,2-s2.0-85049672648
"Gupta A., Suri B., Kumar V., Misra S., Blažauskas T., Damaševičius R.","57195277608;55515690800;57203334494;57964890500;35145439900;6603451290;","Software code smell prediction model using Shannon, Rényi and Tsallis entropies",2018,"Entropy","20","5","372","","",,23,"10.3390/e20050372","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85051576215&doi=10.3390%2fe20050372&partnerID=40&md5=c0d517893324f7d9c802c0f773833b2f","Department of Computer Science and Engineering, Amity School of Engineering and Technology, New Delhi, 110061, India; University School of Information, Communication and Technology, Guru Gobind Singh Indraprastha University, New Delhi, 110078, India; Department of Mathematics, Amity School of Engineering and Technology, New Delhi, 110061, India; Center of Information and Communication Technology/Engineering (ICT/ICE) Research, New Building of Covenant University Center for Research Innovation and Development (CUCRID), Covenant University, Ota, 112231, Nigeria; Department of Computer Engineering, Atilim University, Incek, 06836, Turkey; Department of Software Engineering, Kaunas University of Technology, Kaunas, 44249, Lithuania","Gupta, A., Department of Computer Science and Engineering, Amity School of Engineering and Technology, New Delhi, 110061, India; Suri, B., University School of Information, Communication and Technology, Guru Gobind Singh Indraprastha University, New Delhi, 110078, India; Kumar, V., Department of Mathematics, Amity School of Engineering and Technology, New Delhi, 110061, India; Misra, S., Center of Information and Communication Technology/Engineering (ICT/ICE) Research, New Building of Covenant University Center for Research Innovation and Development (CUCRID), Covenant University, Ota, 112231, Nigeria, Department of Computer Engineering, Atilim University, Incek, 06836, Turkey; Blažauskas, T., Department of Software Engineering, Kaunas University of Technology, Kaunas, 44249, Lithuania; Damaševičius, R., Department of Software Engineering, Kaunas University of Technology, Kaunas, 44249, Lithuania","The current era demands high quality software in a limited time period to achieve new goals and heights. To meet user requirements, the source codes undergo frequent modifications which can generate the bad smells in software that deteriorate the quality and reliability of software. Source code of the open source software is easily accessible by any developer, thus frequently modifiable. In this paper, we have proposed a mathematical model to predict the bad smells using the concept of entropy as defined by the Information Theory. Open-source software Apache Abdera is taken into consideration for calculating the bad smells. Bad smells are collected using a detection tool from sub components of the Apache Abdera project, and different measures of entropy (Shannon, Rényi and Tsallis entropy). By applying non-linear regression techniques, the bad smells that can arise in the future versions of software are predicted based on the observed bad smells and entropy measures. The proposed model has been validated using goodness of fit parameters (prediction error, bias, variation, and Root Mean Squared Prediction Error (RMSPE)). The values of model performance statistics (R2, adjusted R2, Mean Square Error (MSE) and standard error) also justify the proposed model. We have compared the results of the prediction model with the observed results on real data. The results of the model might be helpful for software development industries and future researchers. © 2018 by the authors.","Code smell; Entropy; Regression; Software design defects; Software quality; Statistical model",,,,,,,,,,,,,"Damaševičius, R.; Department of Software Engineering, Lithuania; email: robertas.damasevicius@ktu.lt",,"MDPI AG",10994300,,,,"English","Entropy",Article,"Final","All Open Access, Gold, Green",Scopus,2-s2.0-85051576215
"Fakhoury S., Arnaoudova V., Noiseux C., Khomh F., Antoniol G.","57203228627;23476457900;57200272141;24724747600;35619034000;","Keep it simple: Is deep learning good for linguistic smell detection?",2018,"25th IEEE International Conference on Software Analysis, Evolution and Reengineering, SANER 2018 - Proceedings","2018-March",,,"602","611",,21,"10.1109/SANER.2018.8330265","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85049733358&doi=10.1109%2fSANER.2018.8330265&partnerID=40&md5=47802095e7e5b8712a4522203a2ee5cd","School of Electrical Engineering and Computer Science, Washington State University, Pullman, United States; Department of Computer and Software Engineering, Polytechnique Montréal, Montréal, Canada","Fakhoury, S., School of Electrical Engineering and Computer Science, Washington State University, Pullman, United States; Arnaoudova, V., School of Electrical Engineering and Computer Science, Washington State University, Pullman, United States; Noiseux, C., Department of Computer and Software Engineering, Polytechnique Montréal, Montréal, Canada; Khomh, F., Department of Computer and Software Engineering, Polytechnique Montréal, Montréal, Canada; Antoniol, G., Department of Computer and Software Engineering, Polytechnique Montréal, Montréal, Canada","Deep neural networks is a popular technique that has been applied successfully to domains such as image processing, sentiment analysis, speech recognition, and computational linguistic. Deep neural networks are machine learning algorithms that, in general, require a labeled set of positive and negative examples that are used to tune hyper-parameters and adjust model coefficients to learn a prediction function. Recently, deep neural networks have also been successfully applied to certain software engineering problem domains (e.g., bug prediction), however, results are shown to be outperformed by traditional machine learning approaches in other domains (e.g., recovering links between entries in a discussion forum). In this paper, we report our experience in building an automatic Linguistic Antipattern Detector (LAPD) using deep neural networks. We manually build and validate an oracle of around 1,700 instances and create binary classification models using traditional machine learning approaches and Convolutional Neural Networks. Our experience is that, considering the size of the oracle, the available hardware and software, as well as the theory to interpret results, deep neural networks are outperformed by traditional machine learning algorithms in terms of all evaluation metrics we used and resources (time and memory). Therefore, although deep learning is reported to produce results comparable and even superior to human experts for certain complex tasks, it does not seem to be a good fit for simple classification tasks like smell detection. Researchers and practitioners should be careful when selecting machine learning models for the problem at hand. © 2018 IEEE.","Antipattern Detection; Con-volutional Neural Networks; Machine Learning","Classification (of information); Computation theory; Deep neural networks; Image processing; Learning systems; Linguistics; Neural networks; Petroleum reservoir evaluation; Reengineering; Sentiment analysis; Software engineering; Speech recognition; Anti-patterns; Binary classification; Classification tasks; Convolutional neural network; Engineering problems; Hardware and software; Machine learning approaches; Machine learning models; Learning algorithms",,,,,,,,,,,,,,"Institute of Electrical and Electronics Engineers Inc.",,9781538649695,,,"English","IEEE Int. Conf. Softw. Anal., Evol. Reengineering, SANER - Proc.",Conference Paper,"Final","",Scopus,2-s2.0-85049733358
"Sharma T., Spinellis D.","25224153100;35566637400;","A survey on software smells",2018,"Journal of Systems and Software","138",,,"158","173",,118,"10.1016/j.jss.2017.12.034","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85044651549&doi=10.1016%2fj.jss.2017.12.034&partnerID=40&md5=0275655072c9d7072652bb43654908e7","Department of Management Science and Technology, Athens University of Economics and Business, Greece","Sharma, T., Department of Management Science and Technology, Athens University of Economics and Business, Greece; Spinellis, D., Department of Management Science and Technology, Athens University of Economics and Business, Greece","Context: Smells in software systems impair software quality and make them hard to maintain and evolve. The software engineering community has explored various dimensions concerning smells and produced extensive research related to smells. The plethora of information poses challenges to the community to comprehend the state-of-the-art tools and techniques. Objective: We aim to present the current knowledge related to software smells and identify challenges as well as opportunities in the current practices. Method: We explore the definitions of smells, their causes as well as effects, and their detection mechanisms presented in the current literature. We studied 445 primary studies in detail, synthesized the information, and documented our observations. Results: The study reveals five possible defining characteristics of smells — indicator, poor solution, violates best-practices, impacts quality, and recurrence. We curate ten common factors that cause smells to occur including lack of skill or awareness and priority to features over quality. We classify existing smell detection methods into five groups — metrics, rules/heuristics, history, machine learning, and optimization-based detection. Challenges in the smells detection include the tools’ proneness to false-positives and poor coverage of smells detectable by existing tools. © 2017","Antipatterns; Code smells; Maintainability; Smell detection tools; Software quality; Software smells; Technical debt","Computer software selection and evaluation; Learning systems; Maintainability; Anti-patterns; Code smell; Detection tools; Software Quality; Technical debts; Odors","Horizon 2020 Framework Programme, H2020: 642954","This work is partially funded by the seneca project, which is part of the Marie Skłodowska-Curie Innovative Training Networks ( itn-eid ). Grant agreement number 642954.",,,,,,,,,,"Sharma, T.; Department of Management Science and Technology, Greece; email: tusharsharma@ieee.org",,"Elsevier Inc.",01641212,,JSSOD,,"English","J Syst Software",Article,"Final","All Open Access, Green",Scopus,2-s2.0-85044651549
"Garousi V., Küçük B.","13408954200;57200086287;","Smells in software test code: A survey of knowledge in industry and academia",2018,"Journal of Systems and Software","138",,,"52","81",,70,"10.1016/j.jss.2017.12.013","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85039428979&doi=10.1016%2fj.jss.2017.12.013&partnerID=40&md5=712a9941e4e4d1c5e9ecff82a16a1075","Information Technology Group, Wageningen University, Netherlands; Atilim University, Ankara, Turkey","Garousi, V., Information Technology Group, Wageningen University, Netherlands; Küçük, B., Atilim University, Ankara, Turkey","As a type of anti-pattern, test smells are defined as poorly designed tests and their presence may negatively affect the quality of test suites and production code. Test smells are the subject of active discussions among practitioners and researchers, and various guidelines to handle smells are constantly offered for smell prevention, smell detection, and smell correction. Since there is a vast grey literature as well as a large body of research studies in this domain, it is not practical for practitioners and researchers to locate and synthesize such a large literature. Motivated by the above need and to find out what we, as the community, know about smells in test code, we conducted a ‘multivocal’ literature mapping (classification) on both the scientific literature and also practitioners’ grey literature. By surveying all the sources on test smells in both industry (120 sources) and academia (46 sources), 166 sources in total, our review presents the largest catalogue of test smells, along with the summary of guidelines/techniques and the tools to deal with those smells. This article aims to benefit the readers (both practitioners and researchers) by serving as an “index” to the vast body of knowledge in this important area, and by helping them develop high-quality test scripts, and minimize occurrences of test smells and their negative consequences in large test automation projects. © 2017 Elsevier Inc.","Automated testing; Multivocal literature mapping; Software testing; Survey; Systematic mapping; Test anti-patterns; Test automation; Test scripts; Test smells","Automation; Codes (symbols); Design for testability; Mapping; Odors; Surveying; Surveys; Testing; Anti-patterns; Automated testing; Systematic mapping; Test Automation; Test scripts; Software testing",,,,,,,,,,,,"Garousi, V.; Information Technology Group, Netherlands; email: vahid.garousi@wur.nl",,"Elsevier Inc.",01641212,,JSSOD,,"English","J Syst Software",Article,"Final","",Scopus,2-s2.0-85039428979
"Kaur A., Jain S., Goel S.","57209878311;56404911800;57202651373;","A Support Vector Machine Based Approach for Code Smell Detection",2018,"Proceedings - 2017 International Conference on Machine Learning and Data Science, MLDS 2017","2018-January",,"8320252","9","14",,24,"10.1109/MLDS.2017.8","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85051023807&doi=10.1109%2fMLDS.2017.8&partnerID=40&md5=3d9f9982ec61644c498ed608bd27abdb","Department of Computer Science and Engineering, Thapar University, Patiala, Punjab  147004, India; Department of Computer Science and Engineering, Bennett University, G. Noida, Uttar Pradesh  201310, India","Kaur, A., Department of Computer Science and Engineering, Thapar University, Patiala, Punjab  147004, India; Jain, S., Department of Computer Science and Engineering, Thapar University, Patiala, Punjab  147004, India; Goel, S., Department of Computer Science and Engineering, Bennett University, G. Noida, Uttar Pradesh  201310, India","Code smells may be introduced in software due to market rivalry, work pressure deadline, improper functioning, skills or inexperience of software developers. Code smells indicate problems in design or code which makes software hard to change and maintain. Detecting code smells could reduce the effort of developers, resources and cost of the software. Many researchers have proposed different techniques like DETEX for detecting code smells which have limited precision and recall. To overcome these limitations, a new technique named as SVMCSD has been proposed for the detection of code smells, based on support vector machine learning technique. Four code smells are specified namely God Class, Feature Envy, Data Class and Long Method and the proposed technique is validated on two open source systems namely ArgoUML and Xerces. The accuracy of SVMCSD is found to be better than DETEX in terms of two metrics, precision and recall, when applied on a subset of a system. While considering the entire system, SVMCSD detect more occurrences of code smells than DETEX. © 2017 IEEE.","Anti-patterns; Code smells; Software maintenance; Support Vector Machine","Artificial intelligence; Codes (symbols); Computer software maintenance; Odors; Open source software; Support vector machines; Anti-patterns; Code smell; Entire system; Open source system; Precision and recall; Software developer; Support vector; Work pressures; Open systems",,,,,,,,,,,,,,"Institute of Electrical and Electronics Engineers Inc.",,9781538634462,,,"English","Proc. - Int. Conf. Mach. Learn. Data Sci., MLDS",Conference Paper,"Final","",Scopus,2-s2.0-85051023807
"Chen Z., Chen L., Ma W., Zhou X., Zhou Y., Xu B.","55884919800;57189042207;56949541600;55743306600;57022538800;7404589262;","Understanding metric-based detectable smells in Python software: A comparative study",2018,"Information and Software Technology","94",,,"14","29",,17,"10.1016/j.infsof.2017.09.011","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85030776133&doi=10.1016%2fj.infsof.2017.09.011&partnerID=40&md5=b25472c5b539668c65e823f8d4f2fe4d","State Key Laboratory for Novel Software Technology, Nanjing University, Nanjing, 210093, China; School of Computer Science and Engineering, Southeast University, Nanjing, 210096, China","Chen, Z., State Key Laboratory for Novel Software Technology, Nanjing University, Nanjing, 210093, China; Chen, L., State Key Laboratory for Novel Software Technology, Nanjing University, Nanjing, 210093, China; Ma, W., State Key Laboratory for Novel Software Technology, Nanjing University, Nanjing, 210093, China; Zhou, X., School of Computer Science and Engineering, Southeast University, Nanjing, 210096, China; Zhou, Y., State Key Laboratory for Novel Software Technology, Nanjing University, Nanjing, 210093, China; Xu, B., State Key Laboratory for Novel Software Technology, Nanjing University, Nanjing, 210093, China","Context Code smells are supposed to cause potential comprehension and maintenance problems in software development. Although code smells are studied in many languages, e.g. Java and C#, there is a lack of technique or tool support addressing code smells in Python. Objective Due to the great differences between Python and static languages, the goal of this study is to define and detect code smells in Python programs and to explore the effects of Python smells on software maintainability. Method In this paper, we introduced ten code smells and established a metric-based detection method with three different filtering strategies to specify metric thresholds (Experience-Based Strategy, Statistics-Based Strategy, and Tuning Machine Strategy). Then, we performed a comparative study to investigate how three detection strategies perform in detecting Python smells and how these smells affect software maintainability with different detection strategies. This study utilized a corpus of 106 Python projects with most stars on GitHub. Results The results showed that: (1) the metric-based detection approach performs well in detecting Python smells and Tuning Machine Strategy achieves the best accuracy; (2) the three detection strategies discover some different smell occurrences, and Long Parameter List and Long Method are more prevalent than other smells; (3) several kinds of code smells are more significantly related to changes or faults in Python modules. Conclusion These findings reveal the key features of Python smells and also provide a guideline for the choice of detection strategy in detecting and analyzing Python smells. © 2017 Elsevier B.V.","Code smell; Detection strategy; Python; Software maintainability","Codes (symbols); High level languages; Maintainability; Odors; Software design; Code smell; Comparative studies; Detection approach; Detection methods; Filtering strategies; Maintenance Problem; Python; Software maintainability; Computer software","National Natural Science Foundation of China: 61403187, 61472175, 61472178; Natural Science Foundation of Jiangsu Province: BK20140611; National Basic Research Program of China (973 Program): 2014CB340702","This research is supported by the National Natural Science Foundation of China ( 61472175 , 61472178 , 61403187 ), the Natural Science Foundation of Jiangsu Province of China ( BK20140611 ), the National Key Basic Research and Development Program of China ( 2014CB340702 ). Appendix A",,,,,,,,,,"Chen, L.; State Key Laboratory for Novel Software Technology, China; email: lchen@nju.edu.cn",,"Elsevier B.V.",09505849,,ISOTE,,"English","Inf Software Technol",Article,"Final","",Scopus,2-s2.0-85030776133
"Sharma P., Kaur E.A.","57204949879;57215918492;","Design of testing framework for code smell detection (OOPS) using BFO algorithm",2018,"International Journal of Engineering and Technology(UAE)","7","2.27 Special Issue 27",,"161","166",,2,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-85082344132&partnerID=40&md5=e133bf1f40f323e146d994e8b508c80a","Department of Computer Science Engineering, Chandigarh University, Gharuan, Mohali, Punjab, India","Sharma, P., Department of Computer Science Engineering, Chandigarh University, Gharuan, Mohali, Punjab, India; Kaur, E.A., Department of Computer Science Engineering, Chandigarh University, Gharuan, Mohali, Punjab, India","Detection of bad smells refers to any indication in the program code of a execution that perhaps designate a issue, maintain the software and software evolution. Code Smell detection is a main challenging for software developers and their informal classification direct to the designing of various smell detection methods and software tools. It appraises 4 code smell detection tool in software like as a in Fusion, JDeodorant, PMD and Jspirit. In this research proposes a method for detection the bad code smells in software is called as code smell. Bad smell detection in software, OOSMs are used to identify the Source Code whereby Plug-in were implemented for code detection in which position of program initial code the bad smell appeared so that software refactoring can then acquire position. Classified the code smell, as a type of codes: long method, PIH, LPL, LC, SS and GOD class etc. Detection of the code smell and as a result applying the correct detection phases when require is significant to enhance the Quality of the code or program. The various tool has been proposed for detection of the code smell each one featured by particular properties. The main objective of this research work described our proposed method on using various tools for code smell detection. We find the major differences between them and dissimilar consequences we attained. The major drawback of current research work is that it focuses on one particular language which makes them restricted to one kind of programs only. These tools fail to detect the smelly code if any kind of change in environment is encountered. The base paper compares the most popular code smell detection tools on basis of various factors like accuracy, False Positive Rate etc. which gives a clear picture of functionality these tools possess. In this paper, a unique technique is designed to identify CSs. For this purpose, various object-oriented programming (OOPs)-based-metrics with their maintainability index are used. Further, code refactoring and optimization technique are applied to obtain low maintainability Index. Finally, the proposed scheme is evaluated to achieve satisfactory results. The results of the BFOA test defined that the lazy class caused framework defects in DLS, DR, and SE. However, the LPL caused no frame-work defects what so ever. The consequences of the connection rules test searched that the LCCS (Lazy Class Code Smell) caused structured defects in DE and DLS, which corresponded to the consequences of the BFOA test. In this research work, a proposed method is designed to verify the code smell. For this purpose, different OOPs based Software Metrics with their MI (Maintainability Index) are utilized. Further Code refactoring and optimization method id applied to attained the less maintainability index and evaluated to achieved satisfactory results. © 2018 Pratiksha Sharma, Er. Arshpreet Kaur.","BFOA method; Code smell detection; God class and lazy class; Software metrics",,,,,,,,,,,,,"Sharma, P.; Department of Computer Science Engineering, India; email: pratikshasharma21192@gmail.com",,"Science Publishing Corporation Inc",2227524X,,,,"English","Int. J. Eng. Technol.",Article,"Final","",Scopus,2-s2.0-85082344132
"Reshi J.A., Singh S.","57209502548;7407874009;","Investigating the role of code smells in preventive maintenance",2018,"Journal of Information Technology Management","10","4",,"41","63",,7,"10.22059/JITM.2019.274968.2335","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85072534589&doi=10.22059%2fJITM.2019.274968.2335&partnerID=40&md5=043f40d8b4a498a60dca835cdd10f144","Department of Computer Science and Technology, Central University of Punjab, Bhatinda, Punjab, India; Department of Computer Science and Technology, Central University of Punjab, Bhatinda, Punjab, India","Reshi, J.A., Department of Computer Science and Technology, Central University of Punjab, Bhatinda, Punjab, India; Singh, S., Department of Computer Science and Technology, Central University of Punjab, Bhatinda, Punjab, India","The quest for improving the software quality has given rise to various studies which focus on the enhancement of the quality of software through various processes. Code smells, which are indicators of the software quality have not been put to an extensive study for as to determine their role in the prediction of defects in the software. This study aims to investigate the role of code smells in prediction of non-faulty classes. We examine the Eclipse software with four versions (3.2, 3.3, 3.6, and 3.7) for metrics and smells. Further, different code smells, derived subjectively through iPlasma, are taken into conjugation and three efficient, but subjective models are developed to detect code smells on each of Random Forest, J48 and SVM machine learning algorithms. This model is then used to detect the absence of defects in the four Eclipse versions. The effect of balanced and unbalanced datasets is also examined for these four versions. The results suggest that the code smells can be a valuable feature in discriminating absence of defects in a software. © University of Tehran, Faculty of Management","Code smells; Machine learning; Preventive maintenance; Random forest",,"National Science Council, NSC: 102-2511-S-008-008","Acknowledegement. This work is partially supported by National Science Council, Taiwan under grant 102-2511-S-008-008.",,,,,,,,,,"Reshi, J.A.; Department of Computer Science and Technology, India; email: jreshi14@gmail.com",,"University of Tehran",20085893,,,,"English","J. Inf. Technol. Manag.",Article,"Final","",Scopus,2-s2.0-85072534589
"Altıntaş M., Sezer E.A.","57203943712;36444813800;","Eclipse plugin for automatic detection of code smells in source codes [Kaynak kodlardaki kötü kokuların otomatik tespiti için eclipse eklenti önerisi]",2018,"CEUR Workshop Proceedings","2201",,,"","",,,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-85053705671&partnerID=40&md5=7441cd7166dfcac91bd1592d6df71d1c","Bilgisayar Mühendisliği Bölümü, Hacettepe Üniversitesi, Ankara, Turkey; Yazılım Mühendisliği Müdürlüğü, UGES, Aselsan, Ankara, Turkey","Altıntaş, M., Bilgisayar Mühendisliği Bölümü, Hacettepe Üniversitesi, Ankara, Turkey, Yazılım Mühendisliği Müdürlüğü, UGES, Aselsan, Ankara, Turkey; Sezer, E.A., Bilgisayar Mühendisliği Bölümü, Hacettepe Üniversitesi, Ankara, Turkey","Code smells in source codes are code fragments; that do not prevent the functionality of the developed application, but which reduce code quality, make code maintenance and understandability difficult and require refactoring. Those types of smells could be found in a class as a whole or in a specific method of a class. Detecting those code smells by manual reviewing is a process that could increase the probability of unintentional omission in terms of the requirement of time, budget, and manpower as the project grows. Code smells can be caused by errors in the design phase as well as by the developer's preferences in the design to code conversion phase. In this article, we will introduce an Eclipse plugin that enables automatic detection of code smells in Java source code and presents the detected code smells to developers and maintainers. In this way, the software developers and maintainers can continuously evaluate the quality of the software with realistic values, recognize and refactor the modules that could cause a bug. This provides better quality, eas¬ ier maintainability and effective testability in software. The developed plugin is tested on the data sets used in fault estimation, and statistical correlation between software fault and code smells is presented. Accord¬ ing to results, existence of code smells is unrelated with the software faults. However, existing faults are statistically related with code smells.","Code smell detection tool; Code smells; Java; Software metrics; Software quality","Budget control; Computer software selection and evaluation; Java programming language; Odors; Software testing; Code smell; Detection tools; Java; Software metrics; Software Quality; Codes (symbols)",,,,,,,,,,,,,"Erten M.Tarhan A.","CEUR-WS",16130073,,,,"Turkish","CEUR Workshop Proc.",Conference Paper,"Final","",Scopus,2-s2.0-85053705671
"Özkalkan Z., Aydin K., Tetik H.Y., Sağlam R.B.","57203937103;57209064999;57203937030;56329512700;","Automatic detection of feature envy using machine learning techniques [Makine Öğrenmesi Yöntemlerini Kullanarak Özellik Kıskançlığının Otomatik Saptanması]",2018,"CEUR Workshop Proceedings","2201",,,"","",,2,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-85053674237&partnerID=40&md5=59471cb5e1a470424b5408ac90b21136","Ankara Yıldırım Beyazıt Üniversitesi, Ankara, Turkey","Özkalkan, Z., Ankara Yıldırım Beyazıt Üniversitesi, Ankara, Turkey; Aydin, K., Ankara Yıldırım Beyazıt Üniversitesi, Ankara, Turkey; Tetik, H.Y., Ankara Yıldırım Beyazıt Üniversitesi, Ankara, Turkey; Sağlam, R.B., Ankara Yıldırım Beyazıt Üniversitesi, Ankara, Turkey","In recent years, the studies related to code smells in software systems have received significant attentions from the researchers with the aim of improving the code quality. Code smells are symptoms of poor design and implementation choices that increase fault-proneness and decrease code comprehension. Among the commonly occurring code smells, we have picked feature envy and developed a framework to identify it.","Classification; Code Smell; Feature Envy; Machine Learning","Artificial intelligence; Classification (of information); Codes (symbols); Odors; Software engineering; Automatic Detection; Code comprehension; Code smell; Design and implementations; Fault proneness; Feature Envy; Machine learning techniques; Software systems; Learning systems",,,,,,,,,,,,,"Erten M.Tarhan A.","CEUR-WS",16130073,,,,"English","CEUR Workshop Proc.",Conference Paper,"Final","",Scopus,2-s2.0-85053674237
[No author name available],[No author id available],"ENASE 2018 - Proceedings of the 13th International Conference on Evaluation of Novel Approaches to Software Engineering",2018,"ENASE 2018 - Proceedings of the 13th International Conference on Evaluation of Novel Approaches to Software Engineering","2018-March",,,"","",226,,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-85052534465&partnerID=40&md5=0e0181b6604fbb4f4bdd6578fcf960c0",,"","The proceedings contain 36 papers. The topics discussed include: an action research study towards the use of cloud computing scenarios in undergraduate computer science courses; problem-based elicitation of security requirements - the ProCOR method; incremental bidirectional transformations: applying QVT relations to the families to persons benchmark; a framework to support behavioral design pattern detection from software execution data; mapping of periodic tasks in reconfigurable heterogeneous multi-core platforms; refactoring object-oriented applications for a deployment in the cloud - workflow generation based on static analysis of source code; using COSMIC FSM method to analyze the impact of functional changes in business process models; a hybrid approach to detect code smells using deep learning; cultural influences on requirements engineering process in the context of Saudi Arabia; verification of feature coordination using the fluent calculus; iterative process for generating ER diagram from unrestricted requirements; an approach to prioritize classes in a multi-objective software maintenance framework; model-aware software engineering - a knowledge-based approach to model-driven software engineering; comprehensive view on architectural requirements for maintenance information systems; design and implementation of a Geis for the genomic diagnosis using the SILE methodology. case study: congenital cataract; and a novel formal approach to automatically suggest metrics in software measurement plans.",,,,,,,,,,,,,,,"Damiani E.Maciaszek L.Maciaszek L.Spanoudakis G.","SciTePress",,9789897583001,,,"English","ENASE - Proc. Int. Conf. Evaluation Novel Approaches to Softw. Engineering",Conference Review,"Final","",Scopus,2-s2.0-85052534465
"Hadj-Kacem M., Bouassida N.","57211276825;6506761943;","A hybrid approach to detect code smells using deep learning",2018,"ENASE 2018 - Proceedings of the 13th International Conference on Evaluation of Novel Approaches to Software Engineering","2018-March",,,"137","146",,20,"10.5220/0006709801370146","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85051992969&doi=10.5220%2f0006709801370146&partnerID=40&md5=e713d97aecd9685f1722934cf85521a9","Mir@cl Laboratory, Sfax University, Tunisia","Hadj-Kacem, M., Mir@cl Laboratory, Sfax University, Tunisia; Bouassida, N., Mir@cl Laboratory, Sfax University, Tunisia","The detection of code smells is a fundamental prerequisite for guiding the subsequent steps in the refactoring process. The more the detection results are accurate, the more the performance of the refactoring on the software is improved. Given its influential role in the software maintenance, this challenging research topic has so far attracted an increasing interest. However, the lack of consensus about the definition of code smells in the literature has led to a considerable diversity of the existing results. To reduce the confusion associated with this lack of consensus, there is a real need to achieve a deep and consistent representation of the code smells. Recently, the advance of deep learning has demonstrated an undeniable contribution in many research fields including the pattern recognition issues. In this paper, we propose a hybrid detection approach based on deep Auto-encoder and Artificial Neural Network algorithms. Four code smells (God Class, Data Class, Feature Envy and Long Method) are the focus of our experiment on four adopted datasets that are extracted from 74 open source systems. The values of recall and precision measurements have demonstrated high accuracy results. Copyright © 2018 by SCITEPRESS – Science and Technology Publications, Lda. All rights reserved","Artificial Neural Networks; Auto-encoder; Code Smell Detection; Deep Learning; Hybrid Approach","Codes (symbols); Neural networks; Odors; Open source software; Open systems; Pattern recognition; Artificial neural network algorithm; High-accuracy; Hybrid approach; Hybrid detection; Open source system; Recall and precision; Research fields; Research topics; Deep learning",,,,,,,,,,,,,"Damiani E.Spanoudakis G.Maciaszek L.Maciaszek L.","SciTePress",,9789897583001,,,"English","ENASE - Proc. Int. Conf. Evaluation Novel Approaches to Softw. Engineering",Conference Paper,"Final","All Open Access, Hybrid Gold, Green",Scopus,2-s2.0-85051992969
"Sharma D., Chandra P.","57195257252;7202774432;","Software fault prediction using machine-learning techniques",2018,"Smart Innovation, Systems and Technologies","78",,,"541","549",,15,"10.1007/978-981-10-5547-8_56","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85039433296&doi=10.1007%2f978-981-10-5547-8_56&partnerID=40&md5=9e681a4c5e409d3b0b8bb9791a4d8840","University School of Information and Communication Technology, Guru Gobind Singh Indraprastha University, Dwarka, Delhi, 110078, India","Sharma, D., University School of Information and Communication Technology, Guru Gobind Singh Indraprastha University, Dwarka, Delhi, 110078, India; Chandra, P., University School of Information and Communication Technology, Guru Gobind Singh Indraprastha University, Dwarka, Delhi, 110078, India","Machine-learning techniques are used to find the defect, fault, ambiguity, and bad smell to accomplish quality, maintainability, and reusability in software. Software fault prediction techniques are used to predict software faults by using statistical techniques. However, Machine-learning techniques are also valuable in detecting software fault. This paper presents an overview of software fault prediction using machine-learning techniques to predict the occurrence of faults. This paper also presents the conventional techniques. It aims at describing the problem of fault proneness. © Springer Nature Singapore Pte Ltd. 2018.","Machine learning techniques; Regression; Software fault prediction; Software faults; Software quality","Artificial intelligence; Computer software; Computer software reusability; Computer software selection and evaluation; Forecasting; Learning algorithms; Reusability; Machine learning techniques; Regression; Software fault; Software fault prediction; Software Quality; Learning systems",,,,,,,,,,,,"Sharma, D.; University School of Information and Communication Technology, Dwarka, India; email: deepakdixit151@gmail.com","Satapathy S.C.Bhateja V.Das S.","Springer Science and Business Media Deutschland GmbH",21903018,9789811055461,,,"English","Smart Innov. Syst. Technol.",Conference Paper,"Final","",Scopus,2-s2.0-85039433296
"Hozano M., Garcia A., Fonseca B., Costa E.","57076994400;7404608626;36175426900;35618052700;","Are you smelling it? Investigating how similar developers detect code smells",2018,"Information and Software Technology","93",,,"130","146",,27,"10.1016/j.infsof.2017.09.002","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85029407321&doi=10.1016%2fj.infsof.2017.09.002&partnerID=40&md5=23f8be5aca5b325a3bf15eff80767dcb","Department of Computing Systems, UFCG, Campina Grande-PB, Brazil; Núcleo de Ciências Exatas, UFAL, Arapiraca-AL, Brazil; Opus Research Group – LES, Informatics Department, PUC-Rio, Rio de Janeiro-RJ, Brazil; Computing Institute, UFAL, Maceió-AL, Brazil","Hozano, M., Department of Computing Systems, UFCG, Campina Grande-PB, Brazil, Núcleo de Ciências Exatas, UFAL, Arapiraca-AL, Brazil; Garcia, A., Opus Research Group – LES, Informatics Department, PUC-Rio, Rio de Janeiro-RJ, Brazil; Fonseca, B., Computing Institute, UFAL, Maceió-AL, Brazil; Costa, E., Computing Institute, UFAL, Maceió-AL, Brazil","Context A code smell indicates a poor implementation choice that often worsens software quality. Thus, code smell detection is an elementary technique to identify refactoring opportunities in software systems. Unfortunately, there is limited knowledge on how similar two or more developers detect smells in code. In particular, few studies have investigated if developers agree or disagree when recognizing a smell and which factors can influence on such (dis)agreement. Objective We perform a broader study to investigate how similar the developers detect code smells. We also analyze whether certain factors related to the developers’ profiles concerning background and experience may influence such (dis)agreement. Moreover, we analyze if the heuristics adopted by developers on detecting code smells may influence on their (dis)agreement. Method We conducted an empirical study with 75 developers who evaluated instances of 15 different code smell types. For each smell type, we analyzed the agreement among the developers and we assessed the influence of 6 different factors on the developers’ evaluations. Altogether more than 2700 evaluations were collected, resulting in substantial quantitative and qualitative analyses. Results The results indicate that the developers presented a low agreement on detecting all 15 smell types analyzed in our study. The results also suggest that factors related to background and experience did not have a consistent influence on the agreement among the developers. On the other hand, the results show that the agreement was consistently influenced by specific heuristics employed by developers. Conclusions Our findings reveal that the developers detect code smells in significantly different ways. As a consequence, these findings introduce some questions concerning the results of previous studies that did not consider the different perceptions of developers on detecting code smells. Moreover, our findings shed light towards improving state-of-the-art techniques for accurate, customized detection of code smells. © 2017 Elsevier B.V.","Code smell; Detection; Empirical study; Software maintenance","Computer software maintenance; Computer software selection and evaluation; Error detection; Odors; Certain factor; Code smell; Elementary techniques; Empirical studies; Quantitative and qualitative analysis; Software Quality; Software systems; State-of-the-art techniques; Codes (symbols)","Coordenação de Aperfeiçoamento de Pessoal de Nível Superior, CAPES: 175956; Conselho Nacional de Desenvolvimento Científico e Tecnológico, CNPq: 309884/2012-8, 483425/2013-3; Fundação Carlos Chagas Filho de Amparo à Pesquisa do Estado do Rio de Janeiro, FAPERJ: 26-102.166/2013","This work is funded by CAPES /Procad (Grant #175956 ). Alessandro is also funded by CNPq (Grants #483425/2013-3 and #309884/2012-8 ) and FAPERJ (Grant #E26-102.166/2013 ).",,,,,,,,,,"Hozano, M.; Department of Computing Systems, Brazil; email: hozano@gmail.com",,"Elsevier B.V.",09505849,,ISOTE,,"English","Inf Software Technol",Article,"Final","",Scopus,2-s2.0-85029407321
"Rodriguez G., Teyseyre A., Soria A., Berdun L.","7203006120;6508122543;22434373300;23479570300;","A visualization tool to detect refactoring opportunities in SOA applications",2017,"2017 43rd Latin American Computer Conference, CLEI 2017","2017-January",,,"1","10",,4,"10.1109/CLEI.2017.8226440","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85046485781&doi=10.1109%2fCLEI.2017.8226440&partnerID=40&md5=92eccc8a83a5fc09fa87d1503678245e","ISISTAN-CONICET, UNICEN, Tandil, Bs. As., Argentina","Rodriguez, G., ISISTAN-CONICET, UNICEN, Tandil, Bs. As., Argentina; Teyseyre, A., ISISTAN-CONICET, UNICEN, Tandil, Bs. As., Argentina; Soria, A., ISISTAN-CONICET, UNICEN, Tandil, Bs. As., Argentina; Berdun, L., ISISTAN-CONICET, UNICEN, Tandil, Bs. As., Argentina","Service-oriented computing (SOC) has been widely used by software industry for building distributed software applications that can be run in heterogeneous environments. It has also been required that these applications should be both high-quality and adaptable to market changes. However, a major problem in this type of applications is its growth; as the size and complexity of applications increase, the probability of duplicity of code increases. This problem could have a negative impact on quality attributes, such as performance, maintenance and evolution, among others. This paper presents a web tool called VizSOC to assist software developers in detecting refactoring opportunities in service-oriented applications. The tool receives WSDL (Web Service Description Language) documents, detects anti-patterns and suggests how to resolve them, and delivers a list of refactoring suggestions to start working on the refactoring process. To visualize the results in an orderly and comprehensible way, we use the Hierarchical Edge Bundles (HEB) visualization technique. The experimentation of the tool has been supported using two real-life case-studies, where we measured the amount of anti-patterns detected and the performance of clustering algorithms by using internal validity criteria. The results indicate that VizSOC is an effective aid to detect refactoring opportunities, and also allows developers to reduce effort along the detection process. © 2017 IEEE.","Service understability; Service-oriented applications; Software visualization; Unsupervised machine learning; Web service description language; Web services","Application programs; Clustering algorithms; Distributed computer systems; Learning systems; Machine oriented languages; Quality of service; Visualization; Websites; Service oriented application; Service understability; Software visualization; Unsupervised machine learning; Web service description language; Web services",,,,,,,,,,,,,"Santos R.Monteverde H.","Institute of Electrical and Electronics Engineers Inc.",,9781538630570,,,"Spanish","Lat. Am. Comput. Conf., CLEI",Conference Paper,"Final","",Scopus,2-s2.0-85046485781
"Ahmed I., Brindescu C., Mannan U.A., Jensen C., Sarma A.","57209289155;57191781643;56369903400;7202352242;7004458190;","An Empirical Examination of the Relationship between Code Smells and Merge Conflicts",2017,"International Symposium on Empirical Software Engineering and Measurement","2017-November",,,"58","67",,23,"10.1109/ESEM.2017.12","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85042390923&doi=10.1109%2fESEM.2017.12&partnerID=40&md5=9ab6c329033b57a845b80a8fde98a836","School of Electrical Engineering and Computer Science, 2Oregon State University, Corvallis, OR, United States","Ahmed, I., School of Electrical Engineering and Computer Science, 2Oregon State University, Corvallis, OR, United States; Brindescu, C., School of Electrical Engineering and Computer Science, 2Oregon State University, Corvallis, OR, United States; Mannan, U.A., School of Electrical Engineering and Computer Science, 2Oregon State University, Corvallis, OR, United States; Jensen, C., School of Electrical Engineering and Computer Science, 2Oregon State University, Corvallis, OR, United States; Sarma, A., School of Electrical Engineering and Computer Science, 2Oregon State University, Corvallis, OR, United States","Background: Merge conflicts are a common occurrence in software development. Researchers have shown the negative impact of conflicts on the resulting code quality and the development workflow. Thus far, no one has investigated the effect of bad design (code smells) on merge conflicts. Aims: We posit that entities that exhibit certain types of code smells are more likely to be involved in a merge conflict. We also postulate that code elements that are both 'smelly' and involved in a merge conflict are associated with other undesirable effects (more likely to be buggy). Method: We mined 143 repositories from GitHub and recreated 6,979 merge conflicts to obtain metrics about code changes and conflicts. We categorized conflicts into semantic or non-semantic, based on whether changes affected the Abstract Syntax Tree. For each conflicting change, we calculate the number of code smells and the number of future bug-fixes associated with the affected lines of code. Results: We found that entities that are smelly are three times more likely to be involved in merge conflicts. Method-level code smells (Blob Operation and Internal Duplication) are highly correlated with semantic conflicts. We also found that code that is smelly and experiences merge conflicts is more likely to be buggy. Conclusion: Bad code design not only impacts maintainability, it also impacts the day to day operations of a project, such as merging contributions, and negatively impacts the quality of the resulting code. Our findings indicate that research is needed to identify better ways to support merge conflict resolution to minimize its effect on code quality. © 2017 IEEE.","Code Smell; Empirical Analysis; Machine Learning; Merge Conflict","Learning systems; Mergers and acquisitions; Odors; Semantics; Software design; Software engineering; Trees (mathematics); Abstract Syntax Trees; Code smell; Conflict Resolution; Day-to-day operations; Development workflow; Empirical analysis; Empirical examination; Undesirable effects; Codes (symbols)","National Science Foundation, NSF: CCF-1560526, IIS-1559657; International Business Machines Corporation, IBM; National Stroke Foundation, NSF: 1560526","This work was funded in part by NSF IIS-1559657,CCF-1560526.","ACKNOWLEDGMENTS This work was funded in part by NSF IIS-1559657,CCF-1560526. This work was also funded in part by IBM. We would also like to thank the Oregon State University HCI group for their input and feedback on the research.",,,,,,,,,,,"IEEE Computer Society",19493770,9781509040391,,,"English","Int. Symp. Empir. Softw. Eng. Meas.",Conference Paper,"Final","",Scopus,2-s2.0-85042390923
[No author name available],[No author id available],"International Symposium on Empirical Software Engineering and Measurement",2017,"International Symposium on Empirical Software Engineering and Measurement","2017-November",,,"","",495,,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-85042379141&partnerID=40&md5=38175373f9c5550fe83e5f0c8b2cdaae",,"","The proceedings contain 61 papers. The topics discussed include: Code Churn: a neglected metric in effort-aware just-in-time defect prediction; security vulnerabilities in categories of clones and non-cloned code: an empirical study; automatic building of Java projects in software repositories: a study on feasibility and challenges; an empirical examination of the relationship between code smells and merge conflicts; on the influence of human factors for identifying code smells: a multi-trial empirical study; introducing automated GUI testing and observing its benefits: an industrial case study in the context of law-practice management software; would you like to motivate software testers? ask them how; beyond continuous delivery: an empirical investigation of continuous deployment challenges; predicting the vector impact of change - an industrial case study at Brightsquid; STRESS: a semi-automated, fully replicable approach for project selection; change-aware build prediction model for stall avoidance in continuous integration; an ontology-based approach to automate tagging of software artifacts; using a visual abstract as a lens for communicating and promoting design science research in software engineering; member checking in software engineering research: lessons learned from an industrial case study; notifying and involving users in experimentation: ethical perceptions of software practitioners; autonomy in software engineering: a preliminary study on the influence of education level and professional experience; and multi-objective regression test selection in practice: an empirical study in the defence software industry.",,,,,,,,,,,,,,,,"IEEE Computer Society",19493770,9781509040391,,,"English","Int. Symp. Empir. Softw. Eng. Meas.",Conference Review,"Final","",Scopus,2-s2.0-85042379141
"Falessi D., Russo B., Mullen K.","13103911200;9335579000;55893976600;","What if i Had No Smells?",2017,"International Symposium on Empirical Software Engineering and Measurement","2017-November",,,"78","84",,12,"10.1109/ESEM.2017.14","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85042350972&doi=10.1109%2fESEM.2017.14&partnerID=40&md5=38b9fedcca05dc49202420a20b3f91e0","Dept. of Computer Science and Software Engineering, California Polytechnic State, University San Luis Obispo, Luis Obispo, CA, United States; Faculty of Computer Science Free, University of Bozen-Bolzano, Bolzano, Italy; Keymind A Division of Axiom, Resource Management, Inc., Falls Church, VA, United States","Falessi, D., Dept. of Computer Science and Software Engineering, California Polytechnic State, University San Luis Obispo, Luis Obispo, CA, United States; Russo, B., Faculty of Computer Science Free, University of Bozen-Bolzano, Bolzano, Italy; Mullen, K., Keymind A Division of Axiom, Resource Management, Inc., Falls Church, VA, United States","What would have happened if I did not have any code smell? This is an interesting question that no previous study, to the best of our knowledge, has tried to answer. In this paper, we present a method for implementing a what-if scenario analysis estimating the number of defective files in the absence of smells. Our industrial case study shows that 20% of the total defective files were likely avoidable by avoiding smells. Such estimation needs to be used with the due care though as it is based on a hypothetical history (i.e., zero number of smells and same process and product change characteristics). Specifically, the number of defective files could even increase for some types of smells. In addition, we note that in some circumstances, accepting code with smells might still be a good option for a company. © 2017 IEEE.","code smells; machine learning; software estimation; technical debt","Codes (symbols); Learning systems; Software engineering; Code smell; Industrial case study; Product changes; Software estimation; Technical debts; What-if scenarios; Odors","Ministero dell’Istruzione, dell’Università e della Ricerca, MIUR: 2015KWREMX","ACKNOWLEDGMENT This work has been partially supported by the GAUSS national research project (MIUR, PRIN 2015, Contract 2015KWREMX). We thank Stacy Neely for proof reading the manuscript.",,,,,,,,,,,,"IEEE Computer Society",19493770,9781509040391,,,"English","Int. Symp. Empir. Softw. Eng. Meas.",Conference Paper,"Final","",Scopus,2-s2.0-85042350972
"Kim D.K.","56019448100;","Finding bad code smells with neural network models",2017,"International Journal of Electrical and Computer Engineering","7","6",,"3613","3621",,14,"10.11591/ijece.v7i6.pp3613-3621","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85032171412&doi=10.11591%2fijece.v7i6.pp3613-3621&partnerID=40&md5=9b9db49e94c65aea461a892e92781196","Department of Computer Engineering, Mokpo National Maritime University, 91, Haeyangdaehak-ro, Mokpo-si, Jeollanam-do, South Korea","Kim, D.K., Department of Computer Engineering, Mokpo National Maritime University, 91, Haeyangdaehak-ro, Mokpo-si, Jeollanam-do, South Korea","Code smell refers to any symptom introduced in design or implementation phases in the source code of a program. Such a code smell can potentially cause deeper and serious problems during software maintenance. The existing approaches to detect bad smells use detection rules or standards using a combination of different object-oriented metrics. Although a variety of software detection tools have been developed, they still have limitations and constraints in their capabilities. In this paper, a code smell detection system is presented with the neural network model that delivers the relationship between bad smells and object-oriented metrics by taking a corpus of Java projects as experimental dataset. The most well-known object-oriented metrics are considered to identify the presence of bad smells. The code smell detection system uses the twenty Java projects which are shared by many users in the GitHub repositories. The dataset of these Java projects is partitioned into mutually exclusive training and test sets. The training dataset is used to learn the network model which will predict smelly classes in this study. The optimized network model will be chosen to be evaluated on the test dataset. The experimental results show when the modelis highly trained with more dataset, the prediction outcomes are improved more and more. In addition, the accuracy of the model increases when it performs with higher epochs and many hidden layers. Copyright © 2017 Institute of Advanced Engineering and Science. All rights reserved.","Code smells; Neural networks; Object-oriented metrics; Software maintenance",,,,,,,,,,,,,"Kim, D.K.; Department of Computer Engineering, 91, Haeyangdaehak-ro, South Korea; email: dongkwan@gmail.com",,"Institute of Advanced Engineering and Science",20888708,,,,"English","Int. J. Electr. Comput. Eng.",Article,"Final","All Open Access, Hybrid Gold, Green",Scopus,2-s2.0-85032171412
"Kaur K., Kaur P.","57223048873;57213470629;","Evaluation of sampling techniques in software fault prediction using metrics and code smells",2017,"2017 International Conference on Advances in Computing, Communications and Informatics, ICACCI 2017","2017-January",,,"1377","1386",,4,"10.1109/ICACCI.2017.8126033","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85042633185&doi=10.1109%2fICACCI.2017.8126033&partnerID=40&md5=716e6edd21f8bd3b70b08a0e1c8abbdd","USICT, Guru Gobind Singh Indraprastha University, Delhi, India","Kaur, K., USICT, Guru Gobind Singh Indraprastha University, Delhi, India; Kaur, P., USICT, Guru Gobind Singh Indraprastha University, Delhi, India","The highly imbalanced nature of software fault datasets results in poor performance of machine leaning techniques used for software fault prediction. The objective of this paper is to evaluate sampling techniques and Meta-Cost learning in software fault prediction to alleviate problem of imbalanced data. We evaluate four sampling techniques in metrics as well as code smells based fault prediction on fault data sets of two open source systems ANT and POI. Our results indicate that Resample technique is best for metrics based fault prediction whereas Synthetic Minority Oversampling is best suited for code smells based fault prediction. The results are presented in terms of accuracy measures like G-Mean, Fmeasure and area under ROC curve. We also evaluate Meta-Cost learning and found that all sampling techniques outperform Meta-Cost learning. Our results also indicate that software metrics are better predictor of software faults than code smells. © 2017 IEEE.","Code smells; Machine learning algorithms; Meta cost learning; Performance measures; Software fault prediction; Static code metrics","Codes (symbols); Computer software; Costs; Forecasting; Learning algorithms; Learning systems; Odors; Open source software; Code smell; Cost learning; Performance measure; Software fault prediction; Static code metrics; Open systems",,,,,,,,,,,,,,"Institute of Electrical and Electronics Engineers Inc.",,9781509063673,,,"English","Int. Conf. Adv. Comput., Commun. Inf., ICACCI",Conference Paper,"Final","",Scopus,2-s2.0-85042633185
"Grigera J., Garrido A., Rossi G.","36175683500;7102279646;7402913455;","Kobold: Web usability as a service",2017,"ASE 2017 - Proceedings of the 32nd IEEE/ACM International Conference on Automated Software Engineering",,,"8115717","990","995",,10,"10.1109/ASE.2017.8115717","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85040775890&doi=10.1109%2fASE.2017.8115717&partnerID=40&md5=1b19f83d85fb2d7313cafca4464520b7","LIFIA, Universidad Nacional de la Plata, Argentina; CIC, Argentina; LIFIA, Universidad Nacional de la Plata, CONICET, Argentina","Grigera, J., LIFIA, Universidad Nacional de la Plata, Argentina; Garrido, A., LIFIA, Universidad Nacional de la Plata, Argentina, CIC, Argentina, LIFIA, Universidad Nacional de la Plata, CONICET, Argentina; Rossi, G., LIFIA, Universidad Nacional de la Plata, Argentina, CIC, Argentina, LIFIA, Universidad Nacional de la Plata, CONICET, Argentina","While Web applications have become pervasive in today's business, social interaction and information exchange, their usability is often deficient, even being a key factor for a website success. Usability problems repeat across websites, and many of them have been catalogued, but usability evaluation and repair still remains expensive. There are efforts from both the academy and industry to automate usability testing or to provide automatic statistics, but they rarely offer concrete solutions. These solutions appear as guidelines or patterns that developers can follow manually. This paper presents Kobold, a tool that detects usability problems from real user interaction (UI) events and repairs them automatically when possible, at least suggesting concrete solutions. By using the refactoring technique and its associated concept of bad smell, Kobold mines UI events to detect usability smells and applies usability refactorings on the client to correct them. The purpose of Kobold is to deliver usability advice and solutions as a service (SaaS) for developers, allowing them to respond to feedback of the real use of their applications and improve usability incrementally, even when there are no usability experts on the team. Kobold is available at: http://autorefactoring.lifia.info.unlp.edu.ar. A screencast is available at https://youtu.be/c-myYPMUh0Q. © 2017 IEEE.","Software as a Service; Usability Refactoring; Web Usability","Concrete testing; Concretes; HTTP; Software as a service (SaaS); Software engineering; Web Design; Websites; Information exchanges; Refactorings; Social interactions; Usability evaluation; Usability problems; Usability testing; User interaction; Web usability; Usability engineering",,,,,,,,,,,,,"Nguyen T.N.Rosu G.Di Penta M.","Institute of Electrical and Electronics Engineers Inc.",,9781538626849,,,"English","ASE - Proc. IEEE/ACM Int. Conf. Autom. Softw. Eng.",Conference Paper,"Final","All Open Access, Green",Scopus,2-s2.0-85040775890
"Tufano M., Palomba F., Bavota G., Oliveto R., Penta M.D., De Lucia A., Poshyvanyk D.","57021274700;55321369000;57220148228;15136561900;6602794138;7003641564;13613571900;","When and Why Your Code Starts to Smell Bad (and Whether the Smells Go Away)",2017,"IEEE Transactions on Software Engineering","43","11","7817894","1063","1088",,128,"10.1109/TSE.2017.2653105","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85040307811&doi=10.1109%2fTSE.2017.2653105&partnerID=40&md5=d2b0c8b235fdd2cfb1fa8d1ec2b401ea","College of William and Mary, Williamsburg, VA  23185, United States; University of Salerno, Fisciano, SA  84084, Italy; Universita della Svizzera Italiana (USI), Lugano, 6900, Switzerland; University of Molise, Pesche, IS  86090, Italy; University of Sannio, Benevento, BN  82100, Italy","Tufano, M., College of William and Mary, Williamsburg, VA  23185, United States; Palomba, F., University of Salerno, Fisciano, SA  84084, Italy; Bavota, G., Universita della Svizzera Italiana (USI), Lugano, 6900, Switzerland; Oliveto, R., University of Molise, Pesche, IS  86090, Italy; Penta, M.D., University of Sannio, Benevento, BN  82100, Italy; De Lucia, A., University of Salerno, Fisciano, SA  84084, Italy; Poshyvanyk, D., College of William and Mary, Williamsburg, VA  23185, United States","Technical debt is a metaphor introduced by Cunningham to indicate 'not quite right code which we postpone making it right'. One noticeable symptom of technical debt is represented by code smells, defined as symptoms of poor design and implementation choices. Previous studies showed the negative impact of code smells on the comprehensibility and maintainability of code. While the repercussions of smells on code quality have been empirically assessed, there is still only anecdotal evidence on when and why bad smells are introduced, what is their survivability, and how they are removed by developers. To empirically corroborate such anecdotal evidence, we conducted a large empirical study over the change history of 200 open source projects. This study required the development of a strategy to identify smell-introducing commits, the mining of over half a million of commits, and the manual analysis and classification of over 10K of them. Our findings mostly contradict common wisdom, showing that most of the smell instances are introduced when an artifact is created and not as a result of its evolution. At the same time, 80 percent of smells survive in the system. Also, among the 20 percent of removed instances, only 9 percent are removed as a direct consequence of refactoring operations. © 1976-2012 IEEE.","Code smells; empirical study; mining software repositories","Odors; Open source software; Anecdotal evidences; Code smell; Design and implementations; Empirical studies; Manual analysis; Mining software repositories; Open source projects; Technical debts; Codes (symbols)","National Science Foundation, NSF: 1253837; Norsk Sykepleierforbund, NSF: CCF-1253837, CCF-1525902","NSF CCF-1525902 and CCF-1253837 grants.",,,,,,,,,,,,"Institute of Electrical and Electronics Engineers Inc.",00985589,,IESED,,"English","IEEE Trans Software Eng",Article,"Final","All Open Access, Bronze",Scopus,2-s2.0-85040307811
"Grano G., Di Sorbo A., Mercaldo F., Visaggio C.A., Canfora G., Panichella S.","57191410336;57188555694;55842609700;6506647192;7006337131;35095375100;","Android apps and user feedback: A dataset for software evolution and quality improvement",2017,"WAMA 2017 - Proceedings of the 2nd ACM SIGSOFT International Workshop on App Market Analytics, Co-located with FSE 2017",,,,"8","11",,38,"10.1145/3121264.3121266","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85051667588&doi=10.1145%2f3121264.3121266&partnerID=40&md5=d3fa94209fe70b1fcdaf802522fa60ab","University of Zurich, Switzerland; University of Sannio, Italy; IIT-CNR, Italy","Grano, G., University of Zurich, Switzerland; Di Sorbo, A., University of Sannio, Italy; Mercaldo, F., IIT-CNR, Italy; Visaggio, C.A., University of Sannio, Italy; Canfora, G., University of Sannio, Italy; Panichella, S., University of Zurich, Switzerland","Nowadays, Android represents the most popular mobile platform with a market share of around 80%. Previous research showed that data contained in user reviews and code change history of mobile apps represent a rich source of information for reducing software maintenance and development effort, increasing customers' satisfaction. Stemming from this observation, we present in this paper a large dataset of Android applications belonging to 23 different apps categories, which provides an overview of the types of feedback users report on the apps and documents the evolution of the related code metrics. The dataset contains about 395 applications of the F-Droid repository, including around 600 versions, 280,000 user reviews and more than 450,000 user feedback (extracted with specific text mining approaches). Furthermore, for each app version in our dataset, we employed the Paprika tool and developed several Python scripts to detect 8 different code smells and compute 22 code quality indicators. The paper discusses the potential usefulness of the dataset for future research in the field. © 2017 - Proceedings of the 2nd ACM SIGSOFT International Workshop on App Market Analytics, Co-located with FSE 2017. All rights reserved.","App reviews; Mobile applications; Software maintenance and evolution; Software quality","Application programs; Codes (symbols); Commerce; Competition; Computer software maintenance; Computer software selection and evaluation; Customer satisfaction; Data mining; Natural language processing systems; Android applications; Customers' satisfaction; Mobile applications; Mobile platform; Quality improvement; Software Evolution; Software maintenance and evolution; Software Quality; Android (operating system)",,,,,,,,,,,,,"Sarro F.Shihab E.Kaimann D.Nagappan M.Platenius M.C.","Association for Computing Machinery, Inc",,9781450351584,,,"English","WAMA - Proc. ACM SIGSOFT Int. Workshop App Market Anal., Co-located FSE",Conference Paper,"Final","All Open Access, Green",Scopus,2-s2.0-85051667588
"Kenny A., Gordon N., Griffiths T., Kraemer J.D., Siedner M.J.","57191034899;57191348795;57191041689;7004453368;16235029000;","Validation relaxation: A quality assurance strategy for electronic data collection",2017,"Journal of Medical Internet Research","19","8","e297","","",,7,"10.2196/jmir.7813","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85029384762&doi=10.2196%2fjmir.7813&partnerID=40&md5=803243061620ceea95efa76c436d9d09","Last Mile Health, 205 Portland St #200, Boston, MA  02114, United States; Georgetown University, Washington, DC, United States; Massachusetts General Hospital, Harvard Medical School, Boston, MA, United States","Kenny, A., Last Mile Health, 205 Portland St #200, Boston, MA  02114, United States; Gordon, N., Last Mile Health, 205 Portland St #200, Boston, MA  02114, United States; Griffiths, T., Last Mile Health, 205 Portland St #200, Boston, MA  02114, United States; Kraemer, J.D., Georgetown University, Washington, DC, United States; Siedner, M.J., Massachusetts General Hospital, Harvard Medical School, Boston, MA, United States","Background: The use of mobile devices for data collection in developing world settings is becoming increasingly common and may offer advantages in data collection quality and efficiency relative to paper-based methods. However, mobile data collection systems can hamper many standard quality assurance techniques due to the lack of a hardcopy backup of data. Consequently, mobile health data collection platforms have the potential to generate datasets that appear valid, but are susceptible to unidentified database design flaws, areas of miscomprehension by enumerators, and data recording errors. Objective: We describe the design and evaluation of a strategy for estimating data error rates and assessing enumerator performance during electronic data collection, which we term ""validation relaxation."" Validation relaxation involves the intentional omission of data validation features for select questions to allow for data recording errors to be committed, detected, and monitored. Methods: We analyzed data collected during a cluster sample population survey in rural Liberia using an electronic data collection system (Open Data Kit). We first developed a classification scheme for types of detectable errors and validation alterations required to detect them. We then implemented the following validation relaxation techniques to enable data error conduct and detection: intentional redundancy, removal of ""required"" constraint, and illogical response combinations. This allowed for up to 11 identifiable errors to be made per survey. The error rate was defined as the total number of errors committed divided by the number of potential errors. We summarized crude error rates and estimated changes in error rates over time for both individuals and the entire program using logistic regression. Results: The aggregate error rate was 1.60% (125/7817). Error rates did not differ significantly between enumerators (P=.51), but decreased for the cohort with increasing days of application use, from 2.3% at survey start (95% CI 1.8%-2.8%) to 0.6% at day 45 (95% CI 0.3%-0.9%; OR=0.969; P<.001). The highest error rate (84/618, 13.6%) occurred for an intentional redundancy question for a birthdate field, which was repeated in separate sections of the survey. We found low error rates (0.0% to 3.1%) for all other possible errors. Conclusions: A strategy of removing validation rules on electronic data capture platforms can be used to create a set of detectable data errors, which can subsequently be used to assess group and individual enumerator error rates, their trends over time, and categories of data collection that require further training or additional quality control measures. This strategy may be particularly useful for identifying individual enumerators or systematic data errors that are responsive to enumerator training and is best applied to questions for which errors cannot be prevented through training or software design alone. Validation relaxation should be considered as a component of a holistic data quality assurance strategy. © Avi Kenny, Nicholas Gordon, Thomas Griffiths, John D Kraemer, Mark J Siedner.","Data accuracy; Data collection; Ehealth; Mhealth; Questionnaire design; Research methodology; Survey methodology; Surveys","adult; classification; cluster analysis; error; human; Liberia; measurement accuracy; questionnaire; relaxation training; software design; telehealth; validation process; health care quality; information processing; methodology; procedures; questionnaire; reproducibility; telemedicine; Data Collection; Humans; Quality Assurance, Health Care; Reproducibility of Results; Research Design; Surveys and Questionnaires; Telemedicine","National Institutes of Health, NIH; National Institute of Mental Health, NIMH: K23MH099916; Lady Margaret Hall, University of Oxford, LMH","UBS Optimus Foundation provided programmatic evaluation funds to Last Mile Health for the survey on which this analysis was conducted (no grant identification numbers). The funders had no role in the study design, data collection and analysis, decision to publish, or preparation of the manuscript. MJS receives research and salary support from the National Institutes of Health (K23 MH099916). JDK receives partial salary support from LMH.",,,,,,,,,,"Kenny, A.; Last Mile Health, 205 Portland St #200, United States; email: akenny@lastmilehealth.org",,"JMIR Publications Inc.",14388871,,,"28821474","English","J. Med. Internet Res.",Article,"Final","All Open Access, Gold, Green",Scopus,2-s2.0-85029384762
"Krishna R., Menzies T., Layman L.","57282246700;7003835495;8324841200;","Less is more: Minimizing code reorganization using XTREE",2017,"Information and Software Technology","88",,,"53","66",,11,"10.1016/j.infsof.2017.03.012","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85016444613&doi=10.1016%2fj.infsof.2017.03.012&partnerID=40&md5=8b759acaa01c5136355d900e55157249","Department of Computer Science, North Carolina State University, Raleigh, NC, United States; Fraunhofer CESE, College Park, United States","Krishna, R., Department of Computer Science, North Carolina State University, Raleigh, NC, United States; Menzies, T., Department of Computer Science, North Carolina State University, Raleigh, NC, United States; Layman, L., Fraunhofer CESE, College Park, United States","Context: Developers use bad code smells to guide code reorganization. Yet developers, textbooks, tools, and researchers disagree on which bad smells are important. How can we offer reliable advice to developers about which bad smells to fix? Objective: To evaluate the likelihood that a code reorganization to address bad code smells will yield improvement in the defect-proneness of the code. Method: We introduce XTREE, a framework that analyzes a historical log of defects seen previously in the code and generates a set of useful code changes. Any bad smell that requires changes outside of that set can be deprioritized (since there is no historical evidence that the bad smell causes any problems). Evaluation: We evaluate XTREE's recommendations for bad smell improvement against recommendations from previous work (Shatnawi, Alves, and Borges) using multiple data sets of code metrics and defect counts. Results: Code modules that are changed in response to XTREE's recommendations contain significantly fewer defects than recommendations from previous studies. Further, XTREE endorses changes to very few code metrics, so XTREE requires programmers to do less work. Further, XTREE's recommendations are more responsive to the particulars of different data sets. Finally XTREE's recommendations may be generalized to identify the most crucial factors affecting multiple datasets (see the last figure in paper). Conclusion: Before undertaking a code reorganization based on a bad smell report, use a framework like XTREE to check and ignore any such operations that are useless; i.e. ones which lack evidence in the historical record that it is useful to make that change. Note that this use case applies to both manual code reorganizations proposed by developers as well as those conducted by automatic methods. © 2017 Elsevier B.V.","Bad smells; Decision trees; Performance prediction","Decision trees; Defects; Odors; Automatic method; Bad smells; Code reorganization; Defect proneness; Historical records; Multiple data sets; Performance prediction; Yield Improvement; Codes (symbols)","National Science Foundation, NSF: 1302169",,,,,,,,,,,"Krishna, R.; Department of Computer Science, Raleigh, NC, United States; email: i.m.ralk@gmail.com",,"Elsevier B.V.",09505849,,ISOTE,,"English","Inf Software Technol",Article,"Final","All Open Access, Green",Scopus,2-s2.0-85016444613
"Arcelli Fontana F., Zanoni M.","6601971118;56599129300;","Code smell severity classification using machine learning techniques",2017,"Knowledge-Based Systems","128",,,"43","58",,73,"10.1016/j.knosys.2017.04.014","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85018955129&doi=10.1016%2fj.knosys.2017.04.014&partnerID=40&md5=ddd40ba8ea4c21f038d1933c04f4d698","Università degli Studi di Milano-Bicocca, Milan, Italy","Arcelli Fontana, F., Università degli Studi di Milano-Bicocca, Milan, Italy; Zanoni, M., Università degli Studi di Milano-Bicocca, Milan, Italy","Several code smells detection tools have been developed providing different results, because smells can be subjectively interpreted and hence detected in different ways. Machine learning techniques have been used for different topics in software engineering, e.g., design pattern detection, code smell detection, bug prediction, recommending systems. In this paper, we focus our attention on the classification of code smell severity through the use of machine learning techniques in different experiments. The severity of code smells is an important factor to take into consideration when reporting code smell detection results, since it allows the prioritization of refactoring efforts. In fact, code smells with high severity can be particularly large and complex, and create larger issues to the maintainability of software a system. In our experiments, we apply several machine learning models, spanning from multinomial classification to regression, plus a method to apply binary classifiers for ordinal classification. In fact, we model code smell severity as an ordinal variable. We take the baseline models from previous work, where we applied binary classification models for code smell detection with good results. We report and compare the performance of the models according to their accuracy and four different performance measures used for the evaluation of ordinal classification techniques. From our results, while the accuracy of the classification of severity is not high as in the binary classification of absence or presence of code smells, the ranking correlation of the actual and predicted severity for the best models reaches 0.88–0.96, measured through Spearman's ρ. © 2017 Elsevier B.V.","Code smell severity; Code smells detection; Machine learning; Ordinal classification; Refactoring prioritization","Artificial intelligence; Bins; Codes (symbols); Learning algorithms; Odors; Pattern recognition; Software engineering; Binary classification; Code smell; Design pattern detections; Machine learning models; Machine learning techniques; Ordinal classification; Prioritization; Ranking correlation; Learning systems",,,,,,,,,,,,"Zanoni, M.; Università degli Studi di Milano-Bicocca, Milan, Italy; email: marco.zanoni@disco.unimib.it",,"Elsevier B.V.",09507051,,KNSYE,,"English","Knowl Based Syst",Article,"Final","",Scopus,2-s2.0-85018955129
[No author name available],[No author id available],"ACM International Conference Proceeding Series",2017,"ACM International Conference Proceeding Series","Part F132091",,,"","",566,,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-85038445547&partnerID=40&md5=c0673fff06319145dd23b94a94a7c78e",,"","The proceedings contain 37 papers. The topics discussed include: physical quantity: towards a pattern language for quantities and units in physical calculations; patterns for C iterator interfaces; keeping talents; analysis of GoF design patterns used in knowledge processing systems; patterns for idea management in innovation communities; insertion space; empirical evaluation methods for pattern languages: sketches, classification, and network analysis; specification in continuous software development; service decoupler: full dynamic decoupling in service invocation; treating pattern sublanguages as patterns with an application to organizational patterns; a pattern language for high-performance computing resilience; a pattern language for workflow engine conformance and performance benchmarking; management stance patterns; engineering software for the cloud: messaging systems and logging; patterns for the industrial Internet/Industrie 4.0; patterns for managing tenants in a multi-tenant application; Internet of things patterns for device bootstrapping and registration; patterns grasping the trade-off between distributing data and information; anti-patterns in end-user documentation; user-centered design journey for pattern development; and architecture management in software development organizations.",,,,,,,,,,,,,,,,"Association for Computing Machinery",,9781450348485,,,"English","ACM Int. Conf. Proc. Ser.",Conference Review,"Final","",Scopus,2-s2.0-85038445547
"Ouni A., Kessentini M., Inoue K., Cinnéide M.Ó.","50761492200;25653537200;7601540520;55890614500;","Search-Based Web Service Antipatterns Detection",2017,"IEEE Transactions on Services Computing","10","4","7332971","603","617",,59,"10.1109/TSC.2015.2502595","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85029361856&doi=10.1109%2fTSC.2015.2502595&partnerID=40&md5=49fbf04bac7fec1acf66018c120c16ba","Department of Computer Science, Osaka University, Japan; University of Michigan, Ann Arbor, MI, United States; School of Computer Science and Informatics, University College Dublin, Dublin, Ireland","Ouni, A., Department of Computer Science, Osaka University, Japan; Kessentini, M., University of Michigan, Ann Arbor, MI, United States; Inoue, K., Department of Computer Science, Osaka University, Japan; Cinnéide, M.Ó., School of Computer Science and Informatics, University College Dublin, Dublin, Ireland","Service Oriented Architecture (SOA) is widely used in industry and is regarded as one of the preferred architectural design technologies. As with any other software system, service-based systems (SBSs) may suffer from poor design, i.e., antipatterns, for many reasons such as poorly planned changes, time pressure or bad design choices. Consequently, this may lead to an SBS product that is difficult to evolve and that exhibits poor quality of service (QoS). Detecting web service antipatterns is a manual, time-consuming and error-prone process for software developers. In this paper, we propose an automated approach for detection of web service antipatterns using a cooperative parallel evolutionary algorithm (P-EA). The idea is that several detection methods are combined and executed in parallel during an optimization process to find a consensus regarding the identification of web service antipatterns. We report the results of an empirical study using eight types of common web service antipatterns. We compare the implementation of our cooperative P-EA approach with random search, two single population-based approaches and one state-of-the-art detection technique not based on heuristic search. Statistical analysis of the obtained results demonstrates that our approach is efficient in antipattern detection, with a precision score of 89 percent and a recall score of 93 percent. © 2015 IEEE.","antipattern; search-based software engineering; service-oriented computing; web service design; Web Services","Distributed computer systems; Heuristic algorithms; Information services; Quality of service; Service oriented architecture (SOA); Software engineering; Websites; Anti-patterns; Antipatterns detections; Error-prone process; Parallel evolutionary algorithms; Search-based software engineering; Service design; Service oriented computing; Service-based systems; Web services","Science Foundation Ireland, SFI: 10/CE/I1855; Japan Society for the Promotion of Science, JSPS: 25220003; Osaka University, OU","This work is supported by Japan Society for the Promotion of Science, Grant-in-Aid for Scientific Research (S) (No.25220003), by Osaka University Program for Promoting International Joint Research, by the Ford-University of Michigan alliance Program and by Science Foundation Ireland grant 10/CE/I1855 to Lero—the Irish Software Research Centre (www.lero.ie).",,,,,,,,,,,,"Institute of Electrical and Electronics Engineers",19391374,,,,"English","IEEE Trans. Serv. Comput.",Article,"Final","",Scopus,2-s2.0-85029361856
"Yamashita A., Abtahizadeh S.A., Khomh F., Gueheneuc Y.-G.","55576431200;57189385107;24724747600;13613429100;","Software evolution and quality data from controlled, multiple, industrial case studies",2017,"IEEE International Working Conference on Mining Software Repositories",,,"7962408","507","510",,6,"10.1109/MSR.2017.44","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85026526919&doi=10.1109%2fMSR.2017.44&partnerID=40&md5=2daa448ca840a127af2a2f4ff5639d21","Department of Computer and Software Engineering, Polytechnique de Montreal, Canada; Centrum Wiskunde and Informatica, Akershus University College of Applied Sciences, Oslo, Norway","Yamashita, A., Centrum Wiskunde and Informatica, Akershus University College of Applied Sciences, Oslo, Norway; Abtahizadeh, S.A., Department of Computer and Software Engineering, Polytechnique de Montreal, Canada; Khomh, F., Department of Computer and Software Engineering, Polytechnique de Montreal, Canada; Gueheneuc, Y.-G., Department of Computer and Software Engineering, Polytechnique de Montreal, Canada","A main difficulty to study the evolution and quality of real-life software systems is the effect of moderator factors, such as: programming skill, type of maintenance task, and learning effect. Experimenters must account for moderator factors to identify the relationships between the variables of interest. In practice, controlling for moderator factors in realistic (industrial) settings is expensive and rather difficult. The data presented in this paper has two particularities: First, it involves six professional developers and four real-life, industrial systems. Second, it was obtained from controlled, multiple case studies where the moderator variables: programming skill, maintenance task, and learning effect were controlled for. This data set is relevant to experimenters studying evolution and quality of real-life systems, in particular those interested in studying industrial systems and replicating empirical studies. © 2017 IEEE.","case study; code smells; empirical study; industrial data; moderator factors; replication; software defects; software evolution; software quality; software replicability","Computer software selection and evaluation; Moderators; Code smell; Empirical studies; Industrial datum; Replicability; replication; Software defects; Software Evolution; Software Quality; Quality control",,,,,,,,,,,,,,"IEEE Computer Society",21601852,9781538615447,,,"English","IEEE Int. Working Conf. Min Softw. Repos.",Conference Paper,"Final","All Open Access, Green",Scopus,2-s2.0-85026526919
"Hozano M., Garcia A., Antunes N., Fonseca B., Costa E.","57076994400;7404608626;57217858593;36175426900;35618052700;","Smells Are Sensitive to Developers! on the Efficiency of (Un)Guided Customized Detection",2017,"IEEE International Conference on Program Comprehension",,,"7961509","110","120",,11,"10.1109/ICPC.2017.32","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85025124144&doi=10.1109%2fICPC.2017.32&partnerID=40&md5=255ec184eb1e7d10028106b58864f2ff","Department of Computing Systems, UFCG, Paraiba, Brazil; Núcleo de Ciencias Exatas, UFAL, Brazil; Opus Research Group - les, Informatics Dept., PUC-Rio, Brazil; CISUC, Department of Informatics Engineering, University of Coimbra, Portugal; Computing Institute, UFAL, Brazil","Hozano, M., Department of Computing Systems, UFCG, Paraiba, Brazil, Núcleo de Ciencias Exatas, UFAL, Brazil; Garcia, A., Opus Research Group - les, Informatics Dept., PUC-Rio, Brazil; Antunes, N., CISUC, Department of Informatics Engineering, University of Coimbra, Portugal; Fonseca, B., Computing Institute, UFAL, Brazil; Costa, E., Computing Institute, UFAL, Brazil","Code smells indicate poor implementation choices that may hinder program comprehension and maintenance. Their informal definition allows developers to follow different heuristics to detect smells in their projects. Machine learning has been used to customize smell detection according to the developer's perception. However, such customization is not guided (i.e. constrained) to consider alternative heuristics used by developers when detecting smells. As a result, their customization might not be efficient, requiring a considerable effort to reach high effectiveness. In fact, there is no empirical knowledge yet about the efficiency of such unguided approaches for supporting developer-sensitive smell detection. This paper presents Histrategy, a guided customization technique to improve the efficiency on smell detection. Histrategy considers a limited set of detection strategies, produced from different detection heuristics, as input of a customization process. The output of the customization process consists of a detection strategy tailored to each developer. The technique was evaluated in an experimental study with 48 developers and four types of code smells. The results showed that Histrategy is able to outperform six widely adopted machine learning algorithms - used in unguided approaches - both in effectiveness and efficiency. It was also confirmed that most developers benefit from using alternative heuristics to: (i) build their tailored detection strategies, and (ii) achieve efficient smell detection. © 2017 IEEE.",,"Artificial intelligence; Computer programming; Education; Efficiency; Learning systems; Odors; Code smell; Effectiveness and efficiencies; Empirical knowledge; Program comprehension and maintenances; Learning algorithms",,,,,,,,,,,,,,"IEEE Computer Society",,9781538605356,,,"English","IEEE Int. Conf. Program Comprehension",Conference Paper,"Final","",Scopus,2-s2.0-85025124144
"Garousi V., Felderer M., Fernandes J.M., Pfahl D., Mäntylä M.V.","13408954200;24832720900;7201540270;6603033193;7006843663;","Industry-academia collaborations in software engineering",2017,"ACM International Conference Proceeding Series","Part F128635",,,"224","229",,13,"10.1145/3084226.3084279","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85025444508&doi=10.1145%2f3084226.3084279&partnerID=40&md5=d4a53c5995b355c7612478842ec579f2","SnT Center, University of Luxembourg, Luxembourg; Dept. of Computer Engineering, Hacettepe University, Ankara, Turkey; Department of Computer Science, University of Innsbruck, Innsbruck, Austria; Dept. Informatica, ALGORITMI Universidade do Minho, Braga, Portugal; Institute of Computer Science, University of Tartu, Tartu, Estonia; Faculty of Information Technology and Electrical Engineering, University of Oulu, Oulu, Finland","Garousi, V., SnT Center, University of Luxembourg, Luxembourg, Dept. of Computer Engineering, Hacettepe University, Ankara, Turkey; Felderer, M., Department of Computer Science, University of Innsbruck, Innsbruck, Austria; Fernandes, J.M., Dept. Informatica, ALGORITMI Universidade do Minho, Braga, Portugal; Pfahl, D., Institute of Computer Science, University of Tartu, Tartu, Estonia; Mäntylä, M.V., Faculty of Information Technology and Electrical Engineering, University of Oulu, Oulu, Finland","Research collaboration between industry and academia supports improvement and innovation in industry and helps to ensure industrial relevance in academic research. However, many researchers and practitioners believe that the level of joint industry-academia collaboration (IAC) in software engineering (SE) research is still relatively low, compared to the amount of activity in each of the two communities. The goal of the empirical study reported in this paper is to exploratory characterize the state of IAC with respect to a set of challenges, patterns and anti-patterns identified by a recent Systematic Literature Review study. To address the above goal, we gathered the opinions of researchers and practitioners w.r.t. their experiences in IAC projects. Our dataset includes 47 opinion data points related to a large set of projects conducted in 10 different countries. We aim to contribute to the body of evidence in the area of IAC, for the benefit of researchers and practitioners in conducting future successful IAC projects in SE. As an output, the study presents a set of empirical findings and evidence-based recommendations to increase the success of IAC projects. © 2017 ACM.","Anti-patterns; Challenges; Empirical study; Industry-academia collaborations; Patterns; Research; Software engineering; Success factors","Industrial research; Research; Anti-patterns; Challenges; Empirical studies; Patterns; Success factors; Software engineering",,,,,,,,,,,,,,"Association for Computing Machinery",,9781450348041,,,"English","ACM Int. Conf. Proc. Ser.",Conference Paper,"Final","All Open Access, Green",Scopus,2-s2.0-85025444508
[No author name available],[No author id available],"ACM International Conference Proceeding Series",2017,"ACM International Conference Proceeding Series","Part F128635",,,"","",407,,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-85025440415&partnerID=40&md5=698ec9f48d139566c1273f41080c083d",,"","The proceedings contain 50 papers. The topics discussed include: on the use of ontologies in software process assessment: a systematic literature review; operationalizing the experience factory for effort estimation in agile processes; change prediction through coding rules violations; scoping and planning experiments in software engineering - a comparative analysis of specification models; attributes that predict which features to fix: lessons for app store mining; exploring the outsourcing relationships in software startups a multiple case study; on the benefits/limitations of agile software development: an interview study with Brazilian companies; how are conceptual models used in industrial software development? an online survey; a method for assessing class change proneness; an exploratory study of functionality and learning resources of web APIs on programmable web; using metrics to track code review performance; industry-academia collaborations in software engineering: an empirical analysis of challenges, patterns and anti-patterns in research projects; towards confidence with capture-recapture estimation: an exploratory study of dependence within inspections; how to reduce software development cost with personnel assignment optimization: exemplary improvement on the Hungarian algorithm; on using active learning and self-training when mining performance discussions on stack overflow; and preliminary study on applying semi-supervised learning to app store analysis.",,,,,,,,,,,,,,,,"Association for Computing Machinery",,9781450348041,,,"English","ACM Int. Conf. Proc. Ser.",Conference Review,"Final","",Scopus,2-s2.0-85025440415
"Ouni A., Kessentini M., Ó Cinnéide M., Sahraoui H., Deb K., Inoue K.","50761492200;25653537200;55890614500;57196894039;7006019904;7601540520;","MORE: A multi-objective refactoring recommendation approach to introducing design patterns and fixing code smells",2017,"Journal of Software: Evolution and Process","29","5","e1843","","",,33,"10.1002/smr.1843","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85014656546&doi=10.1002%2fsmr.1843&partnerID=40&md5=9a7e0b9b3103399b1cc81a6c5fedfab1","Graduate School of Information Science and Technology, Osaka University, Japan; Department of Computer Science and Software Engineering, UAE University, United Arab Emirates; Department of Computer and Information Science, University of Michigan, United States; School of Computer Science, National University of Ireland, Dublin, Ireland; Department of Computer Science and Operations Research, University of Montreal, Canada; Department of Electrical and Computing Engineering, Michigan State University, United States","Ouni, A., Graduate School of Information Science and Technology, Osaka University, Japan, Department of Computer Science and Software Engineering, UAE University, United Arab Emirates; Kessentini, M., Department of Computer and Information Science, University of Michigan, United States; Ó Cinnéide, M., School of Computer Science, National University of Ireland, Dublin, Ireland; Sahraoui, H., Department of Computer Science and Operations Research, University of Montreal, Canada; Deb, K., Department of Electrical and Computing Engineering, Michigan State University, United States; Inoue, K., Graduate School of Information Science and Technology, Osaka University, Japan","Refactoring is widely recognized as a crucial technique applied when evolving object-oriented software systems. If applied well, refactoring can improve different aspects of software quality including readability, maintainability, and extendibility. However, despite its importance and benefits, recent studies report that automated refactoring tools are underused much of the time by software developers. This paper introduces an automated approach for refactoring recommendation, called MORE, driven by 3 objectives: (1) to improve design quality (as defined by software quality metrics), (2) to fix code smells, and (3) to introduce design patterns. To this end, we adopt the recent nondominated sorting genetic algorithm, NSGA-III, to find the best trade-off between these 3 objectives. We evaluated the efficacy of our approach using a benchmark of 7 medium and large open-source systems, 7 commonly occurring code smells (god class, feature envy, data class, spaghetti code, shotgun surgery, lazy class, and long parameter list), and 4 common design pattern types (visitor, factory method, singleton, and strategy). Our approach is empirically evaluated through a quantitative and qualitative study to compare it against 3 different state-of-the art approaches, 2 popular multiobjective search algorithms, and random search. The statistical analysis of the results confirms the efficacy of our approach in improving the quality of the studied systems while successfully fixing 84% of code smells and introducing an average of 6 design patterns. In addition, the qualitative evaluation shows that most of the suggested refactorings (an average of 69%) are considered by developers to be relevant and meaningful. Copyright © 2017 John Wiley & Sons, Ltd.","code smells; design patterns; refactoring; search-based software engineering; software quality","Codes (symbols); Computer software selection and evaluation; Economic and social effects; Genetic algorithms; Object oriented programming; Odors; Open source software; Quality control; Code smell; Design Patterns; Refactorings; Search-based software engineering; Software Quality; Open systems","Science Foundation Ireland, SFI: 10/CE/I1855; Japan Society for the Promotion of Science, KAKEN: 25220003; United Arab Emirates University, UAEU","The authors would like to thank all the participants to this study. This work was supported by the Research Start-up (2) 2016 Grant G00002211 funded by UAE University, and by Japan Society for the Promotion of Science, Grant-in-Aid for Scientific Research (S) Collecting, Analyzing, and Evaluating Software Assets for Effective Reuse (grant JP25220003). This work was also supported, in part, by the Science Foundation Ireland grant 10/CE/I1855 to Lero - the Irish Software Engineering Research Centre.",,,,,,,,,,"Ouni, A.; Graduate School of Information Science and Technology, Japan; email: ouniaali@gmail.com",,"John Wiley and Sons Ltd",20477481,,,,"English","J. Softw. Evol. Process",Article,"Final","All Open Access, Green",Scopus,2-s2.0-85014656546
"Mekruksavanich S.","35174894700;","An adaptive approach for automatic design defects detection in object-oriented systems",2017,"2nd Joint International Conference on Digital Arts, Media and Technology 2017: Digital Economy for Sustainable Growth, ICDAMT 2017",,,"7904988","342","346",,1,"10.1109/ICDAMT.2017.7904988","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85019186953&doi=10.1109%2fICDAMT.2017.7904988&partnerID=40&md5=1cc4fac117a469763cca03e2de66ab2f","Department of Computer Engineering, School of Information and Communication Technology, University of Phayao, Thailand","Mekruksavanich, S., Department of Computer Engineering, School of Information and Communication Technology, University of Phayao, Thailand","Design defects in object-oriented software have a detrimental impact on quality and also increase maintenance costs. Timeous detection and identification of these flaws is, therefore, necessary to avoid adverse outcomes within the system. Metric-based heuristic frameworks have recently become popular for detecting and locating object-oriented design defects from the source code. Imperfections can occur at any level and obtaining proper threshold values is often a complicated process. To lessen this impact, an adjustable threshold methodology for metric-based design flaw detection was proposed through machine learning to compute the contribution and threshold values of each metric set. The threshold values were adjusted and adapted to conform to the software data input characteristics. Results demonstrated that the proposed method generated more appropriate threshold limits for the detection of design imperfections. Implementation was simple, less time-consuming and did not require expert knowledge compared to traditional procedures. © 2017 IEEE.","Defect detection; Design flaws; Machine learning; Software metric","Artificial intelligence; Defects; Learning systems; Object detection; Adaptive approach; Adverse outcomes; Defect detection; Detection and identifications; Object oriented design; Object oriented software; Object-oriented system; Software metrices; Object oriented programming",,,,,,,,,,,,"Mekruksavanich, S.; Department of Computer Engineering, Thailand; email: sakorn.me@up.ac.th",,"Institute of Electrical and Electronics Engineers Inc.",,9781509052097,,,"English","Jt. Int. Conf. Digit. Arts, Media Technol.: Digit. Econ. Sustain. Growth, ICDAMT",Conference Paper,"Final","",Scopus,2-s2.0-85019186953
"Palomba F., Oliveto R., De Lucia A.","55321369000;15136561900;7003641564;","Investigating code smell co-occurrences using association rule learning: A replicated study",2017,"MaLTeSQuE 2017 - IEEE International Workshop on Machine Learning Techniques for Software Quality Evaluation, co-located with SANER 2017",,,"7882010","8","13",,26,"10.1109/MALTESQUE.2017.7882010","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85018335521&doi=10.1109%2fMALTESQUE.2017.7882010&partnerID=40&md5=a6a21b4f125c8915806da549565f8ca7","Delft University of Technology, Netherlands; University of Molise, Italy; University of Salerno, Italy","Palomba, F., Delft University of Technology, Netherlands, University of Molise, Italy; Oliveto, R., University of Salerno, Italy; De Lucia, A., University of Molise, Italy","Previous research demonstrated how code smells (i.e., symptoms of the presence of poor design or implementation choices) threat software maintainability. Moreover, some studies showed that their interaction has a stronger negative impact on the ability of developers to comprehend and enhance the source code when compared to cases when a single code smell instance affects a code element (i.e., a class or a method). While such studies analyzed the effect of the co-presence of more smells from the developers' perspective, a little knowledge regarding which code smell types tend to co-occur in the source code is currently available. Indeed, previous papers on smell co-occurrence have been conducted on a small number of code smell types or on small datasets, thus possibly missing important relationships. To corroborate and possibly enlarge the knowledge on the phenomenon, in this paper we provide a large-scale replication of previous studies, taking into account 13 code smell types on a dataset composed of 395 releases of 30 software systems. Code smell co-occurrences have been captured by using association rule mining, an unsupervised learning technique able to discover frequent relationships in a dataset. The results highlighted some expected relationships, but also shed light on co-occurrences missed by previous research in the field. © 2017 IEEE.","Association Rule Mining; Code Smells; Empirical Studies","Artificial intelligence; Association rules; Computer software selection and evaluation; Learning algorithms; Learning systems; Object oriented programming; Odors; Quality control; Co-occurrence; Co-presence; Code smell; Empirical studies; Small data set; Software maintainability; Software systems; Source codes; Codes (symbols)",,,,,,,,,,,,,"Fontana F.A.Walter B.Zanoni M.","Institute of Electrical and Electronics Engineers Inc.",,9781509065974,,,"English","MaLTeSQuE - IEEE Int. Workshop Mach. Learn. Techniques Softw. Qual. Eval., co-located SANER",Conference Paper,"Final","",Scopus,2-s2.0-85018335521
[No author name available],[No author id available],"MaLTeSQuE 2017 - IEEE International Workshop on Machine Learning Techniques for Software Quality Evaluation, co-located with SANER 2017",2017,"MaLTeSQuE 2017 - IEEE International Workshop on Machine Learning Techniques for Software Quality Evaluation, co-located with SANER 2017",,,,"","",80,,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-85018327881&partnerID=40&md5=3693c76a670bab5c5abdc6d81c63f17c",,"","The proceedings contain 6 papers. The topics discussed include: using source code metrics to predict change-prone web services: a case-study on eBay services; investigating code smell co-occurrences using association rule learning: a replicated study; using machine learning to design a flexible LOC counter; machine learning for finding bugs: an initial report; automatic feature selection by regularization to improve bug prediction accuracy; and hyperparameter optimization to improve bug prediction accuracy.",,,,,,,,,,,,,,,"Fontana F.A.Walter B.Zanoni M.","Institute of Electrical and Electronics Engineers Inc.",,9781509065974,,,"English","MaLTeSQuE - IEEE Int. Workshop Mach. Learn. Techniques Softw. Qual. Eval., co-located SANER",Conference Review,"Final","",Scopus,2-s2.0-85018327881
"Carver J.C., Cabot J., Capilla R., Muccini H.","12446411300;8963493600;8931696900;6603279141;","GitHub, Technical Debt, Code Formatting, and More",2017,"IEEE Software","34","2","7888414","105","107",,3,"10.1109/MS.2017.51","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85017135717&doi=10.1109%2fMS.2017.51&partnerID=40&md5=51ba10d8b91eb6b1dc87260fce95b72d","University of Alabama, United States; Interdisciplinary Internet Institute, Spain; Rey Juan Carlos University of Madrid, Spain; University of l'Aquila, Italy","Carver, J.C., University of Alabama, United States; Cabot, J., Interdisciplinary Internet Institute, Spain; Capilla, R., Rey Juan Carlos University of Madrid, Spain; Muccini, H., University of l'Aquila, Italy","This issue's column reports on papers from the 19th International Conference on Model Driven Engineering Languages and Systems, the 2016 ACM SIGPLAN International Conference on Software Language Engineering, the 12th International ACM SIGSOFT Conference on the Quality of Software Architectures, and the 13th Working IEEE/IFIP Conference on Software Architecture. Topics discussed include GitHub and open source, technical debt in model-driven engineering, a universal code formatter, assuring architectural quality, and continuous architecting. © 2017 IEEE.","AADL; AQAF; architectural quality; Architecture Analysis and Design Language; Architecture Quality Assurance Framework; CAFFEA; code formatting; code smells; continuous architecting; Continuous Architecture Framework for Embedded and Agile Software Development; GitHub; machine learning; model-driven engineering; open source; software development; software engineering; technical debt; UML","Codes (symbols); Computer software selection and evaluation; Engineering education; Learning systems; Open source software; Open systems; Quality assurance; Software architecture; Software engineering; AADL; Agile software development; AQAF; Architectural quality; CAFFEA; Code formatting; Code smell; continuous architecting; Design languages; GitHub; Model-driven Engineering; Open sources; Technical debts; Software design",,,,,,,,,,,,,,"IEEE Computer Society",07407459,,IESOE,,"English","IEEE Software",Article,"Final","",Scopus,2-s2.0-85017135717
"Mariani T., Vergilio S.R.","57016444500;6506290092;","A systematic review on search-based refactoring",2017,"Information and Software Technology","83",,,"14","34",,53,"10.1016/j.infsof.2016.11.009","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85006276139&doi=10.1016%2fj.infsof.2016.11.009&partnerID=40&md5=cccc8fb68cfa817cf8e4f40d7ecefc9d","Computer Science Department, Federal University of Paraná (UFPR), CP 19:081, Curitiba, 81531-970, Brazil","Mariani, T., Computer Science Department, Federal University of Paraná (UFPR), CP 19:081, Curitiba, 81531-970, Brazil; Vergilio, S.R., Computer Science Department, Federal University of Paraná (UFPR), CP 19:081, Curitiba, 81531-970, Brazil","Context: To find the best sequence of refactorings to be applied in a software artifact is an optimization problem that can be solved using search techniques, in the field called Search-Based Refactoring (SBR). Over the last years, the field has gained importance, and many SBR approaches have appeared, arousing research interest. Objective: The objective of this paper is to provide an overview of existing SBR approaches, by presenting their common characteristics, and to identify trends and research opportunities. Method: A systematic review was conducted following a plan that includes the definition of research questions, selection criteria, a search string, and selection of search engines. 71 primary studies were selected, published in the last sixteen years. They were classified considering dimensions related to the main SBR elements, such as addressed artifacts, encoding, search technique, used metrics, available tools, and conducted evaluation. Results: Some results show that code is the most addressed artifact, and evolutionary algorithms are the most employed search technique. Furthermore, most times, the generated solution is a sequence of refactorings. In this respect, the refactorings considered are usually the ones of the Fowler's Catalog. Some trends and opportunities for future research include the use of models as artifacts, the use of many objectives, the study of the bad smells effect, and the use of hyper-heuristics. Conclusions: We have found many SBR approaches, most of them published recently. The approaches are presented, analyzed, and grouped following a classification scheme. The paper contributes to the SBR field as we identify a range of possibilities that serve as a basis to motivate future researches. © 2016","Evolutionary algorithms; Refactoring; Search-based software engineering","Information analysis; Optimization; Search engines; Software engineering; Classification scheme; Optimization problems; Refactorings; Research opportunities; Search-based refactoring; Search-based software engineering; Selection criteria; Software artifacts; Evolutionary algorithms","Coordenação de Aperfeiçoamento de Pessoal de Nível Superior, CAPES; Conselho Nacional de Desenvolvimento Científico e Tecnológico, CNPq: 307762/2015-7, 473899/2013-2","This work is supported by Brazilian funding agencies CAPES and CNPq [grant numbers 307762/2015-7, 473899/2013-2].",,,,,,,,,,"Mariani, T.; Computer Science Department, CP 19:081, Brazil; email: tmariani@inf.ufpr.br",,"Elsevier B.V.",09505849,,ISOTE,,"English","Inf Software Technol",Review,"Final","",Scopus,2-s2.0-85006276139
"Khandelwal S., Sripada S.K., Raghu Reddy Y.","57190033375;57023627700;55749120700;","Impact of gamification on code review process - An experimental study",2017,"ACM International Conference Proceeding Series",,,,"122","126",,23,"10.1145/3021460.3021474","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85030248172&doi=10.1145%2f3021460.3021474&partnerID=40&md5=73f9e19aa78b0f7f86de089bdd6fa3fa","Software Engineering Reseach Center, IIIT, Hyderabad, India","Khandelwal, S., Software Engineering Reseach Center, IIIT, Hyderabad, India; Sripada, S.K., Software Engineering Reseach Center, IIIT, Hyderabad, India; Raghu Reddy, Y., Software Engineering Reseach Center, IIIT, Hyderabad, India","Researchers have supported the idea of gamification to enhance students’ interest in activities like code reviews, change management, knowledge management, issue tracking, etc. which might otherwise be repetitive and monotonous. We performed an experimental study consisting of nearly 180+ participants to measure the impact of gamification on code review process using 5 different code review tools, including one gamified code review instance from our extensible architectural framework. We assess the impact of gamification based on the code smells and bugs identified in a gamified and non-gamified environment as per code inspection report. Further, measurement and comparison of the quantity and usefulness of code review comments was done using machine learning techniques. © 2017 ACM.","Architectural framework; Classification; Code reviews; Evaluation; Gamification; Text analysis","Classification (of information); Knowledge management; Learning systems; Software engineering; Text processing; Architectural frameworks; Code review; Evaluation; Gamification; Text analysis; Codes (symbols)",,,,,,,,,,,,,,"Association for Computing Machinery",,9781450348560,,,"English","ACM Int. Conf. Proc. Ser.",Conference Paper,"Final","",Scopus,2-s2.0-85030248172
[No author name available],[No author id available],"Proceedings - 2016 IEEE International Conference on Software Maintenance and Evolution, ICSME 2016",2017,"Proceedings - 2016 IEEE International Conference on Software Maintenance and Evolution, ICSME 2016",,,,"","",675,,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-85013127714&partnerID=40&md5=19ff3b7d78a7b69cbba16dd95b095afb",,"","The proceedings contain 82 papers. The topics discussed include: automated extraction of mixins in cascading style sheets; detect cross-browser issues for JavaScript-based web applications based on record/replay; inferring links between concerns and methods with multi-abstraction vector space model; inferring computational state machine models from program executions; an optimization approach for matching textual domain models with existing code; evolving NoSQL databases without downtime; from quick fixes to slow fixes: reimagining static analysis resolutions to enable design space exploration; recommending code changes for automatic backporting of Linux device drivers; smells like teen spirit: improving bug prediction performance using the intensity of code smells; comparing quality metrics for cloned and non cloned Java methods: a large scale empirical study; concepts, operations, and feasibility of a projection-based variation control system; who is who in the mailing list? comparing six disambiguation heuristics to identify multiple addresses of a participant; TechLand: assisting technology landscape inquiries with insights from stack overflow; learning to extract api mentions from informal natural language discussions; accessing inaccessible android APIs: an empirical study; and a quantitative and qualitative investigation of performance-related commits in Android apps.",,,,,,,,,,,,,,,,"Institute of Electrical and Electronics Engineers Inc.",,9781509038060,,,"English","Proc. - IEEE Int. Conf. Softw. Maint. Evol., ICSME",Conference Review,"Final","",Scopus,2-s2.0-85013127714
"Bonet N., Garcés K., Casallas R., Correal M.E., Wei R.","57200512181;35113054600;15064114500;27367727100;56486871600;","Influence of programming style in transformation bad smells: Mining of ETL repositories",2017,"CEUR Workshop Proceedings","2019",,,"539","542",,,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-85041448933&partnerID=40&md5=4d7d136d07ea7b0341fecdbdf4c6bb05","Universidad de los Andes, School of Engineering, Department of Systems and Computing Engineering, Bogota D.C., Colombia; Universidad de los Andes, School of Engineering, Departament of Industrial Engineering, Bogota D.C., Colombia; University of York, Department of Computer Science, United Kingdom","Bonet, N., Universidad de los Andes, School of Engineering, Department of Systems and Computing Engineering, Bogota D.C., Colombia; Garcés, K., Universidad de los Andes, School of Engineering, Department of Systems and Computing Engineering, Bogota D.C., Colombia; Casallas, R., Universidad de los Andes, School of Engineering, Department of Systems and Computing Engineering, Bogota D.C., Colombia; Correal, M.E., Universidad de los Andes, School of Engineering, Departament of Industrial Engineering, Bogota D.C., Colombia; Wei, R., University of York, Department of Computer Science, United Kingdom","Bad smells affect maintainability and performance of model-to-model transformations. A number of studies have defined a set of transformation bad smells, and proposed techniques to recognize and —according to their complexity— fix them in a (semi-)automated way. In education, it is necessary to make students aware of this subject and provide them with guidelines to improve the quality of their transformations. This paper presents some common bad smells in model transformations written by master students from Universidad de los Andes and compares them with that of publicly available repositories of ETL transformations, for the purpose of knowing whether programming style affects the incidence of smells. Three contributions are presented: i) Two new bad smell patterns enriching the existing catalogs; ii) A process that includes the automated extraction of transformation metrics and bad smells metrics from the repositories, and a statistical analysis that helps in identifying the relations between such metrics; and iii) A tool that supports the process. By applying our approach on the datasets, we discuss whether it is easier for students with imperative programming language background to make use of appropriate declarative constructs of a transformation language compared to imperative ones. We conclude that students must be encouraged and guided to use declarative constructs whereas possible when developing declarative transformations, that results in artifacts that are more maintainable and with a better performance.","Bad Smells; Educational Purpose; Epsilon Transformation Language (ETL); Metric; Model Transformation; Model-Driven Engineering; Quality","Education; Image quality; Odors; Students; Bad smells; Educational Purpose; Metric; Model transformation; Model-driven Engineering; Transformation languages; Education computing",,,,,,,,,,,,,"Burgueno L.Guerra E.Di Ruscio D.Jonathan J.GhoshGreenyer J.Collet P.Famelis M.KokalyJulia Rubin J.Gogolla M.Bencomo N.Clarke P.J.ColletPierantonio A.","CEUR-WS",16130073,,,,"English","CEUR Workshop Proc.",Conference Paper,"Final","",Scopus,2-s2.0-85041448933
"Tarwani S., Sureka A.","57190585453;55922095600;","Investigating the effectiveness of greedy algorithm on open source software systems for determining refactoring sequence",2017,"CEUR Workshop Proceedings","2017",,,"43","50",,,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-85040636970&partnerID=40&md5=c0e2560ccf2c033b2f4c6f201e1323fd","SRM University, India; Ashoka University, India","Tarwani, S., SRM University, India; Sureka, A., Ashoka University, India","The deeper problem in the source code are the bad smells that indicates something is wrong and if they are not detected timely, then they lead towards the complete deterioration of the working software causing major financial and productivity loss. Refactoring helps in removing these bad smells by improving internal quality attributes of the software without affecting its external behaviour. However refactoring needs to be applied in a controlled manner. In this study an approach has been propose for determining an optimal refactoring sequence that will maximize the source-code maintainability using greedy algorithm. The proposed approach selects the most optimum sequence at every step-in hope of finding the global optimum solution. We conduct an empirical analysis on four open-source software and select those classes that have bad smells greater than or equal to four. Further filtration is done by selecting those classes from the group that have high value of source code lines. We demonstrate the effectiveness of our approach using concrete examples of the experimental dataset and presenting summary results. Copyright © 2017 for this paper by its authors.","Empirical software engineering; Greedy algorithm; Refactoring; Software maintainability; Software quality","Codes (symbols); Computer programming languages; Computer software; Computer software selection and evaluation; Maintainability; Odors; Open systems; Optimal systems; Software engineering; Empirical Software Engineering; Greedy algorithms; Refactorings; Software maintainability; Software Quality; Open source software",,,,,,,,,,,,,"Anwar T.Lichter H.Sunetnanta T.","CEUR-WS",16130073,,,,"English","CEUR Workshop Proc.",Conference Paper,"Final","",Scopus,2-s2.0-85040636970
"Bán D.","55496456800;","The Connection between antipatterns and maintainability in firefox",2017,"Acta Cybernetica","23","2",,"471","490",,1,"10.14232/actacyb.23.2.2017.3","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85034647449&doi=10.14232%2factacyb.23.2.2017.3&partnerID=40&md5=7da8bab9aca8ce6309db7739ebfcdb9c","University of Szeged, Hungary","Bán, D., University of Szeged, Hungary","The notion that antipatterns have a detrimental effect on source code maintainability is widely accepted, but there is relatively little objective evidence to support it. We seek to investigate this issue by analyzing the connection between antipatterns and maintainability in an empirical study of Firefox, an open source browser application developed in C++. After extracting antipattern instances and maintainability information from 45 revisions, we looked for correlations to uncover a connection between the two concepts. We found statistically significant negative values for both Pearson and Spearman correlations, most of which were under-0.65. These values suggest there are strong, inverse relationships, thereby supporting our initial assumption that the more antipatterns the source code contains, the harder it is to maintain. Lastly, we combined these data into a table applicable for machine learning experiments, which we conducted using Weka [10] and several of its classifier algorithms. All five regression types we tried had correlation coeficients over 0.77 and used mostly negative weights for the antipattern predictors in the models we constructed. In conclusion, we can say that this empirical study is another step towards objectively demonstrating that antipatterns have an adverse effect on software maintainability.","Antipatterns; Correlation; Machine learning; Maintainability; Source code metrics; Static analysis","Artificial intelligence; Codes (symbols); Correlation methods; Learning systems; Maintainability; Object oriented programming; Open source software; Static analysis; Anti-patterns; Classifier algorithms; Empirical studies; Inverse relationship; Open source browser; Software maintainability; Source code metrics; Spearman correlation; C++ (programming language)",,,,,,,,,,,,"Bán, D.; University of SzegedHungary; email: zealot@inf.u-szeged.hu",,"University of Szeged, Institute of Informatics",0324721X,,ACCYD,,"English","Acta Cybern",Conference Paper,"Final","All Open Access, Bronze",Scopus,2-s2.0-85034647449
"Hozano M., Antunes N., Fonseca B., Costa E.","57076994400;57217858593;36175426900;35618052700;","Evaluating the accuracy of machine learning algorithms on detecting code smells for different developers",2017,"ICEIS 2017 - Proceedings of the 19th International Conference on Enterprise Information Systems","2",,,"474","482",,10,"10.5220/0006338804740482","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85023165696&doi=10.5220%2f0006338804740482&partnerID=40&md5=5dcfa6208c5ecb9800c3ebd3c2e88528","COPIN, Federal University of Campina Grande, Paraíba, Brazil; CISUC,Department of Informatics Engineering, University of Coimbra, Portugal; IC, Federal University of Alagoas, Maceió-Alagoas, Brazil","Hozano, M., COPIN, Federal University of Campina Grande, Paraíba, Brazil; Antunes, N., CISUC,Department of Informatics Engineering, University of Coimbra, Portugal; Fonseca, B., IC, Federal University of Alagoas, Maceió-Alagoas, Brazil; Costa, E., IC, Federal University of Alagoas, Maceió-Alagoas, Brazil","Code smells indicate poor implementation choices that may hinder the system maintenance. Their detection is important for the software quality improvement, but studies suggest that it should be tailored to the perception of each developer. Therefore, detection techniques must adapt their strategies to the developer's perception. Machine Learning (ML) algorithms is a promising way to customize the smell detection, but there is a lack of studies on their accuracy in detecting smells for different developers. This paper evaluates the use of MLalgorithms on detecting code smells for different developers, considering their individual perception about code smells. We experimentally compared the accuracy of 6 algorithms in detecting 4 code smell types for 40 different developers. For this, we used a detailed dataset containing instances of 4 code smell types manually validated by 40 developers. The results show that ML-Algorithms achieved low accuracies for the developers that participated of our study, showing that are very sensitive to the smell type and the developer. These algorithms are not able to learn with limited training set, an important limitation when dealing with diverse perceptions about code smells. ©2017 by SCITEPRESS - Science and Technology Publications, Lda. All rights reserved.","Code smell; Experiment; Machine learning","Codes (symbols); Computer software selection and evaluation; Experiments; Information systems; Information use; Learning systems; Machine learning; Odors; Code smell; Ml algorithms; Software quality improvements; System maintenance; Training sets; Learning algorithms",,,,,,,,,,,,,"Hammoudi S.Smialek M.Camp O.Filipe J.Filipe J.","SciTePress",,9789897582486,,,"English","ICEIS - Proc. Int. Conf. Enterp. Inf. Syst.",Conference Paper,"Final","All Open Access, Hybrid Gold",Scopus,2-s2.0-85023165696
[No author name available],[No author id available],"ICEIS 2017 - Proceedings of the 19th International Conference on Enterprise Information Systems",2017,"ICEIS 2017 - Proceedings of the 19th International Conference on Enterprise Information Systems","3",,,"","",2005,,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-85023159533&partnerID=40&md5=32fdb8d4811c11eb3a69d481064c9ddb",,"","The proceedings contain 213 papers. The topics discussed include: we need to discuss the relationship - an analysis of facilitators and barriers of software ecosystempartnerships; the influence of software product quality attributes on open source projects: a characterization study; a TOSCA-based programming model for interacting components of automatically deployed cloud and IoT applications; an ontology-based approach to analyzing the occurrence of code smells in software; an integrated inspection system for belt conveyor rollers - advancing in an enterprise architecture; when agile meets waterfall - investigating risks and problems on the interface between agile and traditional software development in a hybrid development organization; development of an electronic health record application using a multiple view service oriented architecture; a characterization of cloud computing adoption based on literature evidence; contact deduplication in mobile devices using textual similarity and machine learning; guidelines of data quality issues for data integration in the context of the TPC-DI benchmark; extensions, analysis and experimental assessment of a probabilistic ensemble-learning framework for detecting deviances in business process instances; audio description on Instagram: evaluating and comparing two ways of describing images for visually impaired; facial expression recognition improvement through an appearance features combination; on the development of serious games in the health sector - a case study of a serious game tool to improve life management skills in the young; and software ecosystems governance - a systematic literature review and research agenda.",,,,,,,,,,,,,,,"Smialek M.Camp O.Hammoudi S.Filipe J.Filipe J.","SciTePress",,9789897582493,,,"English","ICEIS - Proc. Int. Conf. Enterp. Inf. Syst.",Conference Review,"Final","",Scopus,2-s2.0-85023159533
[No author name available],[No author id available],"ICEIS 2017 - Proceedings of the 19th International Conference on Enterprise Information Systems",2017,"ICEIS 2017 - Proceedings of the 19th International Conference on Enterprise Information Systems","2",,,"","",2005,,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-85022327995&partnerID=40&md5=769a2b95303ec96f7b5674c7f5249ed0",,"","The proceedings contain 213 papers. The topics discussed include: we need to discuss the relationship - an analysis of facilitators and barriers of software ecosystempartnerships; the influence of software product quality attributes on open source projects: a characterization study; a TOSCA-based programming model for interacting components of automatically deployed cloud and IoT applications; an ontology-based approach to analyzing the occurrence of code smells in software; an integrated inspection system for belt conveyor rollers - advancing in an enterprise architecture; when agile meets waterfall - investigating risks and problems on the interface between agile and traditional software development in a hybrid development organization; development of an electronic health record application using a multiple view service oriented architecture; a characterization of cloud computing adoption based on literature evidence; contact deduplication in mobile devices using textual similarity and machine learning; guidelines of data quality issues for data integration in the context of the TPC-DI benchmark; extensions, analysis and experimental assessment of a probabilistic ensemble-learning framework for detecting deviances in business process instances; audio description on Instagram: evaluating and comparing two ways of describing images for visually impaired; facial expression recognition improvement through an appearance features combination; on the development of serious games in the health sector - a case study of a serious game tool to improve life management skills in the young; and software ecosystems governance - a systematic literature review and research agenda.",,,,,,,,,,,,,,,"Filipe J.Filipe J.Smialek M.Hammoudi S.Camp O.","SciTePress",,9789897582486,,,"English","ICEIS - Proc. Int. Conf. Enterp. Inf. Syst.",Conference Review,"Final","",Scopus,2-s2.0-85022327995
[No author name available],[No author id available],"ICEIS 2017 - Proceedings of the 19th International Conference on Enterprise Information Systems",2017,"ICEIS 2017 - Proceedings of the 19th International Conference on Enterprise Information Systems","1",,,"","",2005,,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-85022174577&partnerID=40&md5=54d0d155e2ad663409e548f75d034816",,"","The proceedings contain 213 papers. The topics discussed include: we need to discuss the relationship - an analysis of facilitators and barriers of software ecosystempartnerships; the influence of software product quality attributes on open source projects: a characterization study; a TOSCA-based programming model for interacting components of automatically deployed cloud and IoT applications; an ontology-based approach to analyzing the occurrence of code smells in software; an integrated inspection system for belt conveyor rollers - advancing in an enterprise architecture; when agile meets waterfall - investigating risks and problems on the interface between agile and traditional software development in a hybrid development organization; development of an electronic health record application using a multiple view service oriented architecture; a characterization of cloud computing adoption based on literature evidence; contact deduplication in mobile devices using textual similarity and machine learning; guidelines of data quality issues for data integration in the context of the TPC-DI benchmark; extensions, analysis and experimental assessment of a probabilistic ensemble-learning framework for detecting deviances in business process instances; audio description on Instagram: evaluating and comparing two ways of describing images for visually impaired; facial expression recognition improvement through an appearance features combination; on the development of serious games in the health sector - a case study of a serious game tool to improve life management skills in the young; and software ecosystems governance - a systematic literature review and research agenda.",,,,,,,,,,,,,,,"Filipe J.Hammoudi S.Smialek M.Camp O.Filipe J.","SciTePress",,9789897582479,,,"English","ICEIS - Proc. Int. Conf. Enterp. Inf. Syst.",Conference Review,"Final","",Scopus,2-s2.0-85022174577
[No author name available],[No author id available],"20th European Conference on the Applications of Evolutionary Computation, EvoApplications 2017",2017,"Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)","10200 LNCS",,,"1","239",,,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-85017513844&partnerID=40&md5=87970b901121edc44b744be8eba2b8ac",,"","The proceedings contain 15 papers. The special focus in this conference is on Applications of Evolutionary Computation. The topics include: Hybrid algorithms based on integer programming for the search of prioritized test data in software product lines; on the use of smelly examples to detect code smells in javascript; deep parameter tuning of concurrent divide and conquer algorithms in akka; focusing learning-based testing away from known weaknesses; polytypic genetic programming; evolving rules for action selection in automated testing via genetic programming - a first approach; a new multi swarm particle swarm optimization for robust optimization over time; the static and stochastic VRP with time windows and both random customers and reveal times; pre scheduled colony size variation in dynamic environments; an online packing heuristic for the three-dimensional container loading problem in dynamic environments and the physical internet; advancing dynamic evolutionary optimization using in-memory database technology; road traffic rules synthesis using grammatical evolution; solving dynamic graph coloring problem using dynamic pool based evolutionary algorithm; meta-heuristics for improved RF emitter localization and automated design of genetic programming classification algorithms using a genetic algorithm.",,,,,,,,,,,,,,,"Hidalgo J.I.Kaufmann P.Nguyen T.T.Bacardit J.Cagnoni S.Divina F.Ascheid G.Mavrovouniotis M.de Vega F.F.Brabazon A.Haasdijk E.Heinerman J.Cotta C.Zhang M.D Andreagiovanni F.Kampouridis M.Mora Garcia A.M.Esparcia-Alcazar A.I.Coler M.Iacca G.Tonda A.Squillero G.Sim K.Urquhart N.Glette K.Hu T.Burrelli P.Schaefer R.Silva S.Tarantino E.","Springer Verlag",03029743,9783319557915,,,"English","Lect. Notes Comput. Sci.",Conference Review,"Final","",Scopus,2-s2.0-85017513844
"Kaur K., Jain S.","57223048873;57192688834;","Evaluation of machine learning approaches for change-proneness prediction using code smells",2017,"Advances in Intelligent Systems and Computing","515",,,"561","572",,4,"10.1007/978-981-10-3153-3_56","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85015905794&doi=10.1007%2f978-981-10-3153-3_56&partnerID=40&md5=3572adb334a423488d9056d71c011444","University School of Information and Communication Technology (U.S.I.C.T), Guru Gobind Singh Indraprastha University (G.G.S.I.P.U), New Delhi, India","Kaur, K., University School of Information and Communication Technology (U.S.I.C.T), Guru Gobind Singh Indraprastha University (G.G.S.I.P.U), New Delhi, India; Jain, S., University School of Information and Communication Technology (U.S.I.C.T), Guru Gobind Singh Indraprastha University (G.G.S.I.P.U), New Delhi, India","In the field of technology, software is an essential driver of business and industry. Software undergoes changes due to maintenance activities initiated by bug fixing, improved documentation, and new requirements of users. In software, code smells are indicators of a system which may give maintenance problem in future. This paper evaluates six types of machine learning algorithms to predict change-proneness using code smells as predictors for various versions of four Java-coded applications. Two approaches are used: method 1-random undersampling is done before Feature selection; method 2-feature selection is done prior to random undersampling. This paper concludes that gene expression programming (GEP) gives maximum AUC value, whereas cascade correlation network (CCR), treeboost, and PNN\GRNN algorithms are among top algorithms to predict F-measure, precision, recall, and accuracy. Also, GOD and L_M code smells are good predictors of software change-proneness. Results show that method 1 outperforms method 2. © Springer Nature Singapore Pte Ltd. 2017.","Code smells; Feature subset selection (FSS); Machine learning algorithms; Software change-proneness; Undersampling","Artificial intelligence; Codes (symbols); Computation theory; Computer software maintenance; Feature extraction; Forecasting; Gene expression; Intelligent computing; Learning systems; Odors; Cascade correlation network; Code smell; Feature subset selection; Gene expression programming; Machine learning approaches; Random under samplings; Software change; Under-sampling; Learning algorithms",,,,,,,,,,,,"Kaur, K.; University School of Information and Communication Technology (U.S.I.C.T), India; email: kdkaur99@gmail.com","Satapathy S.C.Bhateja V.Pattnaik P.K.Udgata S.K.","Springer Verlag",21945357,9789811031526,,,"English","Adv. Intell. Sys. Comput.",Conference Paper,"Final","",Scopus,2-s2.0-85015905794
"Keck P., Hoorn A.V., Okanovic D., Pitakrat T., Dullmann T.F.","57214009944;57190848439;45561466200;42962101900;57192987112;","Antipattern-Based Problem Injection for Assessing Performance and Reliability Evaluation Techniques",2016,"Proceedings - 2016 IEEE 27th International Symposium on Software Reliability Engineering Workshops, ISSREW 2016",,,"7789382","64","70",,4,"10.1109/ISSREW.2016.36","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85009792764&doi=10.1109%2fISSREW.2016.36&partnerID=40&md5=e031c8f3c82450156bfd38035cc93203","University of Stuttgart, Institute of Software Technology, Reliable Software Systems Group, Universitatsstraße 38, Stuttgart, 70569, Germany","Keck, P., University of Stuttgart, Institute of Software Technology, Reliable Software Systems Group, Universitatsstraße 38, Stuttgart, 70569, Germany; Hoorn, A.V., University of Stuttgart, Institute of Software Technology, Reliable Software Systems Group, Universitatsstraße 38, Stuttgart, 70569, Germany; Okanovic, D., University of Stuttgart, Institute of Software Technology, Reliable Software Systems Group, Universitatsstraße 38, Stuttgart, 70569, Germany; Pitakrat, T., University of Stuttgart, Institute of Software Technology, Reliable Software Systems Group, Universitatsstraße 38, Stuttgart, 70569, Germany; Dullmann, T.F., University of Stuttgart, Institute of Software Technology, Reliable Software Systems Group, Universitatsstraße 38, Stuttgart, 70569, Germany","A challenging problem with today's increasingly large and distributed software systems is their performance behavior. To help developers avoid or detect mistakes that lead to performance problems, many researchers in software performance engineering have come up with classifications of such problems, called antipatterns. To test the approaches for antipattern detection, data from running systems is required. However, the usefulness of this data is doubtful as it may or may not include manifestations of performance problems. In this paper, we classify existing performance antipatterns w.r.t. their suitability for being injected and, based on this, introduce an extensible tool that allows to inject instances of these antipatterns into existing applications. The approach can be useful for researchers to test and validate their automated runtime problem evaluation and prevention techniques. Using two exemplary performance antipatterns, it is demonstrated that the injection is easily possible and produces feasible, though currently rather clinical results. © 2016 IEEE.","Performance and reliability evaluation; Performance antipatterns; Problem injection","Reliability; Technical presentations; Anti-patterns; Distributed software system; Performance and reliabilities; Performance problems; Prevention techniques; Running systems; Runtimes; Software performance engineerings; Software reliability",,,,,,,,,,,,,,"Institute of Electrical and Electronics Engineers Inc.",,9781509036011,,,"English","Proc. - IEEE Int. Symp. Softw. Reliab. Eng. Workshops, ISSREW",Conference Paper,"Final","",Scopus,2-s2.0-85009792764
"Tarwani S., Chug A.","57190585453;56168650500;","Predicting maintainability of open source software using Gene Expression Programming and bad smells",2016,"2016 5th International Conference on Reliability, Infocom Technologies and Optimization, ICRITO 2016: Trends and Future Directions",,,"7784998","452","459",,7,"10.1109/ICRITO.2016.7784998","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85010619005&doi=10.1109%2fICRITO.2016.7784998&partnerID=40&md5=a1850032964380f697291665b79c3b0a","University School of Information and Communication Technology, Guru Gobind Singh Indraprastha University, Dwarka, New Delhi, India","Tarwani, S., University School of Information and Communication Technology, Guru Gobind Singh Indraprastha University, Dwarka, New Delhi, India; Chug, A., University School of Information and Communication Technology, Guru Gobind Singh Indraprastha University, Dwarka, New Delhi, India","Software maintenance phase of Software Development Lifecycle (SDLC) is the most expensive and complex phase that requires nearly 60-70% of the total project cost. Due to this, many software fails to get repair within real time constraint. Ascribe to technology advancements and changing requirements, software must be well developed and maintained to get adapted. Hence, it is necessary to predict software maintainability in the early phases of the lifecycle so that optimization of resources can be possible and cost can be reduced. Software Maintainability is the quality attribute of software product that explains the ease with which modifications can be performed. The main focus in this study is to propose the use of Gene Expression Programming (GEP) for the software maintainability prediction and measure its performance with various machine leaning techniques such as Decision Tree Forest, Support Vector Machine, Linear regression, Multilayer Perceptron and Radial basis function neural network. The empirical study is conducted with the help of four open source datasets. Eleven bad smells are identified and is considered as maintenance effort. Results of this study show that GEP algorithm performs better than machine learning classifiers; hence it can be used as sound alternative in the prediction of software maintainability. This study would be helpful in achieving better resource allocation hence it will be useful for developers and maintainers. © 2016 IEEE.","Bad smell; Gene Expression Programming; Machine learning algorithm; Prediction accuracy measures; Software Maintainability; Software Metrics","Artificial intelligence; Complex networks; Decision trees; Forecasting; Gene expression; Genes; Learning algorithms; Learning systems; Life cycle; Maintainability; Object oriented programming; Odors; Open systems; Optimization; Radial basis function networks; Software design; Software engineering; Bad smells; Gene expression programming; Prediction accuracy; Software maintainability; Software metrics; Open source software",,,,,,,,,,,,,"Shukla B.Khatri S.K.Kapur P.K.","Institute of Electrical and Electronics Engineers Inc.",,9781509014897,,,"English","Int. Conf. Reliab., Infocom Technol. Optim., ICRITO: Trends Future Dir.",Conference Paper,"Final","",Scopus,2-s2.0-85010619005
"Ma W., Chen L., Zhou Y., Xu B.","56949541600;57189042207;57022538800;7404589262;","Do we have a chance to fix bugs when refactoring code smells?",2016,"Proceedings - 2016 International Conference on Software Analysis, Testing and Evolution, SATE 2016",,,"7780189","24","29",,12,"10.1109/SATE.2016.11","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85010628555&doi=10.1109%2fSATE.2016.11&partnerID=40&md5=beb48d5c4fe316b9b083326b56b2af71","State Key Laboratory for Novel Software Technology, Nanjing University, Nanjing, China","Ma, W., State Key Laboratory for Novel Software Technology, Nanjing University, Nanjing, China; Chen, L., State Key Laboratory for Novel Software Technology, Nanjing University, Nanjing, China; Zhou, Y., State Key Laboratory for Novel Software Technology, Nanjing University, Nanjing, China; Xu, B., State Key Laboratory for Novel Software Technology, Nanjing University, Nanjing, China","Code smells are used to describe code structures that may cause detrimental effects on software and should be refactored. Previous studies show that some code smells have significant effect on faults. However, how to refactor code smells to reduce bugs still needs more concern. We investigate the possibility of prioritizing code smell refactoring with the help of fault prediction results. We also investigate the possibility of improving the performance of fault prediction by using code smell detection results. We use Cohen's Kappa statistic to report agreements between results of code smell detections and fault predictions. We use fault prediction result as an indicator to guide code smell refactoring. Our results show that refactoring Blob, Long Parameter List, and Refused Parent Be Request may have a good chance to detect and fix bugs, and some code smells are particularly useful for improving the recall of fault prediction. © 2016 IEEE.","Code smell; Fault prediction; Refactoring; Refactoring prioritization","Fault detection; Forecasting; Nonlinear control systems; Odors; Software testing; Code smell; Code structure; Cohen's kappas; Fault prediction; Prioritization; Refactorings; Codes (symbols)","2014CB340702; National Natural Science Foundation of China, NSFC: 61432001, 61472175, 61472178, 91418202","National Key Basic Research and Development Program of China (2014CB340702), the National Natural Science Foundation of China (91418202, 61472175, 61472178, 61432001).",,,,,,,,,,"Ma, W.; State Key Laboratory for Novel Software Technology, China; email: wwyma@smail.nju.edu.cn","Jiang H.Peng X.","Institute of Electrical and Electronics Engineers Inc.",,9781509045174,,,"English","Proc. - Int. Conf. Softw. Anal., Test. Evol., SATE",Conference Paper,"Final","",Scopus,2-s2.0-85010628555
[No author name available],[No author id available],"Proceedings - 2016 International Conference on Software Analysis, Testing and Evolution, SATE 2016",2016,"Proceedings - 2016 International Conference on Software Analysis, Testing and Evolution, SATE 2016",,,,"","",128,,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-85010500631&partnerID=40&md5=3a0ceb737a018a8bc1d017b01d342dc7",,"","The proceedings contain 19 papers. The topics discussed include: an exploratory analysis on software developers' bug-introducing tendency over time; detecting code smells in python programs; how is code recommendation applied in Android development: a qualitative review; dynamically detecting DOM-related atomicity violations in JavaScript with asynchronous call; automatic reproducible crash detection; diagnosis of service failures by probabilistic inference with runtime activity dependences; test case prioritization approach to improving the effectiveness of fault localization; research on relations between software network structure and fault propagation; identify coincidental correct test cases based on fuzzy classification; debugging multithreaded programs as if they were sequential; which is more important for cross-project defect prediction: instance or feature?; lightweight fault localization combining with fault-context; cost-sensitive local collaborative representation for software defect prediction; and distance-based test-suite reduction for efficient testing-based fault localization.",,,,,,,,,,,,,,,"Jiang H.Peng X.","Institute of Electrical and Electronics Engineers Inc.",,9781509045174,,,"English","Proc. - Int. Conf. Softw. Anal., Test. Evol., SATE",Conference Review,"Final","",Scopus,2-s2.0-85010500631
"Kaur A., Kaur K., Jain S.","57548731500;57223048873;57192688834;","Predicting software change-proneness with code smells and class imbalance learning",2016,"2016 International Conference on Advances in Computing, Communications and Informatics, ICACCI 2016",,,"7732136","746","754",,13,"10.1109/ICACCI.2016.7732136","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85007329149&doi=10.1109%2fICACCI.2016.7732136&partnerID=40&md5=4f0ef646ac336e6fdb34b40160c4de01","USICT, Guru Gobind Singh Indraprastha University, Delhi, India","Kaur, A., USICT, Guru Gobind Singh Indraprastha University, Delhi, India; Kaur, K., USICT, Guru Gobind Singh Indraprastha University, Delhi, India; Jain, S., USICT, Guru Gobind Singh Indraprastha University, Delhi, India","The objective of this paper is to study the relationship between different types of object-oriented software metrics, code smells and actual changes in software code that occur during maintenance period. It is hypothesized that code smells are indicators of maintenance problems. To understand the relationship between code smells and maintenance problems, we extract code smells in a Java based mobile application called MOBAC. Four versions of MOBAC are studied. Machine learning techniques are applied to predict software change-proneness with code smells as predictor variables. The results of this paper indicate that codes smells are more accurate predictors of change-proneness than static code metrics for all machine learning methods. However, class imbalance techniques did not outperform class balance machine learning techniques in change-proneness prediction. The results of this paper are based on accuracy measures such as F-measure and area under ROC curve. © 2016 IEEE.","Class imbalance learning; Code smells; Exception handling smells; Machine learning techniques; Software change-proneness","Artificial intelligence; Codes (symbols); Forecasting; Information science; Java programming language; Learning algorithms; Learning systems; Maintenance; Odors; Class imbalance learning; Code smell; Exception handling; Machine learning techniques; Software change; Object oriented programming",,,,,,,,,,,,,"Rodrigues J.J.P.C.Siarry P.Perez G.M.Tomar R.Pathan A.-S.K.Mehta S.Thampi S.M.Berretti S.Gorthi R.P.Pathan A.-S.K.Wu J.Li J.Jain V.Rodrigues J.J.P.C.Atiquzzaman M.Rodrigues J.J.P.C.Bedi P.Kammoun M.H.","Institute of Electrical and Electronics Engineers Inc.",,9781509020287,,,"English","Int. Conf. Adv. Comput., Commun. Inf., ICACCI",Conference Paper,"Final","",Scopus,2-s2.0-85007329149
"Wang H., Ouni A., Kessentini M., Maxim B., Grosky W.I.","57188742982;50761492200;25653537200;6602334683;7004119740;","Identification of web service refactoring opportunities as a multi-objective problem",2016,"Proceedings - 2016 IEEE International Conference on Web Services, ICWS 2016",,,"7558051","586","593",,14,"10.1109/ICWS.2016.81","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84990876416&doi=10.1109%2fICWS.2016.81&partnerID=40&md5=356b363063ffd8dbc7d72b889f27463c","Computer and Information Science Department, University of Michigan, United States; Graduate School of Information Science and Technology, Osaka University, Japan","Wang, H., Computer and Information Science Department, University of Michigan, United States; Ouni, A., Graduate School of Information Science and Technology, Osaka University, Japan; Kessentini, M., Computer and Information Science Department, University of Michigan, United States; Maxim, B., Computer and Information Science Department, University of Michigan, United States; Grosky, W.I., Computer and Information Science Department, University of Michigan, United States","We propose, in this paper, to consider the problemof Web service antipatterns detection as a multi-objectiveproblem where examples of Web service antipatterns and welldesignedcode are used to generate detection rules. To thisend, we use multi-objective genetic programming (MOGP)to find the best combination of metrics that maximizes thedetection of Web service antipattern examples and minimizesthe detection of well-designed Web service design examples. We report the results of an empirical study using 8 differenttypes of common Web service antipatterns. We compared ourmulti-objective formulation with random search, one existingmono-objective approach, and one state-of-the-art detectiontechnique not based on heuristic search. Statistical analysis ofthe obtained results demonstrates that our approach is efficientin antipattern detection, on average, with a precision score of94% and a recall score of 92%. © 2016 IEEE.","Interface design; Multiobjective optimization; Web service antipatterns","Genetic algorithms; Genetic programming; Heuristic algorithms; Multiobjective optimization; Websites; Anti-patterns; Antipatterns detections; Empirical studies; Heuristic search; Interface designs; Multi-objective problem; Objective approaches; State of the art; Web services",,,,,,,,,,,,,"Reiff-Marganiec S.","Institute of Electrical and Electronics Engineers Inc.",,9781509026753,,,"English","Proc. - IEEE Int. Conf. Web Serv., ICWS",Conference Paper,"Final","",Scopus,2-s2.0-84990876416
"Zhang Y., Meisner D., Mars J., Tang L.","56704547900;26867913000;18434598000;22235463100;","Treadmill: Attributing the Source of Tail Latency through Precise Load Testing and Statistical Inference",2016,"Proceedings - 2016 43rd International Symposium on Computer Architecture, ISCA 2016",,,"7551414","456","468",,58,"10.1109/ISCA.2016.47","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84988376949&doi=10.1109%2fISCA.2016.47&partnerID=40&md5=638ebe47b993f0fcf7e8883b66bf6c83","University of Michigan, United States; Facebook Inc., United States","Zhang, Y., University of Michigan, United States; Meisner, D., Facebook Inc., United States; Mars, J., University of Michigan, United States; Tang, L., University of Michigan, United States","Managing tail latency of requests has become one of the primary challenges for large-scale Internet services. Data centers are quickly evolving and service operators frequently desire to make changes to the deployed software and production hardware configurations. Such changes demand a confident understanding of the impact on one's service, in particular its effect on tail latency (e.g., 95th-or 99th-percentile response latency of the service). Evaluating the impact on the tail is challenging because of its inherent variability. Existing tools and methodologies for measuring these effects suffer from a number of deficiencies including poor load tester design, statistically inaccurate aggregation, and improper attribution of effects. As shown in the paper, these pitfalls can often result in misleading conclusions. In this paper, we develop a methodology for statistically rigorous performance evaluation and performance factor attribution for server workloads. First, we find that careful design of the server load tester can ensure high quality performance evaluation, and empirically demonstrate the inaccuracy of load testers in previous work. Learning from the design flaws in prior work, we design and develop a modular load tester platform, Treadmill, that overcomes pitfalls of existing tools. Next, utilizing Treadmill, we construct measurement and analysis procedures that can properly attribute performance factors. We rely on statistically-sound performance evaluation and quantile regression, extending it to accommodate the idiosyncrasies of server systems. Finally, we use our augmented methodology to evaluate the impact of common server hardware features with Facebook production workloads on production hardware. We decompose the effects of these features on request tail latency and demonstrate that our evaluation methodology provides superior results, particularly in capturing complicated and counter-intuitive performance behaviors. By tuning the hardware features as suggested by the attribution, we reduce the 99th-percentile latency by 43% and its variance by 93%. © 2016 IEEE.","data center; load testing; tail latency","Computer architecture; Computer hardware; Hardware; Internet; Quality control; Reconfigurable hardware; Sporting goods; Data centers; Evaluation methodologies; Hardware configurations; Inherent variability; Measurement and analysis; Production workloads; Statistical inference; tail latency; Load testing",,,,,,,,,,,,,,"Institute of Electrical and Electronics Engineers Inc.",,9781467389471,,,"English","Proc. - Int. Symp. Comput. Archit., ISCA",Conference Paper,"Final","",Scopus,2-s2.0-84988376949
"Dillon B.S.","57213898428;","A case study in object-oriented patterns identified during manual refactoring",2016,"2016 IEEE/ACIS 14th International Conference on Software Engineering Research, Management and Applications, SERA 2016",,,"7516133","91","98",,,"10.1109/SERA.2016.7516133","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84983380226&doi=10.1109%2fSERA.2016.7516133&partnerID=40&md5=800f27b3d37dc9075ecac40cfd596d2e","Naval Surface Warfare Center, Dahlgren Division, Virginia Tech, Blacksburg, VA, United States","Dillon, B.S., Naval Surface Warfare Center, Dahlgren Division, Virginia Tech, Blacksburg, VA, United States","Software design patterns are often-repeated implementations that have been identified and cataloged. These are commonly seen as useful and good patterns to implement. Occasionally the term anti-pattern has been used to identify less-useful patterns that also appear regularly. The exact definition of an anti-pattern is somewhat subjective, and the term has even been applied to some recognized design patterns. This paper discusses four manual refactoring case studies where patterns were discovered and cataloged. Evidence observed in the source code is used to infer how these patterns evolved. Based on these findings, preventive development practices are suggested. Potential improvements to development tools and a new method for pattern classification are suggested as subjects for future work. © 2016 IEEE.","anti-patterns; design patterns; refactoring; reverse engineering; software aging; Software evolution; software quality","Application programs; Computer software selection and evaluation; Design for testability; Engineering research; Object oriented programming; Reverse engineering; Software engineering; Anti-patterns; Design Patterns; Refactorings; Software aging; Software Evolution; Software Quality; Software design",,,,,,,,,,,,"Dillon, B.S.; Naval Surface Warfare Center, United States; email: briand81@vt.edu","Song Y.-T.","Institute of Electrical and Electronics Engineers Inc.",,9781509008094,,,"English","IEEE/ACIS Int. Conf. Softw. Eng. Res., Manag. Appl., SERA",Conference Paper,"Final","",Scopus,2-s2.0-84983380226
[No author name available],[No author id available],"ACM International Conference Proceeding Series",2016,"ACM International Conference Proceeding Series","01-03-June-2016",,,"","",322,,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-84978473145&partnerID=40&md5=2ae2e134478431f5a98b85f6e2788643",,"","The proceedings contain 44 papers. The topics discussed include: the impact of agile methods on the development of an agile culture - research proposal: the agile evolution; remedying knowledge loss in FLOSS (free/ libre open source software); integrating evidence from systematic reviews with software engineering practice through evidence briefings; personalised technical support for text-based interactions: a validation study; results from an ethnographically-informed study in the context of test driven development; the jinx on the NASA software defect data sets; benefits and limitations of job rotation in software organizations: a systematic literature review; evidence-based software portfolio management: a tool description and evaluation; a review-based comparative study of bad smell detection tools; do more inspectors guarantee higher accuracy of the capture-recapture estimates? an empirical study; an integrated tool environment for experimentation in domain specific language engineering; beyond the spreadsheet: reflections on tool support for literature studies; improving vulnerability detection measurement: test suites and software security assurance; what we have learnt adopting evidence-based software engineering for industrial practice; and an exploratory study on the effects of perceived value and stakeholder satisfaction on software projects.",,,,,,,,,,,,,,,,"Association for Computing Machinery",,9781450336918,,,"English","ACM Int. Conf. Proc. Ser.",Conference Review,"Final","",Scopus,2-s2.0-84978473145
"Arcelli Fontana F., Mäntylä M.V., Zanoni M., Marino A.","6601971118;7006843663;56599129300;55987947800;","Comparing and experimenting machine learning techniques for code smell detection",2016,"Empirical Software Engineering","21","3",,"1143","1191",,208,"10.1007/s10664-015-9378-4","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84930531514&doi=10.1007%2fs10664-015-9378-4&partnerID=40&md5=d62b053c13c9c2d80b21ec59c1738a56","University of Milano-Bicocca, Milano, Italy; University of Oulu, Oulu, Finland; Aalto University, Helsinki, Finland","Arcelli Fontana, F., University of Milano-Bicocca, Milano, Italy; Mäntylä, M.V., University of Oulu, Oulu, Finland, Aalto University, Helsinki, Finland; Zanoni, M., University of Milano-Bicocca, Milano, Italy; Marino, A., University of Milano-Bicocca, Milano, Italy","Several code smell detection tools have been developed providing different results, because smells can be subjectively interpreted, and hence detected, in different ways. In this paper, we perform the largest experiment of applying machine learning algorithms to code smells to the best of our knowledge. We experiment 16 different machine-learning algorithms on four code smells (Data Class, Large Class, Feature Envy, Long Method) and 74 software systems, with 1986 manually validated code smell samples. We found that all algorithms achieved high performances in the cross-validation data set, yet the highest performances were obtained by J48 and Random Forest, while the worst performance were achieved by support vector machines. However, the lower prevalence of code smells, i.e., imbalanced data, in the entire data set caused varying performances that need to be addressed in the future studies. We conclude that the application of machine learning to the detection of these code smells can provide high accuracy (>96 %), and only a hundred training examples are needed to reach at least 95 % accuracy. © 2015, Springer Science+Business Media New York.","Benchmark for code smell detection; Code smells detection; Machine learning techniques","Algorithms; Artificial intelligence; Codes (symbols); Decision trees; Learning systems; Odors; Code smell; Cross validation; Detection tools; Imbalanced data; Machine learning techniques; Random forests; Software systems; Training example; Learning algorithms",,,,,,,,,,,,"Zanoni, M.; University of Milano-BicoccaItaly; email: marco.zanoni@disco.unimib.it",,"Springer New York LLC",13823256,,ESENF,,"English","Empir Software Eng",Article,"Final","",Scopus,2-s2.0-84930531514
"Soh Z., Yamashita A., Khomh F., Guéhéneuc Y.-G.","49862200700;57195475189;24724747600;13613429100;","Do code smells impact the effort of different maintenance programming activities?",2016,"2016 IEEE 23rd International Conference on Software Analysis, Evolution, and Reengineering, SANER 2016","1",,"7476660","393","402",,36,"10.1109/SANER.2016.103","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85026507347&doi=10.1109%2fSANER.2016.103&partnerID=40&md5=11df146fde8abb7ef22cf347a6c5c6d4","Department of Computer and Software Engineering, Polytechnique de Montreal, Canada; Department of Information Technology, Oslo and Akershus University, College of Applied Sciences, Oslo, Norway","Soh, Z., Department of Computer and Software Engineering, Polytechnique de Montreal, Canada; Yamashita, A., Department of Information Technology, Oslo and Akershus University, College of Applied Sciences, Oslo, Norway; Khomh, F., Department of Computer and Software Engineering, Polytechnique de Montreal, Canada; Guéhéneuc, Y.-G., Department of Computer and Software Engineering, Polytechnique de Montreal, Canada","Empirical studies have shown so far that code smells have relatively low impact over maintenance effort at file level. We surmise that previous studies have found low effects of code smells because the effort considered is a “sheer-effort” that does not distinguish between the kinds of developers' activities. In our study, we investigate the effects of code smells at the activity level. Examples of activities are: reading, editing, searching, and navigating, which are performed independently over different files during maintenance. We conjecture that structural attributes represented in the form of different code smells do indeed have an effect on the effort for performing certain kinds of activities. To verify this conjecture, we revisit a previous study about the impact of code smell on maintenance effort, using the same dataset, but considering activity effort. Six professional developers were hired to perform three maintenance tasks on four functionally equivalent Java Systems. Each developer performs two maintenance tasks. During maintenance task, we monitor developers' logs. Then, we define an annotation schema to identify developers' activities and assess whether code smells affect different maintenance activities. Results show that different code smells affect differently activity effort. Yet, the size of the changes performed to solve the task impacts the effort of all activities more than code smells and file size. While code smells impact the editing and navigating effort more than file size, the file size impacts the reading and searching activities more than code smells. One major implication of these results is that if code smells indeed affect the effort of certain kinds of activities, it means that their effects are contingent on the type of maintenance task at hand, where some kinds of activities will become more predominant than others. © 2016 IEEE","Code smells; Maintenance effort; Program comprehension; Programming activity; Software quality","Maintenance; Reengineering; Activity levels; Empirical studies; File levels; Low impacts; Maintenance activity; Maintenance efforts; Maintenance tasks; Programming activities; Odors",,,,,,,,,,,,"Soh, Z.; Department of Computer and Software Engineering, Canada; email: zephyrin.soh@polymtl.ca
Khomh, F.; Department of Computer and Software Engineering, Canada; email: foutse.khomh@polymtl.ca
Guéhéneuc, Y.-G.; Department of Computer and Software Engineering, Canada; email: yann-gael.gueheneuc@polymtl.ca",,"Institute of Electrical and Electronics Engineers Inc.",,9781509018550,,,"English","IEEE Int. Conf. on Softw. Anal., Evol., Reengineering, SANER",Conference Paper,"Final","All Open Access, Green",Scopus,2-s2.0-85026507347
"Fontana F.A., Dietrich J., Walter B., Yamashita A., Zanoni M.","6601971118;13411598100;14046404000;55576431200;56599129300;","Anti-pattern and code smell false positives: Preliminary conceptualisation and classification",2016,"2016 IEEE 23rd International Conference on Software Analysis, Evolution, and Reengineering, SANER 2016","2016-January",,"7476682","609","613",,59,"10.1109/SANER.2016.84","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84991000274&doi=10.1109%2fSANER.2016.84&partnerID=40&md5=ba372f42bf0c3a1b468fbfa8760e6a84","Department of Informatics, Systems and Communication, University of Milano-Bicocca, Milano, Italy; School of Engineering and Advanced Technology, Massey University, Palmerston North, New Zealand; Faculty of Computing, Poznán University of Technology, Poznán, Poland; Department of Information Technology, Oslo and Akershus University College of Applied Sciences, Oslo, Norway","Fontana, F.A., Department of Informatics, Systems and Communication, University of Milano-Bicocca, Milano, Italy; Dietrich, J., School of Engineering and Advanced Technology, Massey University, Palmerston North, New Zealand; Walter, B., Faculty of Computing, Poznán University of Technology, Poznán, Poland; Yamashita, A., Department of Information Technology, Oslo and Akershus University College of Applied Sciences, Oslo, Norway; Zanoni, M., Department of Informatics, Systems and Communication, University of Milano-Bicocca, Milano, Italy","Anti-patterns and code smells are archetypes used for describing software design shortcomings that can negatively affect software quality, in particular maintainability. Tools, metrics and methodologies have been developed to identify these archetypes, based on the assumption that they can point at problematic code. However, recent empirical studies have shown that some of these archetypes are ubiquitous in real world programs, and many of them are found not to be as detrimental to quality as previously conjectured. We are therefore interested in revisiting common anti-patterns and code smells, and building a catalogue of cases that constitute candidates for ""false positives"". We propose a preliminary classification of such false positives with the aim of facilitating a better understanding of the effects of anti-patterns and code smells in practice. We hope that the development and further refinement of such a classification can support researchers and tool vendors in their endeavour to develop more pragmatic, context-relevant detection and analysis tools for anti-patterns and code smells. © 2016 IEEE.","Anti-patterns; Code smells; Conceptual framework; Detection accuracy; False positives","Computer software selection and evaluation; Design for testability; Odors; Reengineering; Software design; Anti-patterns; Code smell; Conceptual frameworks; Detection accuracy; False positive; Codes (symbols)",,,,,,,,,,,,,,"Institute of Electrical and Electronics Engineers Inc.",,9781509018550,,,"English","IEEE Int. Conf. on Softw. Anal., Evol., Reengineering, SANER",Conference Paper,"Final","All Open Access, Green",Scopus,2-s2.0-84991000274
"Oliveira R.","57188679629;","When more heads are better than one?: Understanding and improving collaborative identification of code smells",2016,"Proceedings - International Conference on Software Engineering",,,,"879","882",,3,"10.1145/2889160.2889272","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85026637464&doi=10.1145%2f2889160.2889272&partnerID=40&md5=deba59c03cf0369f04267b0445db417d","OPUS Research Group, Software Engineering Lab (LES), Informatics Department, Pontifical Catholic University of Rio de Janeiro, Rua Marques de Sao Vicente, 255, Gavea Rio de Janeiro - RJ, 22453-900, Brazil","Oliveira, R., OPUS Research Group, Software Engineering Lab (LES), Informatics Department, Pontifical Catholic University of Rio de Janeiro, Rua Marques de Sao Vicente, 255, Gavea Rio de Janeiro - RJ, 22453-900, Brazil","Code smells are program structures that often indicate software design problems. Their efficient identification is required in order to ensure software longevity. However, the identification of code smells often cannot be performed in isolation by a single developer. This task might require the knowledge of various program parts, which are better understood by different developers. However, there is little guidance to support software teams on efficient identification of code smells. In this research, we investigate how to improve efficiency on the collaborative identification of code smells. Our investigation is based on a set of controlled experiments conducted with more than 58 novice and professional developers. Our preliminary results suggest the use of collaborative practices significantly increases the efficiency of code smell identification. We also compiled a set of guidelines and heuristics to support an effective collaborative strategy for code smell identification. © 2016 ACM.","Code smells; Collaborative practices; Controlled experiment","Efficiency; Odors; Software design; Software engineering; Code smell; Collaborative practices; Collaborative strategies; Controlled experiment; Program structures; Software design problems; Software teams; Codes (symbols)",,,,,,,,,,,,"Oliveira, R.; OPUS Research Group, Rua Marques de Sao Vicente, 255, Brazil; email: rfelicio@inf.puc-rio.br",,"IEEE Computer Society",02705257,9781450341615; 9781450342056,PCSED,,"English","Proc Int Conf Software Eng",Conference Paper,"Final","",Scopus,2-s2.0-85026637464
"Bavota G., Russo B.","57220148228;9335579000;","A large-scale empirical study on self-admitted technical debt",2016,"Proceedings - 13th Working Conference on Mining Software Repositories, MSR 2016",,,,"315","326",,81,"10.1145/2901739.2901742","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84974604506&doi=10.1145%2f2901739.2901742&partnerID=40&md5=522504d1861300cb6fd2b195801e9ac9","Free University of Bozen-Bolzano, Bolzano, Italy","Bavota, G., Free University of Bozen-Bolzano, Bolzano, Italy; Russo, B., Free University of Bozen-Bolzano, Bolzano, Italy","Technical debt is a metaphor introduced by Cunningham to indicate ""not quite right code which we postpone making it right"". Examples of technical debt are code smells and bug hazards. Several techniques have been proposed to detect different types of technical debt. Among those, Potdar and Shihab defined heuristics to detect instances of self-admitted technical debt in code comments, and used them to perform an empirical study on five software systems to investigate the phenomenon. Still, very little is known about the diffusion and evolution of technical debt in software projects. This paper presents a differentiated replication of the work by Potdar and Shihab. We run a study across 159 software projects to investigate the diffusion and evolution of self-admitted technical debt and its relationship with software quality. The study required the mining of over 600K commits and 2 Billion comments as well as a qualitative analysis performed via open coding. Our main findings show that self-admitted technical debt (i) is diffused, with an average of 51 instances per system, (ii) is mostly represented by code (30%), defect, and requirement debt (20% each), (iii) increases over time due to the introduction of new instances that are not fixed by developers, and (iv) even when fixed, it survives long time (over 1,000 commits on average) in the system. © 2016 ACM.","Empirical software engineering; Mining software repositories; Technical debt","Computer software selection and evaluation; Software engineering; Empirical Software Engineering; Empirical studies; Mining software repositories; Qualitative analysis; Software project; Software Quality; Software systems; Technical debts; Codes (symbols)",,,,,,,,,,,,,,"Association for Computing Machinery, Inc",,9781450341868,,,"English","Proc. - Work. Conf. Min. Softw. Repos., MSR",Conference Paper,"Final","",Scopus,2-s2.0-84974604506
"Hussain S.","56266004800;","Student research abstract: Threshold analysis of design metrics to detect design flaws",2016,"Proceedings of the ACM Symposium on Applied Computing","04-08-April-2016",,,"1584","1585",,3,"10.1145/2851613.2852013","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84975824112&doi=10.1145%2f2851613.2852013&partnerID=40&md5=ba0396a92af2b3c6eb0f37a734554d8d","Department of Computer Science, City University of Hong Kong, Hong Kong","Hussain, S., Department of Computer Science, City University of Hong Kong, Hong Kong","Detection of design flaws at different granularity levels of software can help the software engineer to reduce the testing efforts and maintenance cost. In the context of metric-based analysis, current state of art for the quality assurance tools is to extract the metrics from the source code and analyzed the design complexity. But in case of legacy systems, a software engineer needs to pass through the re-engineering process. In this study, I propose a methodology to investigate the threshold effect of software design metrics in order to detect design flaws and its effect over the granularity level of software. Moreover, I will use some statistical methods and machine learning techniques to derive and validate the effect of thresholds over the NASA and open source datasets retrieve from the PROMISE repository.",,"Learning systems; Legacy systems; NASA; Open source software; Quality assurance; Quality control; Software testing; Design complexity; Different granularities; Granularity levels; Machine learning techniques; Metric based analysis; Quality assurance tools; Software design metrics; Threshold analysis; Software design",,,,,,,,,,,,"Hussain, S.; Department of Computer Science, Hong Kong; email: Shussain7-c@my.cityu.edu.hk",,"Association for Computing Machinery",,9781450337397,,,"English","Proc ACM Symp Appl Computing",Conference Paper,"Final","",Scopus,2-s2.0-84975824112
"Kaur J., Singh S.","57209970616;7407874009;","Neural network based refactoring area identification in Software System with object oriented metrics",2016,"Indian Journal of Science and Technology","9","10","85110","","",,5,"10.17485/ijst/2016/v9i10/85110","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84962788202&doi=10.17485%2fijst%2f2016%2fv9i10%2f85110&partnerID=40&md5=00d51c67827dfc36b3273ff8b1aca0f6","C. S. E. and I. T. Department B. B. S. B. E. C, Fatehgarh Sahib, Punjab, 140407, India; Centre for Computer Science and Technology, Central university of Punjab, Bathinda, India","Kaur, J., C. S. E. and I. T. Department B. B. S. B. E. C, Fatehgarh Sahib, Punjab, 140407, India; Singh, S., Centre for Computer Science and Technology, Central university of Punjab, Bathinda, India","Objectives of the Study (a) To study previously designed models for identification of refactoring area in Object Oriented Software Systems. (b) To design a general framework or model that helps to easily identify the software code smells for a good quality of coding. (c) To identify the bad smells in the code with a design of neural network based model with the help of object-oriented metrics and further to predict the performance of the proposed model using various evaluation parameters of confusion matrix. Analysis/Methods: In this study, two different versions of Rhino (1.7r1 and 1.7r2) were taken as dataset. Object-Oriented metrics were taken as input data and the probability factor (occurrence or non-occurrence of a bad smell as output. Presence of a bad smell was considered as 1 and 0 means absence of bad smell. If there was at least one bad smell present in the code in a class, it was marked as smelly class. The tool used to extract the databases for collected object-oriented metrics and bad smells of these Rhino versions is PTIDEJ. Further, the data was tested on neural networks for different epochs to predict their performance. Findings: a) Bad Smell Analysis: Twelve design smells were considered to detect the presence of bad smell in code. If there was at least one bad smell present in the code in a class, it was marked as smelly class. b) Neural Network Model Table: Weight and bias factor for various predictors were calculated for different epochs (500, 1000, and 2000). It shows the weights assigned from input layer to hidden layer and from hidden layer to output neurons layer. After the training, the weights were tested on various datasets. C) Performance Tables and Graphs: In this, the Neural network proposed model was trained using different number of epochs to examine if the number of epochs used in training has any impact on the results or not. Further, the results for the accuracy of these models were shown. Novelty/Improvement: When the data was highly trained then the results were better. When the data was trained with 500 epochs, it was suitable for only with-in company projects but when the data was more trained than the model was also appropriate for cross projects. It was seen that when the data was trained with 1000 and 2000 epochs, the results of the proposed model were improved.","Artificial Neural Networks (ANN); Bad smells; Logistic regression; Object oriented metrics; Refactoring; Software maintainability",,,,,,,,,,,,,"Singh, S.; Centre for Computer Science and Technology, India; email: satwindercse@gmail.com",,"Indian Society for Education and Environment",09746846,,,,"English","Indian J. Sci. Technol.",Article,"Final","All Open Access, Bronze",Scopus,2-s2.0-84962788202
"Lee S.-J., Lo L.H., Chen Y.-C., Shen S.-M.","7601413614;56583645300;57207349241;56921104700;","Co-changing code volume prediction through association rule mining and linear regression model",2016,"Expert Systems with Applications","45",,,"185","194",,6,"10.1016/j.eswa.2015.09.023","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84945242383&doi=10.1016%2fj.eswa.2015.09.023&partnerID=40&md5=ae438cebecb414441aedb0c4e1b5b65a","Computer and Network Center, National Cheng Kung University, Tainan, 701, Taiwan; Department of Computer Science and Information Engineering, National Cheng Kung University, Tainan, 701, Taiwan","Lee, S.-J., Computer and Network Center, National Cheng Kung University, Tainan, 701, Taiwan, Department of Computer Science and Information Engineering, National Cheng Kung University, Tainan, 701, Taiwan; Lo, L.H., Department of Computer Science and Information Engineering, National Cheng Kung University, Tainan, 701, Taiwan; Chen, Y.-C., Department of Computer Science and Information Engineering, National Cheng Kung University, Tainan, 701, Taiwan; Shen, S.-M., Department of Computer Science and Information Engineering, National Cheng Kung University, Tainan, 701, Taiwan","Code smells are symptoms in the source code that indicate possible deeper problems and may serve as drivers for code refactoring. Although effort has been made on identifying divergent changes and shotgun surgeries, little emphasis has been put on predicting the volume of co-changing code that appears in the code smells. More specifically, when a software developer intends to perform a particular modification task on a method, a predicted volume of code that will potentially be co-changed with the method could be considered as significant information for estimating the modification effort. In this paper, we propose an approach to predicting volume of co-changing code affected by a method to be modified. The approach has the following key features: co-changing methods can be identified for detecting divergent changes and shotgun surgeries based on association rules mined from change histories; and volume of co-changing code affected by a method to be modified can be predicted through a derived fitted regression line with t-test based on the co-changing methods identification results. The experimental results show that the success rate of co-changing methods identification is 82% with a suggested threshold, and the numbers of correct identifications would not be influenced by the increasing number of commits as a project continuously evolves. Additionally, the mean absolute error of co-changing code volume predictions is 133 lines of code which is 95.3% less than the one of a naive approach. © 2015 Elsevier Ltd. All rights reserved.","Co-changing code volume prediction; Co-changing methods identification","Association rules; Forecasting; Linear regression; Odors; Regression analysis; Surgery; Change history; Code re-factoring; Linear regression models; Mean absolute error; Modification effort; Regression lines; Software developer; Volume predictions; Codes (symbols)","Ministerio de Ciencia y Tecnología, MICYT: 103-2221-E-006-218","This research is sponsored in part by Ministry of Science and Technology under the Grant 103-2221-E-006-218 and in part by “III Innovative and Prospective Technologies Project” of the Institute for Information Industry, Taiwan.",,,,,,,,,,"Lee, S.-J.; Computer and Network Center, National Cheng Kung UniversityTaiwan",,"Elsevier Ltd",09574174,,ESAPE,,"English","Expert Sys Appl",Article,"Final","",Scopus,2-s2.0-84945242383
[No author name available],[No author id available],"Proceedings - International Conference of the Chilean Computer Science Society, SCCC",2016,"Proceedings - International Conference of the Chilean Computer Science Society, SCCC","2016-February",,,"","",182,,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-84963763178&partnerID=40&md5=3bb9a43a15dc39b5429baf86bf6b63ae",,"","The proceedings contain 29 papers. The topics discussed include: understanding the design of software development teams for academic scenarios; ACO and GA metaheuristics for anomaly detection; a choice functions portfolio for solving constraint satisfaction problems: a performance evaluation; worst-case optimal incremental sorting; a multi-GPU approach for the exchange Monte Carlo method; devising a conflict detection method for multi-party contracts; towards automatic document classification by exploiting only knowledge resources; JSpIRIT: a flexible tool for the analysis of code smells; machine-part cell formation problems with constraint programming; adapting the PBEC-OTSS software selection approach for BPM suites: an application case; from the dark net to the cloudy data; integration and implementation of an EA strategy based operating model with BPM technology; and SeVaTax: service taxonomy selection & validation process for SPL development.",,,,,,,,,,,,,,,,"IEEE Computer Society",15224902,9781467398176,,,"English","Proc. Int. Conf. Chilean Comput. Sci. Soc. SCCC",Conference Review,"Final","",Scopus,2-s2.0-84963763178
"Amorim L., Costa E., Antunes N., Fonseca B., Ribeiro M.","56613042500;35618052700;57217858593;36175426900;57199329234;","Experience report: Evaluating the effectiveness of decision trees for detecting code smells",2016,"2015 IEEE 26th International Symposium on Software Reliability Engineering, ISSRE 2015",,,"7381819","261","269",,47,"10.1109/ISSRE.2015.7381819","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84964876126&doi=10.1109%2fISSRE.2015.7381819&partnerID=40&md5=8d86d362bba1a8b304b3524c9d6eb1a5","Instituto de Computação, Universidade Federal de Alagoas, Maceió, AL  57072-900, Brazil; CISUC, Department of Informatics Engineering, University of Coimbra, Polo II, Coimbra, 3030-290, Portugal","Amorim, L., Instituto de Computação, Universidade Federal de Alagoas, Maceió, AL  57072-900, Brazil; Costa, E., Instituto de Computação, Universidade Federal de Alagoas, Maceió, AL  57072-900, Brazil; Antunes, N., CISUC, Department of Informatics Engineering, University of Coimbra, Polo II, Coimbra, 3030-290, Portugal; Fonseca, B., Instituto de Computação, Universidade Federal de Alagoas, Maceió, AL  57072-900, Brazil; Ribeiro, M., Instituto de Computação, Universidade Federal de Alagoas, Maceió, AL  57072-900, Brazil","Developers continuously maintain software systems to adapt to new requirements and to fix bugs. Due to the complexity of maintenance tasks and the time-to-market, developers make poor implementation choices, also known as code smells. Studies indicate that code smells hinder comprehensibility, and possibly increase change- and fault-proneness. Therefore, they must be identified to enable the application of corrections. The challenge is that the inaccurate definitions of code smells make developers disagree whether a piece of code is a smell or not, consequently, making difficult creation of a universal detection solution able to recognize smells in different software projects. Several works have been proposed to identify code smells but they still report inaccurate results and use techniques that do not present to developers a comprehensive explanation how these results have been obtained. In this experimental report we study the effectiveness of the Decision Tree algorithm to recognize code smells. For this, it was applied in a dataset containing 4 open source projects and the results were compared with the manual oracle, with existing detection approaches and with other machine learning algorithms. The results showed that the approach was able to effectively learn rules for the detection of the code smells studied. The results were even better when genetic algorithms are used to pre-select the metrics to use. © 2015 IEEE.","Code Smells; Decision Tree; Genetic Algorithm; Software Quality","Algorithms; Artificial intelligence; Codes (symbols); Computer software selection and evaluation; Data mining; Decision trees; Genetic algorithms; Learning algorithms; Learning systems; Odors; Open source software; Program debugging; Trees (mathematics); Code smell; Decision-tree algorithm; Detection approach; Experience report; Maintenance tasks; Open source projects; Software Quality; Universal detections; Software reliability",,,,,,,,,,,,,,"Institute of Electrical and Electronics Engineers Inc.",,9781509004065,,,"English","IEEE Int. Symp. Softw. Reliab. Eng., ISSRE",Conference Paper,"Final","",Scopus,2-s2.0-84964876126
[No author name available],[No author id available],"8th International Symposium on Search Based Software Engineering, SSBSE 2016",2016,"Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)","9962 LNCS",,,"1","317",,,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-84989808367&partnerID=40&md5=c57b335c8bf7736991861a9dc072844b",,"","The proceedings contain 28 papers. The special focus in this conference is on Search Based Software Engineering. The topics include: Java enterprise edition support in search-based JUnit test generation; searching higher order mutants for software improvement; a co-driven method; validation of constraints among configuration parameters using search-based combinatorial interaction testing; search-based testing of procedural programs; a search based approach for stress-testing integrated circuits; improved crossover operators for genetic programming for program repair; scaling up the fitness function for reverse engineering feature models; search based clustering for protecting software with diversified updates; amortised deep parameter optimisation of GPGPU work group size for OpenCV; API-constrained genetic improvement; deep parameter optimisation for face detection using the viola-jones algorithm in OpenCV; multi-objective regression test suite minimisation for mockito; interactive code smells detection; applying monte carlo tree search for program synthesis and dynamic bugs prioritization in open source repositories with evolutionary techniques.",,,,,,,,,,,,,,,"Sarro F.Deb K.","Springer Verlag",03029743,9783319471051,,,"English","Lect. Notes Comput. Sci.",Conference Review,"Final","",Scopus,2-s2.0-84989808367
"Aman H., Amasaki S., Sasaki T., Kawahara M.","6602345526;8931272700;56441911000;16316404800;","Lines of comments as a noteworthy metric for analyzing fault-proneness in methods",2015,"IEICE Transactions on Information and Systems","E98D","12",,"2218","2228",,17,"10.1587/transinf.2015EDP7107","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84948807989&doi=10.1587%2ftransinf.2015EDP7107&partnerID=40&md5=2cd21072c03b784f605c5fe18c86f338","Center for Information Technology, Ehime University, Matsuyama-shi, 790-8577, Japan; Faculty of Computer Science and Systems Engineering, Okayama Prefectural University, Soja-shi, 719-1197, Japan","Aman, H., Center for Information Technology, Ehime University, Matsuyama-shi, 790-8577, Japan; Amasaki, S., Faculty of Computer Science and Systems Engineering, Okayama Prefectural University, Soja-shi, 719-1197, Japan; Sasaki, T., Center for Information Technology, Ehime University, Matsuyama-shi, 790-8577, Japan; Kawahara, M., Center for Information Technology, Ehime University, Matsuyama-shi, 790-8577, Japan","This paper focuses on the power of comments to predict fault-prone programs. In general, comments along with executable statements enhance the understandability of programs. However, comments may also be used to mask the lack of readability in the program, therefore well-written comments are referred to as ""deodorant to mask code smells"" in the field of code refactoring. This paper conducts an empirical analysis to examine whether Lines of Comments (LCM) written inside a method's body is a noteworthy metric for analyzing fault-proneness in Java methods. The empirical results show the following two findings: (1) morecommented methods (the methods having more comments than the amount estimated by size and complexity of the methods) are about 1.6-2.8 times more likely to be faulty than the others, and (2) LCM can be a useful factor in fault-prone method prediction models along with the method size and the method complexity. © Copyright 2015 The Institute of Electronics, Information and Communication Engineers.","Comments; Fault-prone method prediction; Product metrics; Regression model","Regression analysis; Code re-factoring; Comments; Empirical analysis; Fault-prone; Method complexity; Product metrics; Regression model; Understandability; Forecasting","Japan Society for the Promotion of Science, JSPS: 25330083",,,,,,,,,,,,,"Maruzen Co., Ltd.",09168532,,ITISE,,"English","IEICE Trans Inf Syst",Article,"Final","All Open Access, Bronze",Scopus,2-s2.0-84948807989
"Jansen B., Hermans F.","56562537400;35573133300;","Code smells in spreadsheet formulas revisited on an industrial dataset",2015,"2015 IEEE 31st International Conference on Software Maintenance and Evolution, ICSME 2015 - Proceedings",,,"7332488","372","380",,17,"10.1109/ICSM.2015.7332488","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84961613759&doi=10.1109%2fICSM.2015.7332488&partnerID=40&md5=2dc7338296fbc165c5f4a0d38cc53d41","Delft University of Technology, Netherlands","Jansen, B., Delft University of Technology, Netherlands; Hermans, F., Delft University of Technology, Netherlands","In previous work, code smells have been adapted to be applicable on spreadsheet formulas. The smell detection algorithm used in this earlier study was validated on a small dataset of industrial spreadsheets by interviewing the users of these spreadsheets and asking them about their opinion about the found smells. In this paper a more in depth validation of the algorithm is done by analyzing a set of spreadsheets of which users indicated whether or not they are smelly. This new dataset gives us the unique possibility to get more insight in how we can distinguish 'bad' spreadsheets from 'good' spreadsheets. We do that in two ways: For both the smelly and non smelly spreadsheets we 1) have calculated the metrics that detect the smells and 2) have calculated metrics with respect to size, level of coupling, and the use of functions. The results show that indeed the metrics for the smells decrease in spreadsheets that are not smelly. With respect to size we found to our surprise that the improved spreadsheets were not smaller, but bigger. With regard to coupling and the use of functions both datasets are similar. It indicates that it is difficult to use metrics with respect to size, degree of coupling or use of functions to draw conclusions on the complexity of a spreadsheet. © 2015 IEEE.","Companies; Complexity theory; Couplings; Length measurement; Programming; Standards","Computer software maintenance; Couplings; Industry; Mathematical programming; Odors; Standards; Code smell; Complexity theory; Degree of coupling; Detection algorithm; Length measurement; Two ways; Spreadsheets",,,,,,,,,,,,,,"Institute of Electrical and Electronics Engineers Inc.",,9781467375320,,,"English","IEEE Int. Conf. Softw. Maintenance Evol., ICSME - Proc.",Conference Paper,"Final","",Scopus,2-s2.0-84961613759
"Vale G., Figueiredo E.","56023110600;57213806535;","A Method to Derive Metric Thresholds for Software Product Lines",2015,"Proceedings - 29th Brazilian Symposium on Software Engineering, SBES 2015",,,"7328015","110","119",,21,"10.1109/SBES.2015.9","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84962289963&doi=10.1109%2fSBES.2015.9&partnerID=40&md5=99b12c8bdce095dddedea3becbd0d5e0","Software Engineering Laboratory (Labsoft), Department of Computer Science, Federal University of Minas Gerais (UFMG), Belo Horizonte - MG, Brazil","Vale, G., Software Engineering Laboratory (Labsoft), Department of Computer Science, Federal University of Minas Gerais (UFMG), Belo Horizonte - MG, Brazil; Figueiredo, E., Software Engineering Laboratory (Labsoft), Department of Computer Science, Federal University of Minas Gerais (UFMG), Belo Horizonte - MG, Brazil","A software product line (SPL) is a set of software systems that share a common and variable set of components (features). Software metrics provide basic means to quantify several quality aspects of SPL components. However, the effectiveness of the SPL measurement process is directly dependent on the definition of reliable thresholds. If thresholds are not properly defined, it is difficult to actually know whether a given metric value indicates a potential problem in the component implementation. There are several methods to derive thresholds for software metrics. However, there is little understanding about their appropriateness for the context of SPLs. This paper aims to propose a method to derive thresholds in the SPL context. Our method is evaluated in terms of recall and precision using two code smells (God Class and Lazy Class) detection strategies. The evaluation of our method is performed based on a benchmark of 33 SPLs and the results were compared with a method (baseline) with the same purpose used in the context of SPLs (not proposed). The results show that our method has better recall when compared with baseline. © 2015 IEEE.","Metrics; Software Product Lines; Thresholds","Software design; Software engineering; Component implementations; Measurement process; Metrics; Potential problems; Recall and precision; Software Product Line; Software product lines; Thresholds; Computer software",,,,,,,,,,,,,,"Institute of Electrical and Electronics Engineers Inc.",,9781467392723,,,"English","Proc. - Braz. Symp. Softw. Eng., SBES",Conference Paper,"Final","",Scopus,2-s2.0-84962289963
"Fu S., Shen B.","57188565569;23089553000;","Code Bad Smell Detection through Evolutionary Data Mining",2015,"International Symposium on Empirical Software Engineering and Measurement","2015-November",,"7321194","41","49",,28,"10.1109/ESEM.2015.7321194","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84961616362&doi=10.1109%2fESEM.2015.7321194&partnerID=40&md5=7b681497387ca87c2be34bf4ebabc537","School of Software, Shanghai Jiao Tong University, Shanghai, China","Fu, S., School of Software, Shanghai Jiao Tong University, Shanghai, China; Shen, B., School of Software, Shanghai Jiao Tong University, Shanghai, China","The existence of code bad smell has a severe impact on the software quality. Numerous researches show that ignoring code bad smells can lead to failure of a software system. Thus, the detection of bad smells has drawn the attention of many researchers and practitioners. Quite a few approaches have been proposed to detect code bad smells. Most approaches are solely based on structural information extracted from source code. However, we have observed that some code bad smells have the evolutionary property, and thus propose a novel approach to detect three code bad smells by mining software evolutionary data: duplicated code, shotgun surgery, and divergent change. It exploits association rules mined from change history of software systems, upon which we define heuristic algorithms to detect the three bad smells. The experimental results on five open source projects demonstrate that the proposed approach achieves higher precision, recall and F-measure. © 2015 IEEE.","bad smell detection; data mining; software evolutionary history","Codes (symbols); Computer software; Computer software selection and evaluation; Data mining; Heuristic algorithms; Odors; Software engineering; Bad smells; Evolutionary data minings; Evolutionary history; Mining software; Open source projects; Software Quality; Software systems; Structural information; Open source software",,,,,,,,,,,,,,"IEEE Computer Society",19493770,9781467378994,,,"English","Int. Symp. Empir. Softw. Eng. Meas.",Conference Paper,"Final","",Scopus,2-s2.0-84961616362
"Fontana F.A., Ferme V., Zanoni M., Yamashita A.","6601971118;55319324200;56599129300;55576431200;","Automatic metric thresholds derivation for code smell detection",2015,"International Workshop on Emerging Trends in Software Metrics, WETSoM","2015-August",,"7181590","44","53",,55,"10.1109/WETSoM.2015.14","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84953400479&doi=10.1109%2fWETSoM.2015.14&partnerID=40&md5=57bc816d0ad478e21f471d296fa914ad","Department of Informatics, Systems and Communication, University of Milano-Bicocca, Milano, Italy; Faculty of Informatics, University of Lugano (USI), Switzerland; Mesan AS, Henrik Ibsens gate 20, Oslo, Norway","Fontana, F.A., Department of Informatics, Systems and Communication, University of Milano-Bicocca, Milano, Italy; Ferme, V., Faculty of Informatics, University of Lugano (USI), Switzerland; Zanoni, M., Department of Informatics, Systems and Communication, University of Milano-Bicocca, Milano, Italy; Yamashita, A., Mesan AS, Henrik Ibsens gate 20, Oslo, Norway","Code smells are archetypes of design shortcomings in the code that can potentially cause problems during maintenance. One known approach for detecting code smells is via detection rules: a combination of different object-oriented metrics with pre-defined threshold values. The usage of inadequate thresholds when using this approach could lead to either having too few observations (too many false negatives) or too many observations (too many false positives). Furthermore, without a clear methodology for deriving thresholds, one is left with those suggested in literature (or by the tool vendors), which may not necessarily be suitable to the context of analysis. In this paper, we propose a data-driven (i.e., benchmark-based) method to derive threshold values for code metrics, which can be used for implementing detection rules for code smells. Our method is transparent, repeatable and enables the extraction of thresholds that respect the statistical properties of the metric in question (such as scale and distribution). Thus, our approach enables the calibration of code smell detection rules by selecting relevant systems as benchmark data. To illustrate our approach, we generated a benchmark dataset based on 74 systems of the Qualitas Corpus, and extracted the thresholds for five smell detection rules. © 2015 IEEE.",,"Object oriented programming; Odors; Benchmark data; Benchmark datasets; Code metrics; Detection rules; False negatives; False positive; Object oriented metrics; Statistical properties; Codes (symbols)",,,,,,,,,,,,,,"IEEE Computer Society",23270950,9781479919345,,,"English","Int. Workshop Emerg. Trends Softw. Metrics, WETSoM",Conference Paper,"Final","",Scopus,2-s2.0-84953400479
"Ebert F., Castor F., Serebrenik A.","55987759500;54945662000;8987563200;","An exploratory study on exception handling bugs in Java programs",2015,"Journal of Systems and Software","106",,"9503","82","101",,42,"10.1016/j.jss.2015.04.066","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84930795664&doi=10.1016%2fj.jss.2015.04.066&partnerID=40&md5=0c744f837440bc050999210f0e87e0ef","Centro de Informática (CIn), Universidade Federal de Pernambuco (UFPE), Recife, 51030450, Brazil; Eindhoven University of Technology, Eindhoven, Netherlands","Ebert, F., Centro de Informática (CIn), Universidade Federal de Pernambuco (UFPE), Recife, 51030450, Brazil; Castor, F., Centro de Informática (CIn), Universidade Federal de Pernambuco (UFPE), Recife, 51030450, Brazil; Serebrenik, A., Eindhoven University of Technology, Eindhoven, Netherlands","Abstract Most mainstream programming languages provide constructs to throw and to handle exceptions. However, several studies argue that exception handling code is usually of poor quality and that it is commonly neglected by developers. Moreover, it is said to be the least understood, documented, and tested part of the implementation of a system. Nevertheless, there are very few studies that analyze the actual exception handling bugs that occur in real software systems or that attempt to understand developers' perceptions of these bugs. In this work we present an exploratory study on exception handling bugs that employs two complementary approaches: a survey of 154 developers and an analysis of 220 exception handling bugs from the repositories of Eclipse and Tomcat. Only 27% of the respondents claimed that policies and standards for the implementation of error handling are part of the culture of their organizations. Moreover, in 70% of the organizations there are no specific tests for the exception handling code. Also, 61% of the respondents stated that no to little importance is given to the documentation of exception handling in the design phase of the projects with which they are involved. In addition, about 40% of the respondents consider the quality of exception handling code to be either good or very good and only 14% of the respondents consider it to be bad or very bad. Furthermore, the repository analysis has shown (with statistical significance) that exception handling bugs are ignored by developers less often than other bugs. We have also observed that while overly general catch blocks are a well-known bad smell related to exceptions, bugs stemming from these catch blocks are rare, even though many overly general catch blocks occur in the code. Furthermore, while developers often mention empty catch blocks as causes of bugs they have fixed in the past, we found very few bug reports caused by them. On top of that, empty catch blocks are frequently used as part of bug fixes, including fixes for exception handling bugs. Based on our findings, we propose a classification of exception handling bugs and their causes. The proposed classification can be used to assist in the design and implementation of test suites, to guide code inspections, or as a basis for static analysis tools. © 2015 Elsevier Inc. All rights reserved.","Bugs; Exception handling; Repository mining","Computer software; Java programming language; Static analysis; Bugs; Code inspections; Design and implementations; Error handling; Exception handling; Exploratory studies; Repository mining; Statistical significance; Program debugging","304755/2014-1, 477139/2013-2, 487549/2012-0; APQ- 0839-1.03/14; Conselho Nacional de Desenvolvimento Científico e Tecnológico, CNPq: 573964/2008-4, APQ-0388-1.03/14, APQ-1037-1.03/08; Fundação de Amparo à Ciência e Tecnologia do Estado de Pernambuco, FACEPE: IBPG-0791-1.03/13; Instituto Nacional de Ciência e Tecnologia para Engenharia de Software, INES","We would like to thank the anonymous reviewers for their helpful comments and also all the respondents of our survey for their valuable input. Felipe is supported by FACEPE (IBPG-0791-1.03/13), and Fernando is supported by CNPq/Brazil (304755/2014-1, 487549/2012-0 and 477139/2013-2), FACEPE/Brazil (APQ- 0839-1.03/14) and INES (CNPq 573964/2008-4, FACEPE APQ-1037-1.03/08, and FACEPE APQ-0388-1.03/14). Any opinions expressed here are from the authors and do not necessarily reflect the views of the sponsors.",,,,,,,,,,"Ebert, F.; Centro de Informática (CIn), Brazil; email: fe@cin.ufpe.br",,"Elsevier Inc.",01641212,,JSSOD,,"English","J Syst Software",Article,"Final","All Open Access, Green",Scopus,2-s2.0-84930795664
"Ouni A., Kula R.G., Kessentini M., Inoue K.","50761492200;57188638536;25653537200;7601540520;","Web service antipatterns detection using genetic programming",2015,"GECCO 2015 - Proceedings of the 2015 Genetic and Evolutionary Computation Conference",,,,"1351","1358",,50,"10.1145/2739480.2754724","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84963704437&doi=10.1145%2f2739480.2754724&partnerID=40&md5=02380ac59aba164d57294e05a2ecb4aa","Graduate School of Information Science and Technology, Osaka University, Japan; Department of Computer and Information Science, University of Michigan, United States","Ouni, A., Graduate School of Information Science and Technology, Osaka University, Japan; Kula, R.G., Graduate School of Information Science and Technology, Osaka University, Japan; Kessentini, M., Department of Computer and Information Science, University of Michigan, United States; Inoue, K., Graduate School of Information Science and Technology, Osaka University, Japan","Service-Oriented Architecture (SOA) is an emerging paradigm that has radically changed the way software applications are architected, designed and implemented. SOA allows developers to structure their systems as a set of ready-made, reusable and compostable services. The leading technology used today for implementing SOA is Web Services. Indeed, like all software, Web services are prone to change constantly to add new user requirements or to adapt to environment changes. Poorly planned changes may risk introducing antipatterns into the system. Consequently, this may ultimately leads to a degradation of software quality, evident by poor quality of service (QoS). In this paper, we introduce an automated approach to detect Web service antipatterns using genetic programming. Our approach consists of using knowledge from real-world examples of Web service antipatterns to generate detection rules based on combinations of metrics and threshold values. We evaluate our approach on a benchmark of 310 Web services and a variety of five types of Web service antipatterns. The statistical analysis of the obtained results provides evidence that our approach is efficient to detect most of the existing antipatterns with a score of 85% of precision and 87% of recall. © 2015 ACM.","Antipatterns; Search-based software engineering; Web Services","Application programs; Computer software selection and evaluation; Genetic algorithms; Genetic programming; Information services; Quality of service; Service oriented architecture (SOA); Software engineering; Websites; World Wide Web; Anti-patterns; Antipatterns detections; Automated approach; Environment change; Leading technology; Search-based software engineering; Software applications; User requirements; Web services","Japan Society for the Promotion of Science, JSPS: 25220003","Acknowledgments. This work is supported by Japan Society for the Promotion of Science, Grant-in-Aid for Scientific Research (S) (No.25220003), and also by Osaka University Program for Promoting International Joint Research.",,,,,,,,,,,"Silva S.","Association for Computing Machinery, Inc",,9781450334723,,,"English","GECCO - Proc. Genet. Evol. Comput. Conf.",Conference Paper,"Final","All Open Access, Green",Scopus,2-s2.0-84963704437
"Mateos C., Rodriguez J.M., Zunino A.","24171844000;35421527300;8688799600;","A tool to improve code-first Web services discoverability through text mining techniques",2015,"Software - Practice and Experience","45","7",,"925","948",,35,"10.1002/spe.2268","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84930381813&doi=10.1002%2fspe.2268&partnerID=40&md5=6a18a2e4fc2d83b0e1a369a32ca3fd52","ISISTAN, CONICET - UNICEN, Tandil, Buenos Aires, B7001BBO, Argentina","Mateos, C., ISISTAN, CONICET - UNICEN, Tandil, Buenos Aires, B7001BBO, Argentina; Rodriguez, J.M., ISISTAN, CONICET - UNICEN, Tandil, Buenos Aires, B7001BBO, Argentina; Zunino, A., ISISTAN, CONICET - UNICEN, Tandil, Buenos Aires, B7001BBO, Argentina","SummaryService-oriented development is challenging mainly because Web service developers tend to disregard the importance of the exposed service APIs, which are specified using Web Service Description Language (WSDL) documents. Methodologically, WSDL documents can be either manually generated or inferred from service implementations using WSDL generation tools. The latter option, called code first, is the most used approach in the industry. However, it is known that there are some bad practices in service implementations or defects in WSDL generation tools that may cause WSDL documents to present WSDL anti-patterns, which in turn compromise the chances of documents of being discovered and understood. In this paper, we present a software tool that assists developers in obtaining WSDL documents with as few WSDL anti-patterns as possible. The tool combines text mining and meta-programming techniques to process service implementations and is developed as an Eclipse plug-in. An evaluation of the tool by using a data-set of real service implementations in terms of anti-pattern avoidance accuracy and discovery performance by using classical Information Retrieval metrics - Precision-at-n, Recall and Normalized Discounted Cumulative Gain - is also reported. Copyright © 2014 John Wiley & Sons, Ltd.","automatic detection; code first; service discovery; Web services; WSDL anti-patterns","Codes (symbols); Text mining; Websites; Anti-patterns; Automatic Detection; Classical information; code first; Service developers; Service discovery; Text mining techniques; Web service description language; Web services",,,,,,,,,,,,"Mateos, C.; ISISTAN, Argentina",,"John Wiley and Sons Ltd",00380644,,SPEXB,,"English","Software Pract Exper",Conference Paper,"Final","",Scopus,2-s2.0-84930381813
"Morales R.","56601136800;","Towards a framework for automatic correction of anti-patterns",2015,"2015 IEEE 22nd International Conference on Software Analysis, Evolution, and Reengineering, SANER 2015 - Proceedings",,,"7081891","603","604",,1,"10.1109/SANER.2015.7081891","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84928678295&doi=10.1109%2fSANER.2015.7081891&partnerID=40&md5=81a382df986094f0410a8411aa154d58","SWAT, Polytechnique Montréal, Canada","Morales, R., SWAT, Polytechnique Montréal, Canada","One of the biggest concerns in software maintenance is design quality; poor design hinders software maintenance and evolution. One way to improve design quality is to detect and correct anti-patterns (i.e., poor solutions to design and implementation problems), for example through refactorings. There are several approaches to detect anti-patterns, that rely on metrics and structural properties. However, finding a specific solution to remove anti-patterns is a challenging task as candidate refactorings can be conflicting and their number very large, making it costly. Hence, development teams often have to prioritize the refactorings to be applied on a system. In addition to this, refactoring is risky, since non-experienced developers can change the behaviour of a system, without a comprehensive test suite. Therefore, there is a need for tools that can automatically remove anti-patterns. We will apply meta-heuristics to propose a technique for automated refactoring that improves design quality. © 2015 IEEE.",,"Anti-patterns; Automatic corrections; Design and implementations; Design Quality; Development teams; Meta heuristics; Refactorings; Software maintenance and evolution; Software quality",,,,,,,,,,,,"Morales, R.; SWAT, Canada; email: rodrigo.morales@polymtl.ca",,"Institute of Electrical and Electronics Engineers Inc.",,9781479984695,,,"English","IEEE Int. Conf. Softw. Anal., Evol., Reengineering, SANER - Proc.",Conference Paper,"Final","",Scopus,2-s2.0-84928678295
"Sculley D., Holt G., Golovin D., Davydov E., Phillips T., Ebner D., Chaudhary V., Young M., Crespo J.-F., Dennison D.","23036925300;57189094784;23008179200;7005818386;57225740333;57198308871;57189096536;56095845500;35229161900;57189094053;","Hidden technical debt in machine learning systems",2015,"Advances in Neural Information Processing Systems","2015-January",,,"2503","2511",,443,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-84965107309&partnerID=40&md5=18bbc8dc5266339b6dc47a1e9b508dcf","Google, Inc., United States","Sculley, D., Google, Inc., United States; Holt, G., Google, Inc., United States; Golovin, D., Google, Inc., United States; Davydov, E., Google, Inc., United States; Phillips, T., Google, Inc., United States; Ebner, D., Google, Inc., United States; Chaudhary, V., Google, Inc., United States; Young, M., Google, Inc., United States; Crespo, J.-F., Google, Inc., United States; Dennison, D., Google, Inc., United States","Machine learning offers a fantastically powerful toolkit for building useful complex prediction systems quickly. This paper argues it is dangerous to think of these quick wins as coming for free. Using the software engineering framework of technical debt, we find it is common to incur massive ongoing maintenance costs in real-world ML systems. We explore several ML-specific risk factors to account for in system design. These include boundary erosion, entanglement, hidden feedback loops, undeclared consumers, data dependencies, configuration issues, changes in the external world, and a variety of system-level anti-patterns.",,"Artificial intelligence; Cost engineering; Information science; Software engineering; Anti-patterns; Data dependencies; Engineering frameworks; Feed-back loop; Maintenance cost; Prediction systems; System levels; Technical debts; Learning systems",,,,,,,,,,,,,"Cortes C.Lee D.D.Garnett R.Lawrence N.D.Sugiyama M.","Neural information processing systems foundation",10495258,,,,"English","Adv. neural inf. proces. syst.",Conference Paper,"Final","",Scopus,2-s2.0-84965107309
"Szárnyas G., Semeráth O., Ráth I., Varró D.","55798342400;55911741200;25522705600;57203069783;","The TTC 2015 train benchmark case for incremental model validation",2015,"CEUR Workshop Proceedings","1524",,,"129","141",,8,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-84961731601&partnerID=40&md5=6fa1111800308ee20fbdbdfb233de607","Budapest University of Technology and Economics, Department of Measurement and Information Systems, H-1117 Magyar tudósok krt. 2, Budapest, Hungary","Szárnyas, G., Budapest University of Technology and Economics, Department of Measurement and Information Systems, H-1117 Magyar tudósok krt. 2, Budapest, Hungary; Semeráth, O., Budapest University of Technology and Economics, Department of Measurement and Information Systems, H-1117 Magyar tudósok krt. 2, Budapest, Hungary; Ráth, I., Budapest University of Technology and Economics, Department of Measurement and Information Systems, H-1117 Magyar tudósok krt. 2, Budapest, Hungary; Varró, D., Budapest University of Technology and Economics, Department of Measurement and Information Systems, H-1117 Magyar tudósok krt. 2, Budapest, Hungary","In model-driven development of safety-critical systems (like automotive, avionics or railways), wellformedness of models is repeatedly validated in order to detect design flaws as early as possible. Validation rules are often implemented by a large amount of imperative model traversal code which makes those rule implementations complicated and hard to maintain. Additionally as models are rapidly increasing in size and complexity, efficient execution of these operations is challenging for the currently available toolchains. However, checking well-formedness constraints can be interpreted as evaluation of model queries, and the operations as model transformations, where the validation task can be specified in a concise way, and executed efficiently. This paper presents a benchmark case and an evaluation framework to systematically assess the scalability of validating and revalidating well-formedness constraints over large models. The benchmark case defines a typical well-formedness validation scenario in the railway domain including the metamodel, an instance model generator, and a set of well-formedness constraints captured by queries and repair operations (imitating the work of systems engineers by model transformations). The benchmark case focuses on the execution time of the query evaluations with a special emphasis on reevaluations, as well as simple repair transformations. © 2015 G. Szárnyas et al.",,"Railroads; Repair; Systems analysis; Evaluation framework; Incremental modeling; Model driven development; Model transformation; Query evaluation; Repair operations; Safety critical systems; Validation scenarios; Application programs",,,,,,,,,,,,,"Krikava F.Horn T.Rose L.M.","CEUR-WS",16130073,,,,"English","CEUR Workshop Proc.",Conference Paper,"Final","",Scopus,2-s2.0-84961731601
"Xiao X., Han S., Zhang C., Zhang D.","57197586466;55487844700;7405494017;55717568500;","Uncovering JavaScript performance code smells relevant to type mutations",2015,"Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)","9458",,,"335","355",,8,"10.1007/978-3-319-26529-2_18","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84952360088&doi=10.1007%2f978-3-319-26529-2_18&partnerID=40&md5=666760d799fe9f3854d6edca1d4aeeeb","The Hong Kong University of Science and Technology, Hong Kong, Hong Kong; Microsoft Research, Beijing, China","Xiao, X., The Hong Kong University of Science and Technology, Hong Kong, Hong Kong; Han, S., Microsoft Research, Beijing, China; Zhang, C., The Hong Kong University of Science and Technology, Hong Kong, Hong Kong; Zhang, D., Microsoft Research, Beijing, China","In dynamic typing languages such as JavaScript, object types can be mutated easily such as by adding a field to an object. However, compiler optimizations rely on a fixed set of types, unintentional type mutations can invalidate the speculative code generated by the type-feedback JIT and deteriorate the quality of compiler optimizations. Since type mutations are invisible, finding and understanding the performance issues relevant to type mutations can be an overwhelming task to programmers. We develop a tool JSweeter to detect performance bugs incurred by type mutations based on the type evolution graphs extracted from program execution. We apply JSweeter to the Octane benchmark suite and identify 46 performance issues, where 19 issues are successfully fixed with the refactoring hints generated by JSweeter and the average performance gain is 5.3% (up to 23 %). The result is persuasive because those issues are hidden in such well developed benchmark programs. © Springer International Publishing Switzerland 2015.",,"Computational linguistics; High level languages; Program compilers; Program debugging; Benchmark programs; Benchmark suites; Compiler optimizations; Performance bugs; Performance code; Performance Gain; Performance issues; Program execution; Benchmarking",,,,,,,,,,,,"Xiao, X.; The Hong Kong University of Science and TechnologyHong Kong; email: richardxx@cse.ust.hk","Park S.Feng X.","Springer Verlag",03029743,9783319265285,,,"English","Lect. Notes Comput. Sci.",Conference Paper,"Final","",Scopus,2-s2.0-84952360088
"Lee S.-J., Lin X., Lo L.H., Chen Y.-C., Lee J.","7601413614;56583072200;56583645300;57207349241;23397078500;","Code smells detection and visualization of software systems",2015,"Frontiers in Artificial Intelligence and Applications","274",,,"1763","1771",,2,"10.3233/978-1-61499-484-8-1763","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84926431830&doi=10.3233%2f978-1-61499-484-8-1763&partnerID=40&md5=f868e602f625028da8fe21775d0161b9","Computer and Network Center, National Cheng Kung University, Tainan, 701, Taiwan; Department of Computer Science and Information Engineering, National Taiwan University, Taipei, 10617, Taiwan","Lee, S.-J., Computer and Network Center, National Cheng Kung University, Tainan, 701, Taiwan; Lin, X., Computer and Network Center, National Cheng Kung University, Tainan, 701, Taiwan; Lo, L.H., Computer and Network Center, National Cheng Kung University, Tainan, 701, Taiwan; Chen, Y.-C., Computer and Network Center, National Cheng Kung University, Tainan, 701, Taiwan; Lee, J., Department of Computer Science and Information Engineering, National Taiwan University, Taipei, 10617, Taiwan","Bad smells are symptoms in the source code that indicate possible deeper problems and may serve as drivers for code refactoring. Although efforts have been made on measuring code complexity in object-oriented systems, such as CK metrics, little emphasis has been put on analyzing code smells through a visualization manner. In this paper, we present a system for detecting and visualizing three kinds of code smells of software systems: Long Method, Large Class, and Long Parameter List. Thresholds for identifying the code smells are calculated based on statistics analysis on the source code of 50 open source projects. Code smells are visualized as graphs with colored nodes according to their different severity degrees. © 2015 The authors and IOS Press. All rights reserved.","code analysis; Code smell; code visualization","Codes (symbols); Computer software; Intelligent control; Intelligent systems; Object oriented programming; Odors; Open source software; Visualization; Code analysis; Code re-factoring; Code smell; Code visualization; Object-oriented system; Open source projects; Software systems; Statistics analysis; Open systems",,,,,,,,,,,,,"Chu W.C.-C.Yang S.J.-H.Chao H.-C.","IOS Press",09226389,9781614994831,,,"English","Front. Artif. Intell. Appl.",Conference Paper,"Final","",Scopus,2-s2.0-84926431830
[No author name available],[No author id available],"ACM International Conference Proceeding Series",2014,"ACM International Conference Proceeding Series","13-December-2014",,,"","",211,,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-84984788477&partnerID=40&md5=f01d84b2efae24068d3f2ded12ef7fd0",,"","The proceedings contain 20 papers. The topics discussed include: instance pointcuts - selecting object sets based on their usage history; fork/join parallelism in the wild: documenting patterns and anti-patterns in java programs using the fork/join framework; efficient code management for dynamic multi-tiered compilation systems; habanero-java library: a java 8 framework for multicore programming; side effect monitoring for java using bytecode rewriting; selective regression testing for web applications created with Google web toolkit; an object storage model for the truffle language implementation framework; fast java profiling with scheduling-aware stack fragment sampling and asynchronous analysis; and comparing points-to static analysis with runtime recorded profiling data.",,,,,,,,,,,,,,,,"Association for Computing Machinery",,9781450330640,,,"English","ACM Int. Conf. Proc. Ser.",Conference Review,"Final","",Scopus,2-s2.0-84984788477
"Flewwelling C.J., Easty A.C., Vicente K.J., Cafazzo J.A.","56116235900;6603307890;56509234300;9237143400;","The use of fault reporting of medical equipment to identify latent design flaws",2014,"Journal of Biomedical Informatics","51",,,"80","85",,15,"10.1016/j.jbi.2014.04.009","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84908021274&doi=10.1016%2fj.jbi.2014.04.009&partnerID=40&md5=a971bb2a0dc944a26cd921de4959813d","Institute of Biomaterials and Biomedical Engineering, University of Toronto, Rosebrugh Building, 164 College Street, Toronto, ON  M5S 3G9, Canada; Healthcare Human Factors, University Health Network, 4th Floor R. Fraser Elliot Building, 190 Elizabeth Street, Toronto, ON  M5G 2C4, Canada; HumanEra, University Health Network, 4th Floor R. Fraser Elliot Building, 190 Elizabeth Street, Toronto, ON  M5G 2C4, Canada; Department of Mechanical and Industrial Engineering, University of Toronto, 5 King's College Road, Toronto, ON  M5S 3G8, Canada; Institute of Health Policy, Management and Evaluation, University of Toronto, Health Sciences Building, 155 College Street, Suite 425, Toronto, ON  M5T 3M6, Canada","Flewwelling, C.J., Institute of Biomaterials and Biomedical Engineering, University of Toronto, Rosebrugh Building, 164 College Street, Toronto, ON  M5S 3G9, Canada, Healthcare Human Factors, University Health Network, 4th Floor R. Fraser Elliot Building, 190 Elizabeth Street, Toronto, ON  M5G 2C4, Canada; Easty, A.C., Institute of Biomaterials and Biomedical Engineering, University of Toronto, Rosebrugh Building, 164 College Street, Toronto, ON  M5S 3G9, Canada, HumanEra, University Health Network, 4th Floor R. Fraser Elliot Building, 190 Elizabeth Street, Toronto, ON  M5G 2C4, Canada; Vicente, K.J., Department of Mechanical and Industrial Engineering, University of Toronto, 5 King's College Road, Toronto, ON  M5S 3G8, Canada; Cafazzo, J.A., Institute of Biomaterials and Biomedical Engineering, University of Toronto, Rosebrugh Building, 164 College Street, Toronto, ON  M5S 3G9, Canada, Healthcare Human Factors, University Health Network, 4th Floor R. Fraser Elliot Building, 190 Elizabeth Street, Toronto, ON  M5G 2C4, Canada, Institute of Health Policy, Management and Evaluation, University of Toronto, Health Sciences Building, 155 College Street, Suite 425, Toronto, ON  M5T 3M6, Canada","Background and purpose: Poor device design that fails to adequately account for user needs, cognition, and behavior is often responsible for use errors resulting in adverse events. This poor device design is also often latent, and could be responsible for ""No Fault Found"" (NFF) reporting, in which medical devices sent for repair by clinical users are found to be operating as intended. Unresolved NFF reports may contribute to incident under reporting, clinical user frustration, and biomedical engineering technologist inefficacy. This study uses human factors engineering methods to investigate the relationship between NFF reporting frequency and device usability. Material and methods: An analysis of medical equipment maintenance data was conducted to identify devices with a high NFF reporting frequency. Subsequently, semi-structured interviews and heuristic evaluations were performed in order to identify potential usability issues. Finally, usability testing was conducted in order to validate that latent usability related design faults result in a higher frequency of NFF reporting. Results: The analysis of medical equipment maintenance data identified six devices with a high NFF reporting frequency. Semi-structured interviews, heuristic evaluations and usability testing revealed that usability issues caused a significant portion of the NFF reports. Other factors suspected to contribute to increased NFF reporting include accessory issues, intermittent faults and environmental issues. Usability testing conducted on three of the devices revealed 23 latent usability related design faults. Conclusions: These findings demonstrate that latent usability related design faults manifest themselves as an increase in NFF reporting and that devices containing usability related design faults can be identified through an analysis of medical equipment maintenance data. © 2014 The Authors.","Clinical engineering; Human factors; Medical device design; No Fault Found; No problem found; No trouble found","Biomedical engineering; Electric fault currents; Human engineering; Maintenance; Professional aspects; Clinical engineering; Engineering technologists; Environmental issues; Medical device design; Medical equipment maintenance; No fault found; No trouble found; Semi structured interviews; Usability engineering; Article; biomedical engineering; biotechnology; defibrillator; enteral feeding pump; human factors research; medical device; medical technologist; monitor; surgical equipment; thermometer; classification; data mining; device failure; device failure analysis; devices; equipment design; factual database; hospital service; postmarketing surveillance; procedures; statistics and numerical data; Data Mining; Databases, Factual; Equipment and Supplies; Equipment Design; Equipment Failure; Equipment Failure Analysis; Maintenance; Product Surveillance, Postmarketing",,,,,,,,,,,,"Flewwelling, C.J.; Healthcare Human Factors, RFE 4th floor, 190 Elizabeth Street, Canada",,"Academic Press Inc.",15320464,,JBIOB,"24747354","English","J. Biomed. Informatics",Article,"Final","All Open Access, Hybrid Gold",Scopus,2-s2.0-84908021274
"Hall T., Zhang M., Bowes D., Sun Y.","56220907900;55553733799;25929085600;56558914400;","Some code smells have a significant but small effect on faults",2014,"ACM Transactions on Software Engineering and Methodology","23","4",,"","",,106,"10.1145/2629648","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84907027182&doi=10.1145%2f2629648&partnerID=40&md5=d32739cff113c108bb4130fa1f5a48f0","Brunel University, United Kingdom; University of Hertfordshire, United Kingdom","Hall, T., Brunel University, United Kingdom; Zhang, M., University of Hertfordshire, United Kingdom; Bowes, D., University of Hertfordshire, United Kingdom; Sun, Y., University of Hertfordshire, United Kingdom","We investigate the relationship between faults and five of Fowler et al.'s least-studied smells in code: Data Clumps, Switch Statements, Speculative Generality, Message Chains, and Middle Man. We developed a tool to detect these five smells in three open-source systems: Eclipse, ArgoUML, and Apache Commons. We collected fault data from the change and fault repositories of each system. We built Negative Binomial regression models to analyse the relationships between smells and faults and report the McFadden effect size of those relationships. Our results suggest that Switch Statements had no effect on faults in any of the three systems; Message Chains increased faults in two systems; Message Chains which occurred in larger files reduced faults; Data Clumps reduced faults in Apache and Eclipse but increased faults in ArgoUML; Middle Man reduced faults only in ArgoUML, and Speculative Generality reduced faults only in Eclipse. File size alone affects faults in some systems but not in all systems. Where smells did significantly affect faults, the size of that effect was small (always under 10 percent). Our findings suggest that some smells do indicate fault-prone code in some circumstances but that the effect that these smells have on faults is small. Our findings also show that smells have different effects on different systems. We conclude that arbitrary refactoring is unlikely to significantly reduce fault-proneness and in some cases may increase fault-proneness. © 2014 ACM.","Defects; Software code smells","Chains; Codes (symbols); Defects; Odors; Open source software; Open systems; Regression analysis; Different effects; Effect size; Fault proneness; Fault-prone codes; Negative binomial regression model; Open source system; Refactorings; Software codes; Data reduction","Engineering and Physical Sciences Research Council, EPSRC: EP/E063039/1",,,,,,,,,,,"Hall, T.; Brunel UniversityUnited Kingdom",,"Association for Computing Machinery",1049331X,,ATSME,,"English","ACM Trans. Software Eng. Methodol.",Conference Paper,"Final","All Open Access, Green",Scopus,2-s2.0-84907027182
"Kessentini W., Kessentini M., Sahraoui H., Bechikh S., Ouni A.","49861481000;25653537200;57196894039;25924742700;50761492200;","A Cooperative Parallel Search-Based Software Engineering Approach for Code-Smells Detection",2014,"IEEE Transactions on Software Engineering","40","9","2331057","841","861",,83,"10.1109/TSE.2014.2331057","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84908635627&doi=10.1109%2fTSE.2014.2331057&partnerID=40&md5=b4974a8c9588def0bcbc8c774f000718","Department of Computer Science, University of Montreal, Montreal, QC, Canada; Department of Computer Science, University of Michigan, Dearborn, MI, United States","Kessentini, W., Department of Computer Science, University of Montreal, Montreal, QC, Canada; Kessentini, M., Department of Computer Science, University of Michigan, Dearborn, MI, United States; Sahraoui, H., Department of Computer Science, University of Montreal, Montreal, QC, Canada; Bechikh, S., Department of Computer Science, University of Michigan, Dearborn, MI, United States; Ouni, A., Department of Computer Science, University of Montreal, Montreal, QC, Canada","We propose in this paper to consider code-smells detection as a distributed optimization problem. The idea is that different methods are combined in parallel during the optimization process to find a consensus regarding the detection of code-smells. To this end, we used Parallel Evolutionary algorithms (P-EA) where many evolutionary algorithms with different adaptations (fitness functions, solution representations, and change operators) are executed, in a parallel cooperative manner, to solve a common goal which is the detection of code-smells. An empirical evaluation to compare the implementation of our cooperative P-EA approach with random search, two single population-based approaches and two code-smells detection techniques that are not based on meta-heuristics search. The statistical analysis of the obtained results provides evidence to support the claim that cooperative P-EA is more efficient and effective than state of the art detection approaches based on a benchmark of nine large open source systems where more than 85 percent of precision and recall scores are obtained on a variety of eight different types of code-smells. © 2014 IEEE.","code-smells; distributed evolutionary algorithms; Search-based software engineering; software quality","Algorithms; Codes (symbols); Computer software selection and evaluation; Odors; Open source software; Open systems; Optimization; Software engineering; Code smell; Distributed evolutionary algorithms; Distributed optimization; Empirical evaluations; Parallel evolutionary algorithms; Search-based software engineering; Software Quality; Solution representation; Evolutionary algorithms",,,,,,,,,,,,,,"Institute of Electrical and Electronics Engineers Inc.",00985589,,IESED,,"English","IEEE Trans Software Eng",Article,"Final","",Scopus,2-s2.0-84908635627
"Gupta M., Sureka A., Padmanabhuni S.","35515712200;55922095600;6602344989;","Process mining multiple repositories for software defect resolution from control and organizational perspective",2014,"11th Working Conference on Mining Software Repositories, MSR 2014 - Proceedings",,,,"122","131",,29,"10.1145/2597073.2597081","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84938815036&doi=10.1145%2f2597073.2597081&partnerID=40&md5=6a8bd256069b3896f0fe8b3f47633701","IIIT Delhi, New Delhi, India; Infosys, Bengaluru, India","Gupta, M., IIIT Delhi, New Delhi, India; Sureka, A., IIIT Delhi, New Delhi, India; Padmanabhuni, S., Infosys, Bengaluru, India","Issue reporting and resolution is a software engineering process supported by tools such as Issue Tracking System (ITS), Peer Code Review (PCR) system and Version Control System (VCS). Several open source software projects such as Google Chromium and Android follow process in which a defect or feature enhancement request is reported to an issue tracker followed by source-code change or patch review and patch commit using a version control system. We present an application of process mining three software repositories (ITS, PCR and VCS) from control flow and organizational perspective for effective process management. ITS, PCR and VCS are not explicitly linked so we implement regular expression based heuristics to integrate data from three repositories for Google Chromium project. We define activities such as bug reporting, bug fixing, bug verification, patch submission, patch review, and source code commit and create an event log of the bug resolution process. The extracted event log contains audit trail data such as caseID, timestamp, activity name and performer. We discover runtime process model for bug resolution process spanning three repositories using process mining tool, Disco, and conduct process performance and efficiency analysis. We identify bottlenecks, define and detect basic and composite anti-patterns. In addition to control flow analysis, we mine event log to perform organizational analysis and discover metrics such as handover of work, subcontracting, joint cases and joint activities. Copyright 2014 ACM.","Empirical software engineering and measurements; Issue Tracking System; Peer code review system; Process mining; Social network analysis; Software maintenance","Application programs; Chromium; Codes (symbols); Computer software maintenance; Control systems; Data mining; Defects; Highway planning; Open source software; Social networking (online); Social sciences computing; Tracking (position); Empirical Software Engineering; Issue Tracking; Open source software projects; Organizational analysis; Organizational perspectives; Peer code review; Process mining; Software engineering process; Open systems",,,,,,,,,,,,,,"Association for Computing Machinery",,9781450328630,,,"English","Work. Conf. Min. Softw. Repos., MSR - Proc.",Conference Paper,"Final","",Scopus,2-s2.0-84938815036
"Chatzigeorgiou A., Manakos A.","6701702023;36810074900;","Investigating the evolution of code smells in object-oriented systems",2014,"Innovations in Systems and Software Engineering","10","1",,"3","18",,50,"10.1007/s11334-013-0205-z","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84893945079&doi=10.1007%2fs11334-013-0205-z&partnerID=40&md5=7cfa245d27efeeddc325c9871b8ea930","Department of Applied Informatics, University of Macedonia, Thessaloniki, Greece","Chatzigeorgiou, A., Department of Applied Informatics, University of Macedonia, Thessaloniki, Greece; Manakos, A., Department of Applied Informatics, University of Macedonia, Thessaloniki, Greece","Software design problems are known and perceived under many different terms, such as code smells, flaws, non-compliance to design principles, violation of heuristics, excessive metric values and anti-patterns, signifying the importance of handling them in the construction and maintenance of software. Once a design problem is identified, it can be removed by applying an appropriate refactoring, improving in most cases several aspects of quality such as maintainability, comprehensibility and reusability. This paper, taking advantage of recent advances and tools in the identification of non-trivial code smells, explores the presence and evolution of such problems by analyzing past versions of code. Several interesting questions can be investigated such as whether the number of problems increases with the passage of software generations, whether problems vanish by time or only by targeted human intervention, whether code smells occur in the course of evolution of a module or exist right from the beginning and whether refactorings targeting at smell removal are frequent. In contrast to previous studies that investigate the application of refactorings in the history of a software project, we attempt to analyze the evolution from the point of view of the problems themselves. To this end, we classify smell evolution patterns distinguishing deliberate maintenance activities from the removal of design problems as a side effect of software evolution. Results are discussed for two open-source systems and four code smells. © 2013 Springer-Verlag London.","Code smell; Evolution; Refactoring; Software history; Software repositories",,,"Acknowledgments This work has been partially funded by the Research Committee of the University of Macedonia, Greece. We would also like to thank the anonymous reviewers of QUATIC’2010 for their constructive comments on the manuscript.",,,,,,,,,,"Chatzigeorgiou, A.; Department of Applied Informatics, , Thessaloniki, Greece; email: achat@uom.gr",,,16145046,,,,"English","Innov. Syst. Softw. Eng.",Article,"Final","",Scopus,2-s2.0-84893945079
"Zhou J.X., Shen X., Liao D.M., Pang S.Y., Yin Y.J., Tang H.T.","55723344700;55264216300;7202026827;56799790000;35797601900;16551287000;","The research on the optimal solution for casting process design based on casting simulation software",2014,"71st World Foundry Congress: Advanced Sustainable Foundry, WFC 2014",,,,"","",,1,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-84928911588&partnerID=40&md5=3e6f754c0f68daae4cfef7e35d48d04b","State Key Laboratory of Materials Processing and Die and Mould Technology, Huazhong University of Science and Technology, Wuhan, China","Zhou, J.X., State Key Laboratory of Materials Processing and Die and Mould Technology, Huazhong University of Science and Technology, Wuhan, China; Shen, X., State Key Laboratory of Materials Processing and Die and Mould Technology, Huazhong University of Science and Technology, Wuhan, China; Liao, D.M., State Key Laboratory of Materials Processing and Die and Mould Technology, Huazhong University of Science and Technology, Wuhan, China; Pang, S.Y., State Key Laboratory of Materials Processing and Die and Mould Technology, Huazhong University of Science and Technology, Wuhan, China; Yin, Y.J., State Key Laboratory of Materials Processing and Die and Mould Technology, Huazhong University of Science and Technology, Wuhan, China; Tang, H.T., State Key Laboratory of Materials Processing and Die and Mould Technology, Huazhong University of Science and Technology, Wuhan, China","With the development of casting CAE (Computer Aided Engineering) technology, casting simulation software is to be an effective auxiliary tool for the casting process design. Recently, most of casting simulation software is able to simulate the mold-filling process, solidification process, macro-structure and micro-structure, stress and strain, heat treatment for castings to provide designers with intuitive casting process information. By display and analysis calculation information, designers could timely assess the effectiveness of the process designs to avoid design flaws without large numbers of empirical attempts. On the other hand, how to analyze the results derived from casting simulation software, and establish the relationship between the simulation results with the actual production, is a concerned topic of many casting process designers. In this paper, we will focus on discussing the methodology of analysis of simulation results and explain the correlation of simulation results with the actual casting defects, thus providing designers with a basis for process improvement with auxiliary optimization system. In order to make the simulation software has more powerful analysis capabilities and even partially replace designer to complete casting process intelligently, new optimal solution system with casting process simulation is proposed in this paper. By using the modern developing optimization algorithm including geometry analysis technology and Genetic Algorithm (GA), automatic feeding system could effectively evolve suggested scheme combined with traditional casing design rules. Only by specified the feeding part (ex. designate the hot spot position), optimal risers are directly generated with geometry information such as shape, size and volume. Moreover, to evaluate the optimal casting design, DOE and statistic theory is introduced. Optimal system firstly automatic produces orthogonal sequence of experiment parameter according to selected key factors and the specific rules of DOE. These experiment schemes with different parameter setting are imputed into CAE system to obtain the defect information. After analyzing the all simulation results with consolidated balance method and comprehensive score methods, the influential level of key factors is exported and gives a final optimization scheme proposal, which is thought as the best casting process design. To prove the proposed method could efficiently assist designer to get trick design with minimum material cost, short design produce cycle, and best qualities, the details of rear axle housing of practical design are shown including the gating system design, feeding system design and design analysis and evaluation. Copyright 2014 World Foundry Organization.","CAE; Casting process design; Foundry; Optimal solution","Algorithms; Casting; Codes (symbols); Computer aided engineering; Computer aided software engineering; Computer software; Defects; Design; Feeding; Foundries; Gating and feeding; Genetic algorithms; Materials handling equipment; Molds; Optimal systems; Optimization; Quality control; Setting; Systems analysis; Analysis of simulations; Automatic feeding systems; Casting process designs; Casting process simulation; Casting simulation software; Optimal solutions; Optimization algorithms; Solidification process; Process design","50605024",,,,,,,,,,,"Zhou, J.X.; State Key Laboratory of Materials Processing and Die and Mould Technology, Huazhong University of Science and TechnologyChina",,"World Foundry Organization",,9788461700875,,,"English","World Foundry Congr.: Adv. Sustain. Foundry, WFC",Conference Paper,"Final","",Scopus,2-s2.0-84928911588
[No author name available],[No author id available],"33rd International Conference on Conceptual Modeling, ER 2014",2014,"Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)","8824",,,"1","475",,,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-84920542496&partnerID=40&md5=2f28a3eb68ab3598592c25805904254f",,"","The proceedings contain 42 papers. The special focus in this conference is on big data, city informatics, policy compliance, enterprise architecture, data-intensive ecosystems, and open source software strategies. The topics include: A semiotic approach to conceptual modelling; ontological patterns, anti-patterns and pattern languages for next-generation conceptual modeling; a computer-guided approach to website schema.org design; on designing archiving policies for evolving RDF datasets on the web; schema-independence in XML keyword search; mapping heterogeneous XML document collections to relational databases; cardinality constraints for uncertain data; web services composition in the presence of uncertainty; domain ontology as conceptual model for big data management; model-driven design of graph databases; utility-friendly heterogenous generalization in privacy preserving data publishing; from conceptual models to safety assurance; a new approach for N-ary relationships in object databases; database design for NoSQL systems; fixing up non-executable operations in UML/OCL conceptual schemas; generic data manipulation in a mixed global/local conceptual model; towards an XBRL ontology extension for management accounting; providing foundation for user feedback concepts by extending a communication ontology; modelling risks in open source software component selection; detection, simulation and elimination of semantic anti-patterns in ontology-driven conceptual models; visual maps for data-intensive ecosystems; a framework for a business intelligence-enabled adaptive enterprise architecture; modeling organizational alignment; embracing pragmatics; from needs to services; modeling claim-making process in democratic deliberation and creating quantitative goal models.",,,,,,,,,,,,,,,"Purao S.Yu E.Jarke M.Dobbie G.","Springer Verlag",03029743,9783319122052,,,"English","Lect. Notes Comput. Sci.",Conference Review,"Final","",Scopus,2-s2.0-84920542496
"Palma F., Dubois J., Moha N., Guéhéneuc Y.-G.","55329588400;56417078300;18038269700;13613429100;","Detection of REST patterns and antipatterns: A heuristics-based approach",2014,"Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)","8831",,,"230","244",,25,"10.1007/978-3-662-45391-9_16","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84910605559&doi=10.1007%2f978-3-662-45391-9_16&partnerID=40&md5=e319e7849cdba4090adfe1ec6578f398","Département d’informatique, Université du Québec à Montréal, Canada; Ptidej Team, DGIGL, École Polytechnique de Montréal, Canada; École supérieure d’informatique, eXia.Cesi, France","Palma, F., Département d’informatique, Université du Québec à Montréal, Canada, Ptidej Team, DGIGL, École Polytechnique de Montréal, Canada; Dubois, J., Département d’informatique, Université du Québec à Montréal, Canada, École supérieure d’informatique, eXia.Cesi, France; Moha, N., Département d’informatique, Université du Québec à Montréal, Canada; Guéhéneuc, Y.-G., Ptidej Team, DGIGL, École Polytechnique de Montréal, Canada","REST (REpresentational State Transfer), relying on resources as its architectural unit, is currently a popular architectural choice for building Web-based applications. It is shown that design patterns—good solutions to recurring design problems—improve the design quality and facilitate maintenance and evolution of software systems. Antipatterns, on the other hand, are poor and counter-productive solutions. Therefore, the detection of REST (anti)patterns is essential for improving the maintenance and evolution of RESTful systems. Until now, however, no approach has been proposed. In this paper, we propose SODA-R (Service Oriented Detection for Antipatterns in REST), a heuristics-based approach to detect (anti)patterns in RESTful systems. We define detection heuristics for eight REST antipatterns and five patterns, and perform their detection on a set of 12 widely-used REST APIs including BestBuy, Facebook, and DropBox. The results show that SODA-R can perform the detection of REST (anti)patterns with high accuracy. We also found that Twitter and DropBox are not well-designed, i.e., contain more antipatterns. In contrast, Facebook and BestBuy are well-designed, i.e., contain more patterns and less antipatterns. © Springer-Verlag Berlin Heidelberg 2014.","Antipatterns; Design; Detection; Heuristics; Patterns; REST","Design; Distributed computer systems; Error detection; Social networking (online); Anti-patterns; Architectural Units; Heuristics; Patterns; Representational state transfer; REST; Software systems; Web-based applications; Pattern recognition",,,,,,,,,,,,"Palma, F.; Département d’informatique, Canada","Franch X.Ghose A.K.Lewis G.A.Bhiri S.","Springer Verlag",03029743,9783662453902,,,"English","Lect. Notes Comput. Sci.",Conference Paper,"Final","All Open Access, Bronze, Green",Scopus,2-s2.0-84910605559
"Bán D., Ferenc R.","55496456800;6603559878;","Recognizing antipatterns and analyzing their effects on software maintainability",2014,"Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)","8583 LNCS","PART 5",,"337","352",,8,"10.1007/978-3-319-09156-3_25","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84904904008&doi=10.1007%2f978-3-319-09156-3_25&partnerID=40&md5=5a4b9c545d4af06da5caddbafed7541f","University of Szeged, Department of Software Engineering, Árpád tér 2, H-6720 Szeged, Hungary","Bán, D., University of Szeged, Department of Software Engineering, Árpád tér 2, H-6720 Szeged, Hungary; Ferenc, R., University of Szeged, Department of Software Engineering, Árpád tér 2, H-6720 Szeged, Hungary","Similarly to design patterns and their inherent extra information about the structure and design of a system, antipatterns - or bad code smells - can also greatly influence the quality of software. Although the belief that they negatively impact maintainability is widely accepted, there are still relatively few objective results that would support this theory. In this paper we show our approach of detecting antipatterns in source code by structural analysis and use the results to reveal connections among antipatterns, number of bugs, and maintainability. We studied 228 open-source Java based systems and extracted bug-related information for 34 of them from the PROMISE database. For estimating the maintainability, we used the ColumbusQM probabilistic quality model. We found that there is a statistically significant, 0.55 Spearman correlation between the number of bugs and the number of antipatterns. Moreover, there is an even stronger, -0.62 reverse Spearman correlation between the number of antipatterns and code maintainability. We also found that even these few implemented antipatterns could nearly match the machine learning based bug-predicting power of 50 class level source code metrics. Although the presented analysis is not conclusive by far, these first results suggest that antipatterns really do decrease code quality and can highlight spots that require closer attention. © 2014 Springer International Publishing.","Antipatterns; Empirical validation; ISO/IEC 25010; OO design; Software maintainability; SQuaRE","Artificial intelligence; Codes (symbols); Maintainability; Anti-patterns; Empirical validation; Iso/iec 25010; Software maintainability; SQuaRE; Open source software",,,,,,,,,,,,,,"Springer Verlag",03029743,9783319091556,,,"English","Lect. Notes Comput. Sci.",Conference Paper,"Final","All Open Access, Green",Scopus,2-s2.0-84904904008
"Wert A., Oehler M., Heger C., Farahbod R.","55218077100;56277983900;26430646400;14015547900;","Automatic detection of performance anti-patterns in inter-component communications",2014,"QoSA 2014 - Proceedings of the 10th International ACM SIGSOFT Conference on Quality of Software Architectures (Part of CompArch 2014)",,,,"3","12",,15,"10.1145/2602576.2602579","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84904488882&doi=10.1145%2f2602576.2602579&partnerID=40&md5=84d4ab521aa462fb0bc64573fe78d366","Karlsruhe Institute of Technology, Am Fasanengarten 5, Karlsruhe, Germany; SAP AG, Vincenz-Priessnitz-Strasse 1, Karlsruhe, Germany","Wert, A., Karlsruhe Institute of Technology, Am Fasanengarten 5, Karlsruhe, Germany; Oehler, M., SAP AG, Vincenz-Priessnitz-Strasse 1, Karlsruhe, Germany; Heger, C., Karlsruhe Institute of Technology, Am Fasanengarten 5, Karlsruhe, Germany; Farahbod, R., SAP AG, Vincenz-Priessnitz-Strasse 1, Karlsruhe, Germany","Performance problems such as high response times in software applications have a significant effect on the customer's satisfaction. In enterprise applications, performance problems are frequently manifested in inefficient or unnecessary communication patterns between software components originating from poor architectural design or implementation. Due to high manual effort, thorough performance analysis is often neglected, in practice. In order to overcome this problem, automated engineering approaches are required for the detection of performance problems. In this paper, we introduce several heuristics for measurement-based detection of well-known performance anti-patterns in inter-component communications. The detection heuristics comprise load and instrumentation descriptions for performance tests as well as corresponding detection rules. We integrate these heuristics with Dynamic Spotter, a framework for automatic detection of performance problems. We evaluate our heuristics on four evaluation scenarios based on an e-commerce benchmark (TPC-W) where the heuristics detect the expected communication performance anti-patterns and pinpoint their root causes. Copyright © 2014 ACM 978-1-4503-2577-6/14/06 ...$15.00.",,"Application programs; Customer satisfaction; Automatic Detection; Communication pattern; Communication performance; Enterprise applications; Performance analysis; Performance problems; Software applications; Software component; Benchmarking",,,,,,,,,,,,,,"Association for Computing Machinery",,9781450325769,,,"English","QoSA - Proc. Int. ACM SIGSOFT Conf. Qual. Softw. Archit. (Part CompArch)",Conference Paper,"Final","",Scopus,2-s2.0-84904488882
"Yamashita A.","55576431200;","Assessing the capability of code smells to explain maintenance problems: An empirical study combining quantitative and qualitative data",2014,"Empirical Software Engineering","19","4",,"1111","1143",,42,"10.1007/s10664-013-9250-3","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84901842443&doi=10.1007%2fs10664-013-9250-3&partnerID=40&md5=21e261dba154c87d271e3c22988be8b9","Simula Research Laboratory, P.O. Box 134, Lysaker, Norway; Department of Informatics, University of Oslo, Oslo, Norway","Yamashita, A., Simula Research Laboratory, P.O. Box 134, Lysaker, Norway, Department of Informatics, University of Oslo, Oslo, Norway","Code smells are indicators of deeper design problems that may cause difficulties in the evolution of a software system. This paper investigates the capability of twelve code smells to reflect actual maintenance problems. Four medium-sized systems with equivalent functionality but dissimilar design were examined for code smells. Three change requests were implemented on the systems by six software developers, each of them working for up to four weeks. During that period, we recorded problems faced by developers and the associated Java files on a daily basis. We developed a binary logistic regression model, with ""problematic file"" as the dependent variable. Twelve code smells, file size, and churn constituted the independent variables. We found that violation of the Interface Segregation Principle (a.k.a. ISP violation) displayed the strongest connection with maintenance problems. Analysis of the nature of the problems, as reported by the developers in daily interviews and think-aloud sessions, strengthened our view about the relevance of this code smell. We observed, for example, that severe instances of problems relating to change propagation were associated with ISP violation. Based on our results, we recommend that code with ISP violation should be considered potentially problematic and be prioritized for refactoring. © 2013 Springer Science+Business Media New York.","Code smells; Maintenance problems; Refactoring; Software maintenance","Computer software maintenance; Maintenance; Odors; Regression analysis; Binary logistic regression models; Change propagation; Code smell; Dependent variables; Independent variables; Interface segregation; Maintenance Problem; Refactorings; Codes (symbols)","193236/I40; Norges Forskningsråd: 179851/I40","Acknowledgements The author thanks Gunnar Bergersen for his support in selecting the developers of this study and Hans Christian Benestad for providing technical support in the planning stage of the study. Also, thanks to Bente Anda and Dag Sjøberg for finding the resources needed to conduct this study and for insightful discussions. Thanks to Erik Arisholm for sharing his expertise during the analysis of the data. Finally, special thanks to Magne Jørgensen for his guidance and discussions that led to the paper. This work was partly funded by Simula Research Laboratory and the Research Council of Norway through the projects AGILE, grant no. 179851/I40, and TeamIT, grant no. 193236/I40.",,,,,,,,,,"Yamashita, A.; Simula Research Laboratory, P.O. Box 134, Lysaker, Norway; email: aiko@simula.no",,"Kluwer Academic Publishers",13823256,,ESENF,,"English","Empir Software Eng",Article,"Final","",Scopus,2-s2.0-84901842443
[No author name available],[No author id available],"2014 World Conference on Information Systems and Technologies, WorldCIST 2014",2014,"Advances in Intelligent Systems and Computing","276 VOLUME 2",,,"","",,,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-84898619558&partnerID=40&md5=d68a29ca6e54fda2a525a704042da9aa",,"","The proceedings contain 47 papers. The special focus in this conference is on Information Systems and Technologies. The topics include: Extending Groovy's reification and closures; the connective scheme between the enterprise architecture and organisational structure; towards a flexible and transparent database evolution; virtual desktop infrastructure (VDI) technology; exploring WebRTC technology for enhanced real-time services; integrating public transportation data; model and application architecture indicators of evaluation the enterprise architecture; software tools for project management - focus on collaborative management; an adaptable infrastructure to generate training datasets for decompilation issues; reengineering of software requirement specification; discrimination of class inheritance hierarchies - a vector approach; transformation of Coloured Petri Nets to UML 2 diagrams; a secure mobile platform integrated with electronic medical records; mobile botnet attacks; evaluation of an integrated mobile payment, ticketing and couponing solution based on NFC; augmented reality mobile tourism application; a data aggregation system for music events; an approach for graphical user interface external bad smells detection; improving high availability and reliability of health interoperability systems; developing a learning objects recommender system based on competences to education; current issues on enterprise architecture implementation methodology; user behavior detection based on statistical traffic analysis for thin client services; using individual interactions to infer group interests and to recommend content for groups in public spaces; a distributed architecture for remote validation of software licenses using USB/IP protocol; bandwidth optimization for real-time online and mobile applications; an evaluation on the usability of E-commerce website using think aloud method; towards a structured electronic patient record for supporting clinical decision-making; architecture for serious games in health rehabilitation; a simple movement classification system for smartphones with accelerometer; a comparative study of cerebral palsy adults with distinct boccia experience; visualization of services availability; information persistence architecture for informal and formal care providers; a web system based on a sports injuries model towards global athletes monitoring; an embryo quality assessment tool; predictive models for hospital bed management using data mining techniques; how to use activity theory contradiction concept to support organization control; pedagogical and organizational concerns for the deployment of interactive public displays at schools; application of virtual and augmented reality technology in education of manufacturing engineers; mobile technologies applied to teaching; mobile games for children; authoring environment for location decision games for decision-making skills development; leveraging web information for E-learning and cross-artefacts for the purpose of education.",,,,,,,,,,,,,,,,"Springer Verlag",21945357,9783319059471,,,"English","Adv. Intell. Sys. Comput.",Conference Review,"Final","",Scopus,2-s2.0-84898619558
"Fontana F.A., Zanoni M., Marino A., Mäntylä M.V.","6601971118;56599129300;55987947800;7006843663;","Code smell detection: Towards a machine learning-based approach",2013,"IEEE International Conference on Software Maintenance, ICSM",,,"6676916","396","399",,91,"10.1109/ICSM.2013.56","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84891688656&doi=10.1109%2fICSM.2013.56&partnerID=40&md5=1580015a515cb7c8d67933935648c03a","Department of Informatics, Systems and Communication, University of Milano-Bicocca, Milano, Italy; Aalto University, Helsinki, Finland","Fontana, F.A., Department of Informatics, Systems and Communication, University of Milano-Bicocca, Milano, Italy; Zanoni, M., Department of Informatics, Systems and Communication, University of Milano-Bicocca, Milano, Italy; Marino, A., Department of Informatics, Systems and Communication, University of Milano-Bicocca, Milano, Italy; Mäntylä, M.V., Aalto University, Helsinki, Finland","Several code smells detection tools have been developed providing different results, because smells can be subjectively interpreted and hence detected in different ways. Usually the detection techniques are based on the computation of different kinds of metrics, and other aspects related to the domain of the system under analysis, its size and other design features are not taken into account. In this paper we propose an approach we are studying based on machine learning techniques. We outline some common problems faced for smells detection and we describe the different steps of our approach and the algorithms we use for the classification. © 2013 IEEE.","Code smells detection; Machine learning techniques","Code smell; Design features; Detection tools; Learning-based approach; Machine learning techniques; On-machines; Computer software maintenance; Learning algorithms; Odors; Learning systems",,,,,,,,,,,,"Department of Informatics, Systems and Communication, , Milano, Italy",,,,,,,"English","IEEE Int. Conf. Softw. Maint. ICSM",Conference Paper,"Final","",Scopus,2-s2.0-84891688656
"Hegedus P.","25926433300;","Revealing the effect of coding practices on software maintainability",2013,"IEEE International Conference on Software Maintenance, ICSM",,,"6676960","578","581",,10,"10.1109/ICSM.2013.99","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84891684174&doi=10.1109%2fICSM.2013.99&partnerID=40&md5=faa7e332351f9aed7bd2f2ba5f816425","University of Szeged, Department of Software Engineering, Árpád tér 2., H-6720 Szeged, Hungary","Hegedus, P., University of Szeged, Department of Software Engineering, Árpád tér 2., H-6720 Szeged, Hungary","Due to its very obvious and direct connection with the costs of altering the behavior of a software, maintainability is probably the most attractive, observed and evaluated quality characteristic of the software products. There are many coding practices and techniques that may influence the maintainability of a system (e.g. design patterns, coding rules, anti-patterns, refactoring techniques). However, the empirical evidences of the connection between coding practices and maintainability are vague due to the following reasons: i) finding instances of coding primitives like design patterns, anti-patterns, etc. precisely with reverse engineering tools is not easy, ii) the lack of mature practical quality models for objective calculation of maintainability and handling its ambiguity, iii) few empirical studies directly evaluating the connection of coding techniques and software maintainability. The presented work focuses on solving these major problems by creating a benchmark for evaluating the performance of different reverse engineering tools and introducing a novel probabilistic approach for measuring software maintainability. By performing case studies based on new analysis methods we evince that there is a significant correlation between the design pattern density and the maintainability of a system, e.g. 0.89 Pearson correlation for JHotDraw. Moreover, preliminary studies show that applying refactoring has indeed a traceable positive impact on software maintainability as anticipated. © 2013 IEEE.","Anti-patterns; Case study; Desin patterns; ISO/IEC 9126; Refactoring; Software maintainability","Anti-patterns; Desin patterns; ISO/IEC 9126; Refactorings; Software maintainability; Benchmarking; Correlation methods; Maintainability; Quality control; Reverse engineering; Tools; Computer software maintenance",,,,,,,,,,,,"Hegedus, P.; University of Szeged, Árpád tér 2., H-6720 Szeged, Hungary; email: hpeter@inf.u-szeged.hu",,,,,,,"English","IEEE Int. Conf. Softw. Maint. ICSM",Conference Paper,"Final","",Scopus,2-s2.0-84891684174
[No author name available],[No author id available],"2013 1st International Workshop on Data Analysis Patterns in Software Engineering, DAPSE 2013 - Proceedings",2013,"2013 1st International Workshop on Data Analysis Patterns in Software Engineering, DAPSE 2013 - Proceedings",,,,"","",41,,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-84885221743&partnerID=40&md5=c88dfd198834198b93e9cb4b1a2670af",,"","The proceedings contain 13 papers. The topics discussed include: building statistical language models of code; commit graphs; concept to commit: a pattern designed to trace code changes from user requests to change implementation by analyzing mailing lists and code repositories; data analysis anti-patterns in empirical software engineering; effect size analysis; exploring software engineering data with formal concept analysis; extracting artifact lifecycle models from metadata history; measure what counts: an evaluation pattern for software data analysis; parametric classification over multiple samples; patterns for cleaning up bug data; patterns for extracting high level information from bug reports; structural and temporal patterns-based features; and the chunking pattern.",,,,,,,,,,,,,,,,,,9781467362962,,,"English","Int. Workshop Data Anal. Patterns Softw. Eng., DAPSE - Proc.",Conference Review,"Final","",Scopus,2-s2.0-84885221743
[No author name available],[No author id available],"Search Based Software Engineering - 5th International Symposium, SSBSE 2013, Proceedings",2013,"Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)","8084 LNCS",,,"","",319,,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-84884959625&partnerID=40&md5=8de55d33e910a5bf24b22d5ac88eaa02",,"","The proceedings contain 29 papers. The topics discussed include: advances in automated program repair and a call to arms; some recent work on multi-objective approaches to search-based software engineering; on the application of the multi-evolutionary and coupling-based approach with different aspect-class integration testing strategies; an experimental study on incremental search-based software engineering; competitive coevolutionary code-smells detection; a multi-objective genetic algorithm to rank state-based test cases; automated model-in-the-loop testing of continuous controllers using search; predicting regression test failures using genetic algorithm-selected dynamic performance analysis metrics; a recoverable robust approach for the next release problem; and regression testing for model transformations: a multi-objective approach.",,,,,,,,,,,,,,,,,03029743,9783642397417,,,"English","Lect. Notes Comput. Sci.",Conference Review,"Final","",Scopus,2-s2.0-84884959625
"Boussaa M., Kessentini W., Kessentini M., Bechikh S., Ben Chikha S.","14033721100;49861481000;25653537200;25924742700;55871955800;","Competitive coevolutionary code-smells detection",2013,"Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)","8084 LNCS",,,"50","65",,37,"10.1007/978-3-642-39742-4_6","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84884938013&doi=10.1007%2f978-3-642-39742-4_6&partnerID=40&md5=a815056ccea721b546ac579532279bb4","CS, Missouri University of Science and Technology, MO, United States; University of Tunis, Tunis, Tunisia","Boussaa, M., CS, Missouri University of Science and Technology, MO, United States; Kessentini, W., CS, Missouri University of Science and Technology, MO, United States; Kessentini, M., CS, Missouri University of Science and Technology, MO, United States; Bechikh, S., CS, Missouri University of Science and Technology, MO, United States, University of Tunis, Tunis, Tunisia; Ben Chikha, S., University of Tunis, Tunis, Tunisia","Software bad-smells, also called design anomalies, refer to design situations that may adversely affect the maintenance of software. Bad-smells are unlikely to cause failures directly, but may do it indirectly. In general, they make a system difficult to change, which may in turn introduce bugs. Although these bad practices are sometimes unavoidable, they should be in general fixed by the development teams and removed from their code base as early as possible. In this paper, we propose, for the first time, the use of competitive coevolutionary search to the code-smells detection problem. We believe that such approach to code-smells detection is attractive because it allows combining the generation of code-smell examples with the production of detection rules based on quality metrics. The main idea is to evolve two populations simutaneously where the first one generates a set of detection rules (combination of quality metrics) that maximizes the coverage of a base of code-smell examples and the second one maximizes the number of generated ""artificial"" code-smells that are not covered by solutions (detection rules) of the first population. The statistical analysis of the obtained results shows that our proposed approach is promising when compared to two single population-based metaheuristics on a variety of benchmarks. © 2013 Springer-Verlag.",,"Bad practices; Co-evolutionary; Design situations; Detection problems; Detection rules; Development teams; Meta heuristics; Quality metrics; Program debugging; Software engineering; Odors",,,,,,,,,,,,"CS, , MO, United States",,,03029743,9783642397417,,,"English","Lect. Notes Comput. Sci.",Conference Paper,"Final","",Scopus,2-s2.0-84884938013
"Ganesh S.G., Sharma T., Suryanarayana G.","55320970300;25224153100;57190844683;","Towards a principle-based classification of structural design smells",2013,"Journal of Object Technology","12","2",,"","",,33,"10.5381/jot.2013.12.2.a1","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84880255583&doi=10.5381%2fjot.2013.12.2.a1&partnerID=40&md5=1af879a673dbf8a9c51e11755d45b24c","Siemens Corporate Research and Technologies, #84, Keonics Electronic City, Hosur Road, Bangalore - 560 100, India","Ganesh, S.G., Siemens Corporate Research and Technologies, #84, Keonics Electronic City, Hosur Road, Bangalore - 560 100, India; Sharma, T., Siemens Corporate Research and Technologies, #84, Keonics Electronic City, Hosur Road, Bangalore - 560 100, India; Suryanarayana, G., Siemens Corporate Research and Technologies, #84, Keonics Electronic City, Hosur Road, Bangalore - 560 100, India","Fred Brooks in his book ""The Mythical Man Month"" describes how the inherent properties of software (i.e. complexity, conformity, changeability, and invisibility) make its design an ""essential"" difficulty. Good design practices are fundamental requisites to address this difficulty. One such good practice is that a software designer should be aware of and address ""design smells"" that can manifest as a result of his design decisions. However, our study of the vast literature on object-oriented design smells reveals the lack of an effective organization of smells that could better guide a designer in understanding and addressing potential issues in his design. In order to address this gap, we have adopted a novel approach to classify and catalog a number of recurring structural design smells based on how they violate key object oriented (OO) design principles. To evaluate the usefulness of our design smell catalog, we first asked Siemens CT DC AA architects to use it to identify design smells in their projects, and later elicited feedback from them about their experience. The feedback received indicates that these architects found the catalog to be very useful. In this paper, we present our catalog, classification, and naming scheme for design smells and also highlight several interesting observations and insights that result from our work. © JOT 2011.","Design principles; Design smell classification; Design smell template; Design smells; Object oriented design",,,,,,,,,,,,,"Ganesh, S.G.; Siemens Corporate Research and Technologies, #84, Keonics Electronic City, Hosur Road, Bangalore - 560 100, India; email: ganesh.samarthyam@siemens.com",,,16601769,,,,"English","J. Object Technol.",Article,"Final","All Open Access, Bronze",Scopus,2-s2.0-84880255583
"Rodriguez J.M., Crasso M., Zunino A.","35421527300;15073886400;8688799600;","An approach for Web Service discoverability anti-pattern detection for journal of web engineering",2013,"Journal of Web Engineering","12","1-2",,"131","158",,10,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-84872192616&partnerID=40&md5=eeeb2aae0b6f1ddc86edf4843d1ed3fb","ISISTAN, Universidad Nacional del Centro de la Provincia de Buenos Aires, Paraje Arroyo Seco Tandil, Buenos Aires B7001BBO, Argentina; CONICET, Argentina","Rodriguez, J.M., ISISTAN, Universidad Nacional del Centro de la Provincia de Buenos Aires, Paraje Arroyo Seco Tandil, Buenos Aires B7001BBO, Argentina, CONICET, Argentina; Crasso, M., ISISTAN, Universidad Nacional del Centro de la Provincia de Buenos Aires, Paraje Arroyo Seco Tandil, Buenos Aires B7001BBO, Argentina, CONICET, Argentina; Zunino, A., ISISTAN, Universidad Nacional del Centro de la Provincia de Buenos Aires, Paraje Arroyo Seco Tandil, Buenos Aires B7001BBO, Argentina, CONICET, Argentina","The Service Oriented Computing paradigm and its most popular implementation, namely Web Services, are at the crossing of distributed computing and loosely coupled systems. Web Services can be discovered and reused dynamically using non-proprietary mechanisms, but when Web Services are poorly described, they become difficult to be discovered, understood, and then reused. This paper presents novel algorithms and heuristics for automatically detecting common pitfalls that should be avoided when creating Web Services descriptions. To assess the accuracy of the proposed algorithms and heuristics, we compared their results with the results of manually analyzing a data-set of 400 publicly available services. In addition, we analyzed the correlation between the algorithms and heuristics results and other well-known quality metrics, which were presented by Al-Masri and Mahmoud. The average detection accuracy was 93.14%, and the false positive and false negative rates of 4.06% and 9.91%, respectively. Additionally, the Al-Masri and Mahmoud's quality metrics related to Web Services descriptions had a direct correlation with most of the automatic detecting results. The proposed algorithms and heuristics for automatically detecting common pitfalls are powerful tools for both improving existent Web Services and developing new Web Services that can be easily discovered, understood and reused. © Rinton Press.","Antipatterns detection; Web Services; Web Services Discoverability Anti-patterns; Web Services Modeling","Design for testability; Distributed computer systems; Pattern recognition; Websites; Anti-patterns; Antipatterns detections; Automatic detecting; Detection accuracy; False positive and false negatives; Loosely coupled systems; Service oriented computing paradigm; Web service discoverability anti-patterns; Web services",,,,,,,,,,,,"Rodriguez, J. M.; ISISTAN, , Buenos Aires B7001BBO, Argentina; email: juanmanuel.rodriguez@isistan.unicen.edu.ar",,"Rinton Press Inc.",15409589,,,,"English","J. Web Eng.",Article,"Final","",Scopus,2-s2.0-84872192616
[No author name available],[No author id available],"CEUR Workshop Proceedings",2013,"CEUR Workshop Proceedings","1084",,,"","",80,,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-84929404482&partnerID=40&md5=f652d343ce03495088f6ae2cf4f29338",,"","The proceedings contain 8 papers. The topics discussed include: modeling and verification of redundancy policies; modeling executable architectural design patterns for software product lines; combinations of anti-pattern heuristics in software architecture optimization for embedded systems; requirements as first-class citizens: integrating requirements closely with implementation artifacts; model-based power consumption analysis of smartphone applications; automatic synthesis of heterogeneous CPU-GPU embedded applications from a UML profile; interface verification using executable reference models: an application in the automotive infotainment; and integrating verifiable assume/guarantee contracts in UML/SysML.",,,,,,,,,,,,,,,"Graf S.Ober I.Noyrit F.Karsai G.","CEUR-WS",16130073,,,,"English","CEUR Workshop Proc.",Conference Review,"Final","",Scopus,2-s2.0-84929404482
[No author name available],[No author id available],"CEUR Workshop Proceedings",2013,"CEUR Workshop Proceedings","1077",,,"92","",,,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-84925260339&partnerID=40&md5=0f2329548972e685a726b1d625d104ab",,"","The proceedings contain 8 papers. The topics discussed include: using meta-model coverage to qualify test Oracles; a traceability-driven approach to model transformation testing; a method for testing model to text transformations; rule chains coverage for testing QVT-relations transformations; reality check for model transformation reuse: the ATL transformation zoo case study; automatic impact analysis of software architecture migration on model driven software development; correctness and completeness of generalised concurrent model synchronisation based on triple graph grammars; towards a catalog of non-functional requirements in model transformation languages; and detecting performance bad smells for Henshin Model transformations.",,,,,,,,,,,,,,,"Lucio L.Vangheluwe H.Dingel J.Baudry B.","CEUR-WS",16130073,,,,"English","CEUR Workshop Proc.",Conference Review,"Final","",Scopus,2-s2.0-84925260339
"Sjoberg D.I.K., Yamashita A., Anda B.C.D., Mockus A., Dyba T.","6603778674;55576431200;8387147200;57211066860;6701629212;","Quantifying the effect of code smells on maintenance effort",2013,"IEEE Transactions on Software Engineering","39","8","6568862","1144","1156",,221,"10.1109/TSE.2012.89","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84881061684&doi=10.1109%2fTSE.2012.89&partnerID=40&md5=4dcd4f8b43e70706c17989e9df261902","Department of Informatics, University of Oslo, PO Box 1080 Blindern, NO-0316 Oslo, Norway; Avaya Labs Research, Basking Ridge, NJ 07920, United States; Department of Informatics, University of Oslo, Norway, AB, Norway","Sjoberg, D.I.K., Department of Informatics, University of Oslo, PO Box 1080 Blindern, NO-0316 Oslo, Norway; Yamashita, A., Department of Informatics, University of Oslo, PO Box 1080 Blindern, NO-0316 Oslo, Norway; Anda, B.C.D., Department of Informatics, University of Oslo, PO Box 1080 Blindern, NO-0316 Oslo, Norway; Mockus, A., Avaya Labs Research, Basking Ridge, NJ 07920, United States; Dyba, T., Department of Informatics, University of Oslo, Norway, AB, Norway","Context: Code smells are assumed to indicate bad design that leads to less maintainable code. However, this assumption has not been investigated in controlled studies with professional software developers. Aim: This paper investigates the relationship between code smells and maintenance effort. Method: Six developers were hired to perform three maintenance tasks each on four functionally equivalent Java systems originally implemented by different companies. Each developer spent three to four weeks. In total, they modified 298 Java files in the four systems. An Eclipse IDE plug-in measured the exact amount of time a developer spent maintaining each file. Regression analysis was used to explain the effort using file properties, including the number of smells. Result: None of the 12 investigated smells was significantly associated with increased effort after we adjusted for file size and the number of changes; Refused Bequest was significantly associated with decreased effort. File size and the number of changes explained almost all of the modeled variation in effort. Conclusion: The effects of the 12 smells on maintenance effort were limited. To reduce maintenance effort, a focus on reducing code size and the work practices that limit the number of changes may be more beneficial than refactoring code smells. © 1976-2012 IEEE.","code churn; Maintainability; object-oriented design; product metrics","Codes (symbols); Java programming language; Maintainability; Maintenance; Object oriented programming; Product design; Regression analysis; code churn; Maintenance efforts; Maintenance tasks; Object oriented design; Product metrics; Professional software; Refactorings; Work practices; Odors",,,,,,,,,,,,,,"Institute of Electrical and Electronics Engineers Inc.",00985589,,IESED,,"English","IEEE Trans Software Eng",Article,"Final","",Scopus,2-s2.0-84881061684
"Puławski L.","37862004300;","Automatic forecasting of design anti-patterns in software source code",2012,"CEUR Workshop Proceedings","928",,,"312","323",,,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-84891805953&partnerID=40&md5=d8f1aa01726015a7a91411eb418760aa","Institute of Informatics, Warsaw University, Banacha 2, 02-097 Warszawa, Poland","Puławski, L., Institute of Informatics, Warsaw University, Banacha 2, 02-097 Warszawa, Poland","The paper presents a framework for automatic inferring knowledge about reasons for the appearance of anti-patterns in the program source code during its development. Experiments carried out on histories of development of few open-source java projects shown that we can effciently detect temporal patterns, which are indicators of likely appearance of future anti-pattern. The approach presented in this paper uses expert knowledge (formal description of anti-patterns) to automatically produce extra knowledge (with machine learning algorithm) about the evolution of bad structures in the program source code. The research can be used to build scalable and adaptive tools, which warns development teams about the fact that system architecture is drifting in the wrong direction, before this is reported by typical static source code analysis tools.","Machine learning; Software design anti- pattern; Software evolution; Temporal patterns","Development teams; Expert knowledge; Formal Description; Program source codes; Software Evolution; Software source codes; System architectures; Temporal pattern; Computer programming languages; Learning algorithms; Learning systems; Specifications; Tools; Design for testability",,,,,,,,,,,,"Puławski, L.; Institute of Informatics, Banacha 2, 02-097 Warszawa, Poland; email: Lukasz.Pulawski@mimuw.edu.pl",,,16130073,,,,"English","CEUR Workshop Proc.",Conference Paper,"Final","",Scopus,2-s2.0-84891805953
"Lettner F., Holzmann C.","54978897700;8706220900;","Automated and unsupervised user interaction logging as basis for usability evaluation of mobile applications",2012,"ACM International Conference Proceeding Series",,,,"118","127",,49,"10.1145/2428955.2428983","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84873424782&doi=10.1145%2f2428955.2428983&partnerID=40&md5=802d4432fbea2c09c6b87b32ecfebd48","Department for Mobile Computing, University of Applied Sciences Upper Austria, Softwarepark 11, 4232 Hagenberg, Austria","Lettner, F., Department for Mobile Computing, University of Applied Sciences Upper Austria, Softwarepark 11, 4232 Hagenberg, Austria; Holzmann, C., Department for Mobile Computing, University of Applied Sciences Upper Austria, Softwarepark 11, 4232 Hagenberg, Austria","The evaluation of mobile user interfaces can be a tedious task, especially if usability tests under real-world conditions should be performed. In particular, the evaluation of high-fidelity prototypes provides valuable measures about the quality of mobile applications, which helps designers to identify potentials of improvement for the next revision. Due to their costs or missing expert knowledge evaluation techniques such as cognitive walkthroughs or heuristic evaluation are often not used. Additionally, commercial frameworks provide insufficient details on usability as they only address commercial statistics regarding user loyalty, in-app purchases or demographics. In this paper, we present a novel approach and toolkit for automated and unsupervised evaluation of mobile applications that, in contrast to existing frameworks, is able to trace any user interaction during the entire lifecycle of an application. As a major novelty, our toolkit can be added to mobile applications without changing application source code, which makes it flexible and scalable for all types of applications. Also, our toolkit is able to identify and visualize design flaws such as navigational errors or efficiency for mobile applications. © 2012 ACM.","mobile interfaces; software toolkit; usability metrics","Expert knowledge; Heuristic evaluation; Mobile applications; Mobile interface; Mobile user interface; Software toolkits; Source codes; Usability evaluation; Usability metrics; Usability tests; User interaction; Walkthroughs; Mobile computing; User interfaces; Quality control",,,,,,,,,,,,"Lettner, F.; Department for Mobile Computing, Softwarepark 11, 4232 Hagenberg, Austria; email: florian.lettner@fh-hagenberg.at",,,,9781450313070,,,"English","ACM Int. Conf. Proc. Ser.",Conference Paper,"Final","",Scopus,2-s2.0-84873424782
"Bavota G., Qusef A., Oliveto R., De Lucia A., Binkley D.","57220148228;36675659700;15136561900;7003641564;7101905317;","An empirical analysis of the distribution of unit test smells and their impact on software maintenance",2012,"IEEE International Conference on Software Maintenance, ICSM",,,"6405253","56","65",,91,"10.1109/ICSM.2012.6405253","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84873105559&doi=10.1109%2fICSM.2012.6405253&partnerID=40&md5=7092ce15faa675fe30f0f6a0659af063","University of Salerno, Fisciano (SA), Italy; University of Molise, Pesche (IS), Italy; Loyola University Maryland, Baltimore, United States","Bavota, G., University of Salerno, Fisciano (SA), Italy; Qusef, A., University of Salerno, Fisciano (SA), Italy; Oliveto, R., University of Molise, Pesche (IS), Italy; De Lucia, A., University of Salerno, Fisciano (SA), Italy; Binkley, D., Loyola University Maryland, Baltimore, United States","Unit testing represents a key activity in software development and maintenance. Test suites with high internal quality facilitate maintenance activities, such as code comprehension and regression testing. Several guidelines have been proposed to help developers write good test suites. Unfortunately, such rules are not always followed resulting in the presence of bad test code smells (or simply test smells). Test smells have been defined as poorly designed tests and their presence may negatively affect the maintainability of test suites and production code. Despite the many studies that address code smells in general, until now there has been no empirical evidence regarding test smells (i) distribution in software systems nor (ii) their impact on the maintainability of software systems. This paper fills this gap by presenting two empirical studies. The first study is an exploratory analysis of 18 software systems (two industrial and 16 open source) aimed at analyzing the distribution of test smells in source code. The second study, a controlled experiment involving twenty master students, is aimed at analyzing whether the presence of test smells affects the comprehension of source code during software maintenance. The results show that (i) test smells are widely spread throughout the software systems studied and (ii) most of the test smells have a strong negative impact on the comprehensibility of test suites and production code. © 2012 IEEE.","Controlled experiments; Mining software repositories; Test smells; Unit testing","Address code; Code comprehension; Controlled experiment; Empirical analysis; Empirical evidence; Empirical studies; Exploratory analysis; Internal quality; Maintenance activity; Mining software repositories; Open sources; Regression testing; Software systems; Source codes; Test code; Test smells; Unit testing; Unit tests; Computer software maintenance; Experiments; Maintainability; Odors; Open systems; Software testing",,,,,,,,,,,,"Bavota, G.; University of Salerno, Fisciano (SA), Italy; email: gbavota@unisa.it",,,,9781467323123,,,"English","IEEE Int. Conf. Softw. Maint. ICSM",Conference Paper,"Final","",Scopus,2-s2.0-84873105559
"Maiga A., Ali N., Bhattacharya N., Sabané A., Guéhéneuc Y.-G., Aimeur E.","35092772400;49860962200;39861119400;36703259500;13613429100;6603130580;","SMURF: A SVM-based incremental anti-pattern detection approach",2012,"Proceedings - Working Conference on Reverse Engineering, WCRE",,,"6385142","466","475",,83,"10.1109/WCRE.2012.56","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84872321538&doi=10.1109%2fWCRE.2012.56&partnerID=40&md5=de537922c0d694634048309120a6da7a","Ptidej Team, Canada; Soccer Lab., DGIGL, École Polytechnique de Montréal, Canada; Heron Lab., DIRO, Université de Montréal, Canada","Maiga, A., Ptidej Team, Canada, Heron Lab., DIRO, Université de Montréal, Canada; Ali, N., Ptidej Team, Canada, Soccer Lab., DGIGL, École Polytechnique de Montréal, Canada; Bhattacharya, N., Ptidej Team, Canada, Soccer Lab., DGIGL, École Polytechnique de Montréal, Canada; Sabané, A., Ptidej Team, Canada, Soccer Lab., DGIGL, École Polytechnique de Montréal, Canada; Guéhéneuc, Y.-G., Ptidej Team, Canada; Aimeur, E., Heron Lab., DIRO, Université de Montréal, Canada","In current, typical software development projects, hundreds of developers work asynchronously in space and time and may introduce anti-patterns in their software systems because of time pressure, lack of understanding, communication, and - or skills. Anti-patterns impede development and maintenance activities by making the source code more difficult to understand. Detecting anti-patterns incrementally and on subsets of a system could reduce costs, effort, and resources by allowing practitioners to identify and take into account occurrences of anti-patterns as they find them during their development and maintenance activities. Researchers have proposed approaches to detect occurrences of anti-patterns but these approaches have currently four limitations: (1) they require extensive knowledge of anti-patterns, (2) they have limited precision and recall, (3) they are not incremental, and (4) they cannot be applied on subsets of systems. To overcome these limitations, we introduce SMURF, a novel approach to detect anti-patterns, based on a machine learning technique - support vector machines - and taking into account practitioners' feedback. Indeed, through an empirical study involving three systems and four anti-patterns, we showed that the accuracy of SMURF is greater than that of DETEX and BDTEX when detecting anti-patterns occurrences. We also showed that SMURF can be applied in both intra-system and inter-system configurations. Finally, we reported that SMURF accuracy improves when using practitioners' feedback. © 2012 IEEE.","Anti-pattern; empirical software engineering; program comprehension; program maintenance","Anti-pattern; Anti-patterns; Detection approach; Empirical Software Engineering; Empirical studies; Machine learning techniques; Maintenance activity; Precision and recall; Program comprehension; Program maintenances; Software development projects; Software systems; Source codes; Space and time; Three systems; Time pressures; Maintenance; Reverse engineering; Software engineering; Support vector machines; Design for testability",,,,,,,,,,,,"Maiga, A.; Ptidej TeamCanada; email: maigaabd@iro.umontreal.ca",,,10951350,9780769548913,,,"English","Proc. Working Conf. Rev. Eng. WCRE",Conference Paper,"Final","All Open Access, Green",Scopus,2-s2.0-84872321538
"Maiga A., Ali N., Bhattacharya N., Sabané A., Guéhéneuc Y.-G., Antoniol G., Aïmeur E.","35092772400;49860962200;39861119400;36703259500;13613429100;35619034000;6603130580;","Support vector machines for anti-pattern detection",2012,"2012 27th IEEE/ACM International Conference on Automated Software Engineering, ASE 2012 - Proceedings",,,,"278","281",,68,"10.1145/2351676.2351723","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84866893561&doi=10.1145%2f2351676.2351723&partnerID=40&md5=cf9e10ab5f546e5a9639dd6ccca19dd1","Université de Montréal, Montréal, QC, Canada; ÉCole Polytechnique de Montréal, Montréalm, QC, Canada","Maiga, A., Université de Montréal, Montréal, QC, Canada; Ali, N., ÉCole Polytechnique de Montréal, Montréalm, QC, Canada; Bhattacharya, N., ÉCole Polytechnique de Montréal, Montréalm, QC, Canada; Sabané, A., ÉCole Polytechnique de Montréal, Montréalm, QC, Canada; Guéhéneuc, Y.-G., ÉCole Polytechnique de Montréal, Montréalm, QC, Canada; Antoniol, G., ÉCole Polytechnique de Montréal, Montréalm, QC, Canada; Aïmeur, E., Université de Montréal, Montréal, QC, Canada","Developers may introduce anti-patterns in their software systems because of time pressure, lack of understanding, communication, and-or skills. Anti-patterns impede development and maintenance activities by making the source code more difficult to understand. Detecting anti-patterns in a is important to ease the maintenance of software. Detecting anti-patterns could reduce costs, effort, and resources. Researchers have proposed approaches to detect occurrences of anti-patterns but these approaches have currently some limitations: they require extensive knowledge of anti-patterns, they have limited precision and recall, and they cannot be applied on subsets of systems. To overcome these limitations, we introduce SVMDetect, a novel approach to detect anti-patterns, based on a machine learning technique- support vector machines. Indeed, through an empirical study involving three subject systems and four anti-patterns, we showed that the accuracy of SVMDetect is greater than of DETEX when detecting anti-patterns occurrences on a set of classes. Concerning, the whole system, SVMDetect is able to find more anti-patterns occurrences than DETEX. Copyright 2012 ACM.","Anti-pattern; Empirical software engineering; Program comprehension; Program maintenance","Anti-pattern; Anti-patterns; Empirical Software Engineering; Empirical studies; Machine learning techniques; Maintenance activity; Precision and recall; Program comprehension; Program maintenances; Software systems; Source codes; Time pressures; Maintenance; Software engineering; Support vector machines; Computer software; Design for testability",,,,,,,,,,,,"Maiga, A.; Université de Montréal, Montréal, QC, Canada; email: abdou.maiga@polymtl.ca",,,,9781450312042,,,"English","IEEE/ACM Int. Conf. Autom. Softw. Eng., ASE - Proc.",Conference Paper,"Final","",Scopus,2-s2.0-84866893561
"Mauczka A., Huber M., Schanes C., Schramm W., Bernhart M., Grechenig T.","35759446300;16068535900;35226678300;57196918251;16229443600;6507720565;","Tracing your maintenance work - A cross-project validation of an automated classification dictionary for commit messages",2012,"Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)","7212 LNCS",,,"301","315",,15,"10.1007/978-3-642-28872-2_21","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84859122867&doi=10.1007%2f978-3-642-28872-2_21&partnerID=40&md5=5aa4f43ea6058a31c774d9699a015398","Research Group for Industrial Software, Vienna University of Technology, Vienna 1040, Austria","Mauczka, A., Research Group for Industrial Software, Vienna University of Technology, Vienna 1040, Austria; Huber, M., Research Group for Industrial Software, Vienna University of Technology, Vienna 1040, Austria; Schanes, C., Research Group for Industrial Software, Vienna University of Technology, Vienna 1040, Austria; Schramm, W., Research Group for Industrial Software, Vienna University of Technology, Vienna 1040, Austria; Bernhart, M., Research Group for Industrial Software, Vienna University of Technology, Vienna 1040, Austria; Grechenig, T., Research Group for Industrial Software, Vienna University of Technology, Vienna 1040, Austria","A commit message is a description of a change in a Version Control System (VCS). Besides the actual description of the change, it can also serve as an indicator for the purpose of the change, e.g. a change to refactor code might be accompanied by a commit message in the form of ""Refactored class XY to improve readability"". We would label the change in our example a perfective change, according to maintenance literature. This simplified example shows how it is possible to classify a change by its commit message. However, commit messages are unstructured, textual data and efforts to automatically label changes into categories like perfective have only been applied to a small set of projects within the same company or the same community. In this work, we present a cross-project evaluated and valid mapping of changes to the code base and their purpose that is usable without any customization on any open-source project. We provide further the Eclipse Plug-In Subcat which allows for a comfortable analysis of projects from within Eclipse. By using Subcat, we are able to automatically assess if a commit to the code was e.g. a bug fix or a refactoring. This information is very useful for e.g. developer profiling or locating bad smells in modules. © 2012 Springer-Verlag Berlin Heidelberg.",,"Automated classification; Bug fixes; Maintenance work; Open source projects; Plug-ins; Refactorings; Textual data; Version control system; Automated classification; Bad smells; Bug fixes; Maintenance work; Open source projects; Refactorings; Textual data; Version control system; Computer software maintenance; Codes (symbols); Open source software; Software engineering; Software engineering; Open systems",,,,,,,,,,,,"Mauczka, A.; Research Group for Industrial Software, , Vienna 1040, Austria; email: andreas.mauczka@inso.tuwien.ac.at",,,03029743,9783642288715,,,"English","Lect. Notes Comput. Sci.",Conference Paper,"Final","All Open Access, Bronze",Scopus,2-s2.0-84859122867
"Puławski L.","37862004300;","An automatic approach for detecting early indicators of design anti-patterns",2012,"Frontiers in Artificial Intelligence and Applications","240",,,"161","170",,1,"10.3233/978-1-61499-094-9-161","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84879070534&doi=10.3233%2f978-1-61499-094-9-161&partnerID=40&md5=f7e08d119695758d381a47a18f5d4d98","Institute of Informatics Warsaw University, Banacha 2, 02-097 Warszawa, Poland","Puławski, L., Institute of Informatics Warsaw University, Banacha 2, 02-097 Warszawa, Poland","The paper presents a framework for automatic inferring knowledge about reasons for the appearance of anti-patterns in the program source code during its development. Experiments carried out on histories of development of few open-source java projects shown that we can efficiently detect temporal patterns, which are indicators of likely appearance of future anti-pattern. The approach presented in this paper uses expert knowledge (formal description of anti-patterns) to automatically produce extra knowledge (with machine learning algorithm) about the evolution of bad structures in the program source code. The research can be used to build scalable and adaptive tools, which warns development teams about the fact that system architecture is drifting in the wrong direction, before this is reported by typical static source code analysis tools. © 2012 The authors and IOS Press. All rights reserved.","machine learning; software design antipattern; Software evolution; temporal patterns","Artificial intelligence; Codes (symbols); Computer programming languages; Design for testability; Knowledge based systems; Learning algorithms; Learning systems; Open source software; Software engineering; Anti-patterns; Automatic approaches; Development teams; Formal Description; Program source codes; Software Evolution; System architectures; Temporal pattern; Software design",,,,,,,,,,,,"Puławski, L.; Institute of Informatics Warsaw University, Banacha 2, 02-097 Warszawa, Poland",,"IOS Press",09226389,9781614990932,,,"English","Front. Artif. Intell. Appl.",Conference Paper,"Final","",Scopus,2-s2.0-84879070534
"Griffith I., Wahl S., Izurieta C.","54585186600;54586121900;16238582400;","TrueRefactor: An automated refactoring tool to improve legacy system and application comprehensibility",2011,"Proceedings of the ISCA 24th International Conference on Computer Applications in Industry and Engineering, CAINE 2011",,,,"316","321",,15,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-84871960818&partnerID=40&md5=28cb4f9a6688da044a38f60eff7a86a1","Computer Science Department, Montana State University, Bozeman, MT, United States","Griffith, I., Computer Science Department, Montana State University, Bozeman, MT, United States; Wahl, S., Computer Science Department, Montana State University, Bozeman, MT, United States; Izurieta, C., Computer Science Department, Montana State University, Bozeman, MT, United States","Manual refactoring is a complicated process requiring intimate knowledge of the software design and underlying intended behavior of a system. This knowledge is not always available. Fully automated refactoring, using a meta-heuristic based search that is dependent on software quality metrics and code smells as a guide, eliminates the need for the developer to be intimately connected to the software under modification. Computer applications in industry and engineering benefit significantly from new approaches to self-correcting refactoring software. TrueRefactor is an automated refactoring tool that significantly improves the comprehensibility of legacy systems. The goal of TrueRefactor is to modify legacy object-oriented systems in order to increase the understandability, maintainability and reusability aspects of legacy software, and to simultaneously generate new UML documentation in order to help developers understand the changes being made. This paper presents the research behind the design, as well as a technical overview of the implementation of TrueRefactor. We summarize the research goals that TrueRefactor addresses, and identify opportunities where it can be actively utilized.",,"Code smell; Legacy software; Metaheuristic; Object-oriented system; Refactoring tools; Refactorings; Research goals; Software quality metrics; Understandability; Computer applications; Computer software selection and evaluation; Industry; Reusability; Legacy systems",,,,,,,,,,,,"Griffith, I.; Computer Science Department, , Bozeman, MT, United States; email: isaac.griffith@msu.montana.edu",,,,9781880843833,,,"English","Proc. ISCA Int. Conf. Comput. Appl. Ind. Eng., CAINE",Conference Paper,"Final","",Scopus,2-s2.0-84871960818
"Pankratius V., Knittel F., Masing L., Walser M.","8705593800;49661507700;49661923700;49662669200;","OpenMPspy: Leveraging quality assurance for parallel software",2011,"Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)","6853 LNCS","PART 2",,"124","135",,,"10.1007/978-3-642-23397-5_13","https://www.scopus.com/inward/record.uri?eid=2-s2.0-80052323769&doi=10.1007%2f978-3-642-23397-5_13&partnerID=40&md5=6d7da3a4158f4baf0629a2f03453be96","Karlsruhe Institute of Technology, IPD, 76128 Karlsruhe, Germany","Pankratius, V., Karlsruhe Institute of Technology, IPD, 76128 Karlsruhe, Germany; Knittel, F., Karlsruhe Institute of Technology, IPD, 76128 Karlsruhe, Germany; Masing, L., Karlsruhe Institute of Technology, IPD, 76128 Karlsruhe, Germany; Walser, M., Karlsruhe Institute of Technology, IPD, 76128 Karlsruhe, Germany","OpenMP is widely used in practice to create parallel software, however, software quality assurance tool support is still immature. OpenMPspy introduces a new approach, with a short-term and a long-term perspective, to aid software engineers write better parallel programs in OpenMP. On the one hand, OpenMPspy acts like an online-debugger that statically detects problems with incorrect construct usage and which reports problems while programmers are typing code in Eclipse. We detect simple slips as well as more complex anti-patterns that can lead to correctness problems and performance problems. In addition, OpenMPspy can aggregate statistics about OpenMP language usage and bug patterns from many projects. Insights generated from such data help OpenMP language designers improve the usability of constructs and reduce error potential, thus enhancing parallel software quality in the long run. Using OpenMPspy, this paper presents one of the first detailed empirical studies of over 40 programs with more than 4 million lines of code, which shows how OpenMP constructs are actually used in practice. Our results reveal that constructs believed to be frequently used are actually rarely used. Our insights give OpenMP language and compiler designers a clearer picture on where to focus the efforts for future improvements. © 2011 Springer-Verlag.",,"Anti-patterns; Empirical studies; Lines of code; Long-term perspective; Parallel program; Parallel software; Performance problems; Software engineers; Software quality assurance; Application programming interfaces (API); Parallel architectures; Quality assurance; Quality control; Computer software selection and evaluation",,,,,,,,,,,,"Pankratius, V.; Karlsruhe Institute of Technology, , 76128 Karlsruhe, Germany; email: pankratius@kit.edu",,,03029743,9783642233968,,,"English","Lect. Notes Comput. Sci.",Conference Paper,"Final","",Scopus,2-s2.0-80052323769
"Maneerat N., Muenchaisri P.","43261228600;6505797100;","Bad-smell prediction from software design model using machine learning techniques",2011,"Proceedings of the 2011 8th International Joint Conference on Computer Science and Software Engineering, JCSSE 2011",,,"5930143","331","336",,43,"10.1109/JCSSE.2011.5930143","https://www.scopus.com/inward/record.uri?eid=2-s2.0-79960385525&doi=10.1109%2fJCSSE.2011.5930143&partnerID=40&md5=fb10825ce71e7d0254408e2659afcff9","Department of Computer Engineering, Faculty of Engineering, Chulalongkorn University, Bangkok, Thailand","Maneerat, N., Department of Computer Engineering, Faculty of Engineering, Chulalongkorn University, Bangkok, Thailand; Muenchaisri, P., Department of Computer Engineering, Faculty of Engineering, Chulalongkorn University, Bangkok, Thailand","Bad-smell prediction significantly impacts on software quality. It is beneficial if bad-smell prediction can be performed as early as possible in the development life cycle. We present methodology for predicting bad-smells from software design model. We collect 7 data sets from the previous literatures which offer 27 design model metrics and 7 bad-smells. They are learnt and tested to predict bad-smells using seven machine learning algorithms. We use cross-validation for assessing the performance and for preventing over-fitting. Statistical significance tests are used to evaluate and compare the prediction performance. We conclude that our methodology have proximity to actual values. © 2011 IEEE.","Bad-smell; Design Diagram Metrics; Machine Learners; Prediction models; Random Forest; Software Design Model","Bad-smell; Machine learners; Prediction models; Random forests; Software Design Model; Computer science; Computer software selection and evaluation; Decision trees; Forecasting; Learning algorithms; Learning systems; Mathematical models; Odors; Software design",,,,,,,,,,,,"Maneerat, N.; Department of Computer Engineering, , Bangkok, Thailand; email: n4nn@msn.com",,,,9781457706875,,,"English","Proc. Int. Jt. Conf. Comput. Sci. Softw. Eng., JCSSE",Conference Paper,"Final","",Scopus,2-s2.0-79960385525
"Khomh F., Vaucher S., Guéhéneuc Y.-G., Sahraoui H.","24724747600;25926701500;13613429100;57196894039;","BDTEX: A GQM-based Bayesian approach for the detection of antipatterns",2011,"Journal of Systems and Software","84","4",,"559","572",,111,"10.1016/j.jss.2010.11.921","https://www.scopus.com/inward/record.uri?eid=2-s2.0-79751530447&doi=10.1016%2fj.jss.2010.11.921&partnerID=40&md5=6802b761b9ef4f6dd352c655e4733f29","Ptidej Team, DGIGL, École Polytechnique de Montréal, Canada; GEODES Lab., DIRO, Université de Montréal, Canada","Khomh, F., Ptidej Team, DGIGL, École Polytechnique de Montréal, Canada, GEODES Lab., DIRO, Université de Montréal, Canada; Vaucher, S., GEODES Lab., DIRO, Université de Montréal, Canada; Guéhéneuc, Y.-G., Ptidej Team, DGIGL, École Polytechnique de Montréal, Canada; Sahraoui, H., GEODES Lab., DIRO, Université de Montréal, Canada","The presence of antipatterns can have a negative impact on the quality of a program. Consequently, their efficient detection has drawn the attention of both researchers and practitioners. However, most aspects of antipatterns are loosely specified because quality assessment is ultimately a human-centric process that requires contextual data. Consequently, there is always a degree of uncertainty on whether a class in a program is an antipattern or not. None of the existing automatic detection approaches handle the inherent uncertainty of the detection process. First, we present BDTEX (Bayesian Detection Expert), a Goal Question Metric (GQM) based approach to build Bayesian Belief Networks (BBNs) from the definitions of antipatterns. We discuss the advantages of BBNs over rule-based models and illustrate BDTEX on the Blob antipattern. Second, we validate BDTEX with three antipatterns: Blob, Functional Decomposition, and Spaghetti code, and two open-source programs: GanttProject v1.10.2 and Xerces v2.7.0. We also compare the results of BDTEX with those of another approach, DECOR, in terms of precision, recall, and utility. Finally, we also show the applicability of our approach in an industrial context using Eclipse JDT and JHotDraw and introduce a novel classification of antipatterns depending on the effort needed to map their definitions to automatic detection approaches. © 2010 Elsevier Inc. All rights reserved.","Antipatterns; Code smells; Detection","Anti-patterns; Automatic Detection; Bayesian approaches; Bayesian Belief Networks; Bayesian detection; Code smells; Degree of uncertainty; Detection; Detection process; Efficient detection; Functional decomposition; Goal-question-metric; Human-centric; Industrial context; JHotDraw; Negative impacts; Open-source program; Quality assessment; Rule-based models; Spaghetti code; Odors; Bayesian networks","Natural Sciences and Engineering Research Council of Canada, NSERC: 293213","This work has been partly funded by NSERC , in particular the Discovery Grant #293213 and the Canadian Research Chair Tier II in Software Patterns and Patterns of Software.","Yann-Gaël Guéhéneuc is associate professor at the Department of computing and software engineering of Ecole Polytechnique of Montreal where he leads the Ptidej team on evaluating and enhancing the quality of object-oriented programs by promoting the use of patterns, at the language-, design-, or architectural-levels. In 2009, he was awarded the NSERC Research Chair Tier II on Software Patterns and Patterns of Software. He holds a Ph.D. in software engineering from University of Nantes, France (under Professor Pierre Cointe's supervision) since 2003 and an Engineering Diploma from École des Mines of Nantes since 1998. His Ph.D. thesis was funded by Object Technology International, Inc. (now IBM OTI Labs.), where he worked in 1999 and 2000. His research interests are program understanding and program quality during development and maintenance, in particular through the use and the identification of recurring patterns. He was the first to use explanation-based constraint programming in the context of software engineering to identify occurrences of patterns. He is interested also in empirical software engineering; he uses eye-trackers to understand and to develop theories about program comprehension. He has published many papers in international conferences and journals. He is IEEE Senior Member since 2010.",,,,,,,,,"Khomh, F.; Department of Electrical and Computer Engineering, Canada; email: foutse.khomh@queensu.ca",,,01641212,,JSSOD,,"English","J Syst Software",Conference Paper,"Final","",Scopus,2-s2.0-79751530447
"Mäntylä M.V.","7006843663;","Empirical software evolvability - Code smells and human evaluations",2010,"IEEE International Conference on Software Maintenance, ICSM",,,"5609545","","",,5,"10.1109/ICSM.2010.5609545","https://www.scopus.com/inward/record.uri?eid=2-s2.0-78650103847&doi=10.1109%2fICSM.2010.5609545&partnerID=40&md5=575a4bd39bcea63227118f4c28600d76","Department of Computer Science, School of Science and Technology, Aalto University, P.O. Box 19210, FI-00760 Aalto, Finland","Mäntylä, M.V., Department of Computer Science, School of Science and Technology, Aalto University, P.O. Box 19210, FI-00760 Aalto, Finland","Low software evolvability may increase costs of software development for over 30%. In practice, human evaluations and discoveries of software evolvability dictate the actions taken to improve the software evolvability, but the human side has often been ignored in prior research. This dissertation synopsis proposes a new group of code smells called the solution approach, which is based on a study of 563 evolvability issues found in industrial and student code reviews. Solution approach issues require re-thinking of the existing implementation rather than just reorganizing the code through refactoring. This work also contributes to the body of knowledge about software quality assurance practices by confirming that 75% of defects found in code reviews affect software evolvability rather than functionality. We also found evidence indicating that contextspecific demographics, i.e., role in organization and code ownership, affect evolvability evaluations, but general demographics, i.e., work experience and education, do not © 2010 IEEE.","Code review; Code smells; Doctoral dissertation synopsis; Empirical study; Human evaluation; Software maintainability","Code review; Code smell; Doctoral dissertations; Empirical studies; Human evaluation; Software maintainability; Codes (symbols); Computer software maintenance; Maintainability; Odors; Population statistics; Quality assurance; Software design; Teaching; Computer software selection and evaluation",,,,,,,,,,,,"Mäntylä, M. V.; Department of Computer Science, P.O. Box 19210, FI-00760 Aalto, Finland; email: mika.mantyla@tkk.fi",,,,9781424486298,,,"English","IEEE Int. Conf. Softw. Maint. ICSM",Conference Paper,"Final","",Scopus,2-s2.0-78650103847
"Bryton S., Brito E Abreu F., Monteiro M.","24484397100;6602691646;12645974400;","Reducing subjectivity in code smells detection: Experimenting with the Long Method",2010,"Proceedings - 7th International Conference on the Quality of Information and Communications Technology, QUATIC 2010",,,"5655669","337","342",,19,"10.1109/QUATIC.2010.60","https://www.scopus.com/inward/record.uri?eid=2-s2.0-78751565069&doi=10.1109%2fQUATIC.2010.60&partnerID=40&md5=e00d5b1d020b4f2dfa07f5702010ec90","QUASAR, CITI, Universidade Nova de Lisboa, Caparica, Portugal; FCT, CITI, Universidade Nova de Lisboa, Caparica, Portugal","Bryton, S., QUASAR, CITI, Universidade Nova de Lisboa, Caparica, Portugal; Brito E Abreu, F., QUASAR, CITI, Universidade Nova de Lisboa, Caparica, Portugal; Monteiro, M., FCT, CITI, Universidade Nova de Lisboa, Caparica, Portugal","Guidelines for refactoring are meant to improve software systems internal quality and are widely acknowledged as among software's best practices. However, such guidelines remain mostly qualitative in nature. As a result, judgments on how to conduct refactoring processes remain mostly subjective and therefore non-automatable, prone to errors and unrepeatable. The detection of the Long Method code smell is an example. To address this problem, this paper proposes a technique to detect Long Method objectively and automatically, using a Binary Logistic Regression model calibrated by expert's knowledge. The results of an experiment illustrating the use of this technique are reported. © 2010 IEEE.","Binary Logistic Regression; Code smells; Long Method; Refactoring process","Best-practices; Binary logistic regression; Code smell; Internal quality; Long Method; Refactorings; Software systems; Information technology; Odors; Regression analysis",,,,,,,,,,,,"Bryton, S.; QUASAR, , Caparica, Portugal; email: bryton@di.fct.unl.pt",,,,9780769542416,,,"English","Proc. - Int. Conf. Qual. Inf. Commun. Technol., QUATIC",Conference Paper,"Final","",Scopus,2-s2.0-78751565069
"Chatzigeorgiou A., Manakos A.","6701702023;36810074900;","Investigating the evolution of bad smells in object-oriented code",2010,"Proceedings - 7th International Conference on the Quality of Information and Communications Technology, QUATIC 2010",,,"5654794","106","115",,105,"10.1109/QUATIC.2010.16","https://www.scopus.com/inward/record.uri?eid=2-s2.0-78751548749&doi=10.1109%2fQUATIC.2010.16&partnerID=40&md5=3b8a33f8ec5de35f43c6fc214336ba48","Department of Applied Informatics, University of Macedonia, Thessaloniki, Greece","Chatzigeorgiou, A., Department of Applied Informatics, University of Macedonia, Thessaloniki, Greece; Manakos, A., Department of Applied Informatics, University of Macedonia, Thessaloniki, Greece","Software design problems are known and perceived under many different terms such as bad smells, flaws, non-compliance to design principles, violation of heuristics, excessive metric values and antipatterns, signifying the importance of handling them in the construction and maintenance of software. Once a design problem is identified, it can be removed by applying an appropriate refactoring, improving in most cases several aspects of quality such as maintainability, comprehensibility and reusability. This paper, taking advantage of recent advances and tools in the identification of non-trivial bad smells, explores the presence and evolution of such problems by analyzing past versions of code. Several interesting questions can be investigated such as whether the number of problems increases with the passage of software generations, whether problems vanish by time or only by targeted human intervention, whether bad smells occur in the course of evolution of a module or exist right from the beginning and whether refactorings targeting at smell removal are frequent. In contrast to previous studies that investigate the application of refactorings in the history of a software project, we attempt to study the subject from the point of view of the problems themselves distinguishing deliberate maintenance activities from the removal of design problems as a side effect of software evolution. Results are discussed for two open-source systems and three bad smells. © 2010 IEEE.","Bad smell; Evolution; Refactoring; Software history; Software repositories","Bad smell; Evolution; Refactorings; Software history; Software repositories; Computer software maintenance; Computer software selection and evaluation; Design; Information technology; Maintainability; Odors; Reusability; Software design",,,,,,,,,,,,"Chatzigeorgiou, A.; Department of Applied Informatics, , Thessaloniki, Greece; email: achat@uom.gr",,,,9780769542416,,,"English","Proc. - Int. Conf. Qual. Inf. Commun. Technol., QUATIC",Conference Paper,"Final","",Scopus,2-s2.0-78751548749
"Ferenc R.","6603559878;","Bug forecast: A method for automatic bug prediction",2010,"Communications in Computer and Information Science","117 CCIS",,,"283","295",,3,"10.1007/978-3-642-17578-7_28","https://www.scopus.com/inward/record.uri?eid=2-s2.0-78651089155&doi=10.1007%2f978-3-642-17578-7_28&partnerID=40&md5=72bd2235e94242947bc8a5a983f31530","Department of Software Engineering, University of Szeged, H-6720 Szeged, Árpád tér 2, Hungary","Ferenc, R., Department of Software Engineering, University of Szeged, H-6720 Szeged, Árpád tér 2, Hungary","In this paper we present an approach and a toolset for automatic bug prediction during software development and maintenance. The toolset extends the Columbus source code quality framework, which is able to integrate into the regular builds, analyze the source code, calculate different quality attributes like product metrics and bad code smells; and monitor the changes of these attributes. The new bug forecast toolset connects to the bug tracking and version control systems and assigns the reported and fixed bugs to the source code classes from the past. It then applies machine learning methods to learn which values of which quality attributes typically characterized buggy classes. Based on this information it is able to predict bugs in current and future versions of the classes. The toolset was evaluated on an industrial software system developed by a large software company called evosoft. We studied the behavior of the toolset through a 1,5 year development period during which 128 snapshots of the software were analyzed. The toolset reached an average bug prediction precision of 72%, reaching many times 100%. We concentrated on high precision, as the primary purpose of the toolset is to aid software developers and testers in pointing out the classes which contain bugs with a high probability and keep the number of false positives relatively low. © 2010 Springer-Verlag Berlin Heidelberg.","bad code smells; bug prediction; machine learning; software product metrics","Bad code smells; bug prediction; Bug tracking; Columbus; False positive; High precision; High probability; Industrial software; Machine learning methods; Machine-learning; Prediction precision; Product metrics; Quality attributes; Software company; Software developer; Software development; Software products; Source codes; Toolsets; Version control system; Computer software maintenance; Computer software selection and evaluation; Forecasting; Learning systems; Odors; Software design; Program debugging",,,,,,,,,,,,"Ferenc, R.; Department of Software Engineering, H-6720 Szeged, Árpád tér 2, Hungary; email: ferenc@inf.u-szeged.hu",,,18650929,3642175775; 9783642175770,,,"English","Commun. Comput. Info. Sci.",Conference Paper,"Final","",Scopus,2-s2.0-78651089155
"Murphy-Hill E., Black A.P.","16307910100;7201755270;","An interactive ambient visualization for code smells",2010,"Proceedings of the ACM Conference on Computer and Communications Security",,,,"5","14",,95,"10.1145/1879211.1879214","https://www.scopus.com/inward/record.uri?eid=2-s2.0-78650855103&doi=10.1145%2f1879211.1879214&partnerID=40&md5=740f0e6bef8bb98652230f674420978a","Department of Computer Science, North Carolina State University, Raleigh, NC, United States; Department of Computer Science, Portland State University, Portland, OR, United States","Murphy-Hill, E., Department of Computer Science, North Carolina State University, Raleigh, NC, United States; Black, A.P., Department of Computer Science, Portland State University, Portland, OR, United States","Code smells are characteristics of software that indicate that code may have a design problem. Code smells have been proposed as a way for programmers to recognize the need for restructuring their software. Because code smells can go unnoticed while programmers are working, tools called smell detectors have been developed to alert programmers to the presence of smells in their code, and to help them understand the cause of those smells. In this paper, we propose a novel smell detector called Stench Blossom that provides an interactive ambient visualization designed to first give programmers a quick, high-level overview of the smells in their code, and then, if they wish, to help in understanding the sources of those code smells. We also describe a laboratory experiment with 12 programmers that tests several hypotheses about our tool. Our findings suggest that programmers can use our tool effectively to identify smells and to make refactoring judgements. This is partly because the tool serves as a memory aid, and partly because it is more reliable and easier to use than heuristics for analyzing smells. Copyright 2010 ACM.","Code smells; Refactoring; Software; Usability","Code smell; Design problems; Laboratory experiments; Refactorings; Software; Usability; Visualization; Odors",,,,,,,,,,,,"Murphy-Hill, E.; Department of Computer Science, , Raleigh, NC, United States; email: emerson@csc.ncsu.edu",,,15437221,9781450304948,,,"English","Proc ACM Conf Computer Commun Secur",Conference Paper,"Final","",Scopus,2-s2.0-78650855103
"Schumacher J., Zazworka N., Shull F., Seaman C., Shaw M.","56214916500;23479077900;6603060816;7004521032;36848532700;","Building empirical support for automated code smell detection",2010,"ESEM 2010 - Proceedings of the 2010 ACM-IEEE International Symposium on Empirical Software Engineering and Measurement",,,"1852797","","",,67,"10.1145/1852786.1852797","https://www.scopus.com/inward/record.uri?eid=2-s2.0-78149252929&doi=10.1145%2f1852786.1852797&partnerID=40&md5=c7c0975198294d17e5ca0e673ae50509","University of Applied Sciences, Mannheim, Germany; Fraunhofer Center, College Park, MD, United States; UMBC, Baltimore, MD, United States","Schumacher, J., University of Applied Sciences, Mannheim, Germany; Zazworka, N., Fraunhofer Center, College Park, MD, United States; Shull, F., Fraunhofer Center, College Park, MD, United States; Seaman, C., Fraunhofer Center, College Park, MD, United States, UMBC, Baltimore, MD, United States; Shaw, M., Fraunhofer Center, College Park, MD, United States","Identifying refactoring opportunities in software systems is an important activity in today's agile development environments. The concept of code smells has been proposed to characterize different types of design shortcomings in code. Additionally, metric-based detection algorithms claim to identify the ""smelly"" components automatically. This paper presents results for an empirical study performed in a commercial environment. The study investigates the way professional software developers detect god class code smells, then compares these results to automatic classification. The results show that, even though the subjects perceive detecting god classes as an easy task, the agreement for the classification is low. Misplaced methods are a strong driver for letting subjects identify god classes as such. Earlier proposed metric-based detection approaches performed well compared to the human classification. These results lead to the conclusion that an automated metric-based pre-selection decreases the effort spent on manual code inspections. Automatic detection accompanied by a manual review increases the overall confidence in the results of metric-based classifiers. © 2010 ACM.","code inspection; code smells; empirical study; god class; maintainability","Agile development environments; Automated code; Automated metric; Automatic classification; Automatic Detection; Class-code; Code inspections; Code smell; Detection algorithm; Detection approach; Empirical studies; empirical study; god class; Pre-selection; Professional software; Refactorings; Software systems; Maintainability; Odors; Software engineering; Inspection",,,,,,,,,,,,"Schumacher, J.; University of Applied Sciences, Mannheim, Germany; email: jan@schuma.eu",,,,9781450300391,,,"English","ESEM - Proce. ACM-IEEE Int. Symp. Empir. Softw. Eng. Measur.",Conference Paper,"Final","",Scopus,2-s2.0-78149252929
[No author name available],[No author id available],"ESEM 2010 - Proceedings of the 2010 ACM-IEEE International Symposium on Empirical Software Engineering and Measurement",2010,"ESEM 2010 - Proceedings of the 2010 ACM-IEEE International Symposium on Empirical Software Engineering and Measurement",,,,"","",411,,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-78149240562&partnerID=40&md5=c574573b7019091616d77160d2a11a3d",,"","The proceedings contain 68 papers. The topics discussed include: understanding the impact of code and process metrics on post-release defects: a case study on the eclipse project; an effective fault aware test case prioritization by incorporating a fault localization technique; a machine learning approach for text categorization of fixing-issue commits on CVS; object oriented design pattern decay: a taxonomy; building empirical support for automated code smell detection; strengthening the empirical analysis of the relationship between Linus' law and software security; test case selection and prioritization: risk-based or design-based?; an empirical investigation into a large-scale Java open source code repository; a survey of scientific software development; transition from a plan-driven process to scrum - a longitudinal case study on software quality; and are developers complying with the process: an XP study.",,,,,,,,,,,,,,,,,,9781450300391,,,"English","ESEM - Proce. ACM-IEEE Int. Symp. Empir. Softw. Eng. Measur.",Conference Review,"Final","",Scopus,2-s2.0-78149240562
"Bancroft J.E., Keifer S.B., Keene W.E.","36623364700;37071017600;7005070428;","Shigellosis from an interactive fountain: Implications for regulation",2010,"Journal of Environmental Health","73","4",,"16","20",,4,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-78650662376&partnerID=40&md5=ba271e317def2c2db76ea4f23d805245","Clinical Epidemiologist, Oregon Public Health Division, 800 NE Oregon St., Suite 772, Portland, OR 97232, United States","Bancroft, J.E., Clinical Epidemiologist, Oregon Public Health Division, 800 NE Oregon St., Suite 772, Portland, OR 97232, United States; Keifer, S.B., Clinical Epidemiologist, Oregon Public Health Division, 800 NE Oregon St., Suite 772, Portland, OR 97232, United States; Keene, W.E., Clinical Epidemiologist, Oregon Public Health Division, 800 NE Oregon St., Suite 772, Portland, OR 97232, United States","In July 2003, the authors investigated an outbreak of Shigella sonna infections in Marion County, Oregon. Nineteen confirmed and 37 presumptive cases, mostly young children, were identified. A casecontrol study implicated play in an interactive fountain in a city park (matched odds ratio undefined; p < .002). The association was confirmed by a cohort study among local schoolchildren (RR [relative risk] = 12.6, p < .001) that allowed the authors to estimate that >500 persons became ill. Fountain design flaws and inadequate maintenance set the stage for the outbreak. In 2007, the authors surveyed state health departments to assess rules and regulations governing interactive fountains. Thirty of 48 states responding (62%) reported public health regulation of fountains; standards and enforcement capacity varied. Regulation is a relatively new phenomenon; only 13 states (27%) had rules before 2000. A lack of enforceable design and maintenance standards increases the risk of enteric disease transmission at these increasingly popular venues.",,"fresh water; bacterial disease; child health; disease transmission; governance approach; health policy; health risk; law enforcement; play; regulatory approach; young population; article; case control study; child; cohort analysis; disease transmission; epidemic; female; human; infection control; male; methodology; microbiology; preschool child; questionnaire; shigellosis; standard; statistics; United States; water pollution; Case-Control Studies; Child; Child, Preschool; Cohort Studies; Communicable Disease Control; Disease Outbreaks; Dysentery, Bacillary; Female; Fresh Water; Humans; Male; Oregon; Questionnaires; Water Microbiology; Water Pollution; Marion County [Oregon]; Oregon; United States; Shigella",,,,,,,,,,,,"Bancroft, J. E.; Clinical Epidemiologist, 800 NE Oregon St., Suite 772, Portland, OR 97232, United States; email: june.e.bancroft@state.or.us",,,00220892,,JEVHA,"21133311","English","J. Environ. Health",Article,"Final","",Scopus,2-s2.0-78650662376
"Arévalo G., Ducasse S., Gordillo S., Nierstrasz O.","8706527300;6701521591;55973237000;6602127759;","Generating a catalog of unanticipated schemas in class hierarchies using Formal Concept Analysis",2010,"Information and Software Technology","52","11",,"1167","1187",,18,"10.1016/j.infsof.2010.05.010","https://www.scopus.com/inward/record.uri?eid=2-s2.0-77956404120&doi=10.1016%2fj.infsof.2010.05.010&partnerID=40&md5=94e6ed9fc4a5a95adfc16f025318b8d2","FI - Universidad Austral, Avda. Juan de Garay 125, AR-1063, Buenos Aires, Argentina; LIFIA, UNLP, 50 y 115, AR-1900, La Plata, Argentina; INRIA Lille - Nord Europe- ADAM Team, Parc Scientifique de la Haute Borne, 40 Avenue Halley, FR-59650, Villeneuve d'Ascq, France; SCG - IAM, Universitaet Bern, Neubrückstrasse 10, CH-3012, Bern, Switzerland; CICPBA, 526 between 10 and 11, AR-1900, La Plata, Argentina; CONICET, Av. Rivadavia 1917, AR-1033, Buenos Aires, Argentina","Arévalo, G., FI - Universidad Austral, Avda. Juan de Garay 125, AR-1063, Buenos Aires, Argentina, CONICET, Av. Rivadavia 1917, AR-1033, Buenos Aires, Argentina; Ducasse, S., INRIA Lille - Nord Europe- ADAM Team, Parc Scientifique de la Haute Borne, 40 Avenue Halley, FR-59650, Villeneuve d'Ascq, France; Gordillo, S., LIFIA, UNLP, 50 y 115, AR-1900, La Plata, Argentina, CICPBA, 526 between 10 and 11, AR-1900, La Plata, Argentina; Nierstrasz, O., SCG - IAM, Universitaet Bern, Neubrückstrasse 10, CH-3012, Bern, Switzerland","Context: Inheritance is the cornerstone of object-oriented development, supporting conceptual modeling, subtype polymorphism and software reuse. But inheritance can be used in subtle ways that make complex systems hard to understand and extend, due to the presence of implicit dependencies in the inheritance hierarchy. Objective: Although these dependencies often specify well-known schemas (i.e., recurrent design or coding patterns, such as hook and template methods), new unanticipated dependency schemas arise in practice, and can consequently be hard to recognize and detect. Thus, a developer making changes or extensions to an object-oriented system needs to understand these implicit contracts defined by the dependencies between a class and its subclasses, or risk that seemingly innocuous changes break them. Method: To tackle this problem, we have developed an approach based on Formal Concept Analysis. Our Formal Concept Analysis based-Reverse Engineering methodology (FoCARE) identifies undocumented hierarchical dependencies in a hierarchy by taking into account the existing structure and behavior of classes and subclasses. Results: We validate our approach by applying it to a large and non-trivial case study, yielding a catalog of hierarchy schemas, each one composed of a set of dependencies over methods and attributes in a class hierarchy. We show how the discovered dependency schemas can be used not only to identify good design practices, but also to expose bad smells in design, thereby helping developers in initial reengineering phases to develop a first mental model of a system. Although some of the identified schemas are already documented in existing literature, with our approach based on Formal Concept Analysis (FCA), we are also able to identify previously unidentified schemas. Conclusions: FCA is an effective tool because it is an ideal classification mining tool to identify commonalities between software artifacts, and usually these commonalities reveal known and unknown characteristics of the software artifacts. We also show that once a catalog of useful schemas stabilizes after several runs of FoCARE, the added cost of FCA is no longer needed. © 2010 Elsevier B.V. All rights reserved.","Class hierarchy schemas; Formal Concept Analysis; Object-oriented development; Source code analysis","Class hierarchies; Classification mining; Coding patterns; Complex systems; Conceptual modeling; Design practice; Effective tool; Engineering methodology; Existing structure; Formal Concept Analysis; Inheritance hierarchies; Mental model; Non-trivial; Object oriented; Object-oriented system; Schemas; Software artifacts; Software Re-use; Source code analysis; Template methods; Computer software reusability; Libraries; Reverse engineering; Object oriented programming","Schweizerischer Nationalfonds zur Förderung der Wissenschaftlichen Forschung, SNF: 200020-121594","We thank Simon Denier, Andres Fortier, Alejandra Garrido, Jannik Laval and Lukas Renggli for useful comments that helped us to improve this paper. The last author gratefully acknowledges the financial support of the Swiss National Science Foundation for the project “Bringing Models Closer to Code” (SNF Project No. 200020-121594, October 2008–September 2010).",,,,,,,,,,"Arévalo, G.; FI - Universidad Austral, Avda. Juan de Garay 125, AR-1063, Buenos Aires, Argentina; email: garevalo@austral.edu.ar",,,09505849,,ISOTE,,"English","Inf Software Technol",Conference Paper,"Final","All Open Access, Green",Scopus,2-s2.0-77956404120
"Guo Y., Seaman C., Zazworka N., Shull F.","35205289100;7004521032;23479077900;6603060816;","Domain-specific tailoring of code smells: An empirical study",2010,"Proceedings - International Conference on Software Engineering","2",,,"167","170",,27,"10.1145/1810295.1810321","https://www.scopus.com/inward/record.uri?eid=2-s2.0-77954701746&doi=10.1145%2f1810295.1810321&partnerID=40&md5=0f9b3e060bf043d5b0a8d6e624f6e4f3","Department of Information Systems, University of Maryland Baltimore County, Baltimore, MD 21250, United States; Fraunhofer Center for Experimental Software Engineering, College Park, MD 20740, United States","Guo, Y., Department of Information Systems, University of Maryland Baltimore County, Baltimore, MD 21250, United States; Seaman, C., Department of Information Systems, University of Maryland Baltimore County, Baltimore, MD 21250, United States; Zazworka, N., Fraunhofer Center for Experimental Software Engineering, College Park, MD 20740, United States; Shull, F., Fraunhofer Center for Experimental Software Engineering, College Park, MD 20740, United States","Code smells refer to commonly occurring patterns in source code that indicate poor programming practices or code decay. Detecting code smells helps developers find design problems that can cause trouble in future maintenance. Detection rules for code smells, based on software metrics, have been proposed, but they do not take domain-specific characteristics into consideration. In this study we investigate whether such generic heuristics can be tailored to include domain-specific factors. Input into these domain-specific heuristics comes from an iterative empirical field study in a software maintenance project. The results yield valuable insight into code smell detection. © 2010 ACM.","code smells; domain-specific; empirical study","Code smell; Design problems; Detection rules; Domain specific; Empirical studies; Field studies; Software maintenance; Software metrics; Source codes; Computer software; Odors; Computer software maintenance",,,,,,,,,,,,"Guo, Y.; Department of Information Systems, , Baltimore, MD 21250, United States; email: yuepu.guo@umbc.edu",,,02705257,9781605587196,PCSED,,"English","Proc Int Conf Software Eng",Conference Paper,"Final","",Scopus,2-s2.0-77954701746
"Luo Y., Hoss A., Carver D.L.","57199125729;16175025800;7006941332;","An ontological identification of relationships between anti-patterns and code smells",2010,"IEEE Aerospace Conference Proceedings",,,"5446811","","",,8,"10.1109/AERO.2010.5446811","https://www.scopus.com/inward/record.uri?eid=2-s2.0-77952818058&doi=10.1109%2fAERO.2010.5446811&partnerID=40&md5=3ba0b246ba1cb86dd7dda2e3b9ebf8d0","162 Coates Hall, Software Engineering Lab., Louisiana State University, United States","Luo, Y., 162 Coates Hall, Software Engineering Lab., Louisiana State University, United States; Hoss, A., 162 Coates Hall, Software Engineering Lab., Louisiana State University, United States; Carver, D.L., 162 Coates Hall, Software Engineering Lab., Louisiana State University, United States","Ensuring quality in software development is a challenging process. The concepts of anti-patterns and code smells utilize the knowledge of known problems to improve the quality of current and future software development. However, the knowledge and understanding of these indicators of low quality software is still insufficient to resolve many of the problems they represent. The identification and definition of anti-patterns is a heuristic process. Additionally, minimal research exists addressing the relationships between or among code smells and anti-patterns. Software quality issues such as understandability and maintainability can be improved by identifying and resolving anti-patterns associated with code smells as well as preventing code smells before coding begins. We present an ontological representation of the relationships between anti-patterns and code smells to enhance the understanding of these concepts with the goal of improving software quality. ©2010 IEEE.",,"Anti-patterns; Code smell; Low qualities; Ontological representation; Software development; Software Quality; Understandability; Maintainability; Odors; Ontology; Software design; Computer software selection and evaluation",,,,,,,,,,,,"Luo, Y.; 162 Coates Hall, United States; email: yluo2@lsu.edu",,,1095323X,9781424438884,,,"English","IEEE Aerosp. Conf. Proc.",Conference Paper,"Final","",Scopus,2-s2.0-77952818058
"Murthy P.L.N., Phoenix S.L.","55631686400;7005629413;","Designing of a fleet-leader program for carbon composite overwrapped pressure vessels",2009,"Collection of Technical Papers - AIAA/ASME/ASCE/AHS/ASC Structures, Structural Dynamics and Materials Conference",,,"2009-2517","","",,,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-84855621584&partnerID=40&md5=7441d07f5df2c19c0a981d878d43dbe4","NASA Glenn Research Center, Mechanics and Durability Branch, MS 49-7, 21000 Brook Park Rd., Cleveland, OH, 44135, United States; Department of Theoretical and Applied Mechanics, Cornell University, Ithaca, NY, 14853, United States","Murthy, P.L.N., NASA Glenn Research Center, Mechanics and Durability Branch, MS 49-7, 21000 Brook Park Rd., Cleveland, OH, 44135, United States; Phoenix, S.L., Department of Theoretical and Applied Mechanics, Cornell University, Ithaca, NY, 14853, United States","Composite Overwrapped Pressure Vessels (COPVs) are often used for storing pressurant gases on board spacecraft when mass saving is a prime requirement. Substantial weight savings can be achieved compared to all metallic pressure vessels. For example, on the Space Shuttle, replacement of all metallic pressure vessels with Kevlar COPVs resulted in a weight savings of about 30%. Mass critical space applications such as the Aries and Orion vehicles are currently being planned to use as many COPVs as possible in place of all-metallic pressure vessels to minimize the overall mass of the vehicle. Due to the fact that overwraps are subjected to sustained loads during long periods of a mission, stress rupture failure is a major concern. It is, therefore, important to ascertain the reliability of these vessels by analysis, since it is practically impossible to show by experimental testing the reliability of flight quality vessels. Also, it is a common practice to set aside flight quality vessels as ""fleet leaders"" in a test program where these vessels are subjected to slightly accelerated operating conditions so that they lead the actual flight vessels both in time and load. The intention of fleet leaders is to provide advanced warning if there is a serious design flaw in the vessels so that a major disaster in the flight vessels can be averted with advance warning. On the other hand, the accelerating conditions must be not so severe as to be prone to false alarms. The primary focus of the present paper is to provide an analytical basis for designing a viable fleet leader program for Carbon COPVs. The analysis is based on a stress rupture behavior model incorporating Weibull statistics and power-law sensitivity of life to fiber stress level.",,"Actual flight; Advanced warnings; Behavior model; Carbon composites; Composite overwrapped pressure vessels; Design flaws; Experimental testing; False alarms; Fiber stress; Flight quality; Mass savings; Metallic pressure vessels; On-board spacecrafts; Operating condition; Power-law sensitivity; Pressurant gas; Stress rupture; Sustained loads; Test program; Weibull statistics; Weight saving; Carbon carbon composites; Combinatorial optimization; Design; Manned space flight; Reliability analysis; Space applications; Space shuttles; Structural dynamics; Pressure vessels",,,,,,,,,,,,"Murthy, P. L. N.; NASA Glenn Research Center, 21000 Brook Park Rd., Cleveland, OH, 44135, United States",,,02734508,9781563479731,CPSCD,,"English","Collect Tech Pap AIAA ASME ASCE AHS Struct Struct Dyn Mater",Conference Paper,"Final","",Scopus,2-s2.0-84855621584
"Khomh F., Vaucher S., Guéehéeneuc Y.-G., Sahraoui H.","24724747600;25926701500;35788017500;57196894039;","A bayesian approach for the detection of code and design smells",2009,"Proceedings - International Conference on Quality Software",,,"5381430","305","314",,157,"10.1109/QSIC.2009.47","https://www.scopus.com/inward/record.uri?eid=2-s2.0-77950599865&doi=10.1109%2fQSIC.2009.47&partnerID=40&md5=cf7bef33f85bbc4e20c44a02b5e79dd5","Ptidej Team, DGIGL, ÉEcole Polytechnique de Montréeal, Canada; GEODES, DIRO, Universitée de Montréeal, Canada","Khomh, F., Ptidej Team, DGIGL, ÉEcole Polytechnique de Montréeal, Canada, GEODES, DIRO, Universitée de Montréeal, Canada; Vaucher, S., GEODES, DIRO, Universitée de Montréeal, Canada; Guéehéeneuc, Y.-G., Ptidej Team, DGIGL, ÉEcole Polytechnique de Montréeal, Canada; Sahraoui, H., GEODES, DIRO, Universitée de Montréeal, Canada","The presence of code and design smells can have a severe impact on the quality of a program. Consequently, their detection and correction have drawn the attention of both researchers and practitioners who have proposed various approaches to detect code and design smells in programs. However, none of these approaches handle the inherent uncertainty of the detection process. We propose a Bayesian approach to manage this uncertainty. First, we present a systematic process to convert existing state-of-the-art detection rules into a probabilistic model. We illustrate this process by generating a model to detect occurrences of the Blob antipattern. Second, we present results of the validation of the model: we built this model on two open-source programs, GanttProject v1.10.2 and Xerces v2.7.0, and measured its accuracy. Third, we compare our model with another approach to show that it returns the same candidate classes while ordering them to minimise the quality analysts' effort. Finally, we show that when past detection results are available, our model can be calibrated using machine learning techniques to offer an improved, context-specfic detection. © 2009 IEEE.",,"Bayesian approaches; Detection process; Detection rules; Machine learning techniques; Open-source program; Probabilistic models; Systematic process; Computer software; Design; Learning algorithms; Odors; Bayesian networks",,,,,,,,,,,,"Khomh, F.; Ptidej Team, Canada; email: foutsekh@iro.umontreal.ca",,,15506002,9780769538280,,,"English","Proc. Int. Conf. Qual. Softw.",Conference Paper,"Final","",Scopus,2-s2.0-77950599865
"Figueiredo E., Sant'Anna C., Garcia A., Lucena C.","18433988600;17435516600;7404608626;26643099500;","Applying and evaluating concern-sensitive design heuristics",2009,"SBES 2009 - 23rd Brazilian Symposium on Software Engineering",,,"5336120","83","93",,13,"10.1109/SBES.2009.14","https://www.scopus.com/inward/record.uri?eid=2-s2.0-74049099507&doi=10.1109%2fSBES.2009.14&partnerID=40&md5=5fb79f0725d5cd5dd1ea9c960d60a162","Computing Department, Lancaster University, Lancaster, United Kingdom; Computer Science Department, Federal University of Bahia (UFBA), Salvador, Brazil; Informatics Department, Opus Research Group - LES, PUC-Rio, Rio de Janeiro, Brazil","Figueiredo, E., Computing Department, Lancaster University, Lancaster, United Kingdom; Sant'Anna, C., Computer Science Department, Federal University of Bahia (UFBA), Salvador, Brazil; Garcia, A., Informatics Department, Opus Research Group - LES, PUC-Rio, Rio de Janeiro, Brazil; Lucena, C., Informatics Department, Opus Research Group - LES, PUC-Rio, Rio de Janeiro, Brazil","Empirical studies have stressed that aspect-oriented decompositions can cause non-obvious flaws in the modularity of certain design concerns. Without proper design evaluation mechanisms, the identification of these flaws can become counter-productive and impractical. Nowadays, modularity assessment is mostly supported by metric-based heuristics rooted at conventional attributes, such as module cohesion and coupling. However, such conventional module-driven assessment cannot be tailored to the design concerns. This paper proposes and systematically evaluates a representative suite of concern-sensitive heuristic rules. The accuracy of the heuristics is assessed through their application to six systems. The analysis was based on the heuristics support for: (i) addressing the shortcomings of conventional metrics-based assessments, (ii) reducing the manifestation of false positives and false negatives, and (iii) finding the presence of design flaws relative to both classes and aspects. © 2009 IEEE.","Aspect-oriented software development; Metrics; Modularity assessment; Software design","Aspect-oriented; Aspect-oriented software development; Design flaws; Design heuristics; Empirical studies; False negatives; False positive; Heuristic rules; Proper design; Computer software selection and evaluation; Computer systems programming; Heuristic methods; Machine design; Software design","APQ-02932-10; Conselho Nacional de Desenvolvimento Científico e Tecnológico, CNPq: 305526/2009-0; Fundação Carlos Chagas Filho de Amparo à Pesquisa do Estado do Rio de Janeiro, FAPERJ: E-26/102.211/2009; Instituto Nacional de Ciência e Tecnologia para Engenharia de Software, INES: 479344/2010-8, 480374/2009-0, 483699/2009-8, 483882/2009-7, 573964/2008-4","This work has received funding from the following agencies and projects: Eduardo – FAPEMIG Universal grant APQ-02932-10 ; Alessandro – PUC-Rio distinguished young researcher grant , FAPERJ grant E-26/102.211/2009 , CNPq grant 305526/2009-0 ; Projects: National Institute of Science and Technology for Software Engineering (INES), and CNPq grants 479344/2010-8 , 480374/2009-0 , 483882/2009-7 , 483699/2009-8 , and 573964/2008-4 .",,,,,,,,,,"Figueiredo, E.; Computing Department, , Lancaster, United Kingdom; email: e.figueiredo@lancaster.ac.uk",,,,9780769538440,,,"English","SBES - Braz. Symp. Softw. Eng.",Conference Paper,"Final","",Scopus,2-s2.0-74049099507
"Iyengar A., Baxter A., Forster A.J.","33067888300;7103394890;35236621500;","Using Medical Emergency Teams to detect preventable adverse events",2009,"Critical Care","13","4","R126","","",,19,"10.1186/cc7983","https://www.scopus.com/inward/record.uri?eid=2-s2.0-68949097407&doi=10.1186%2fcc7983&partnerID=40&md5=0440d55a316d51a50d7e57641927709e","Department of Medicine, Faculty of Medicine, University of Ottawa, 451 Smyth Road, Ottawa, ON K1H 8M5, Canada; Department of Anaesthesia, Faculty of Medicine, University of Ottawa, 451 Smyth Road, Ottawa, ON K1H 8M5, Canada; Clinical Epidemiology Program, Ottawa Hospital Research Institute, 725 Parkdale Avenue, Ottawa, ON K1Y 4E9, Canada","Iyengar, A., Department of Medicine, Faculty of Medicine, University of Ottawa, 451 Smyth Road, Ottawa, ON K1H 8M5, Canada; Baxter, A., Department of Anaesthesia, Faculty of Medicine, University of Ottawa, 451 Smyth Road, Ottawa, ON K1H 8M5, Canada; Forster, A.J., Department of Medicine, Faculty of Medicine, University of Ottawa, 451 Smyth Road, Ottawa, ON K1H 8M5, Canada, Clinical Epidemiology Program, Ottawa Hospital Research Institute, 725 Parkdale Avenue, Ottawa, ON K1Y 4E9, Canada","Introduction: Medical Emergency Teams (METs), also known as Rapid Response Teams, are recommended as a patient safety measure. A potential benefit of implementing an MET is the capacity to systematically assess preventable adverse events, which are defined as poor outcomes caused by errors or system design flaws. We describe how we used MET calls to systematically identify preventable adverse events in an academic tertiary care hospital, and describe our surveillance results. Methods: For four weeks we collected standard information on consecutive MET calls. Within a week of the MET call, a multi-disciplinary team reviewed the information and rated the cause of the outcome using a previously developed rating scale. We classified the type and severity of the preventable adverse event. Results: We captured information on all 65 MET calls occurring during the study period. Of these, 16 (24%, 95% confidence interval [CI] 16%-36%) were felt to be preventable adverse events. The most common cause of the preventable adverse events was error in providing appropriate therapy despite an accurate diagnosis. One service accounted for a disproportionate number of preventable adverse events (n = 5, [31%, 95% CI 14%-56%]). Conclusions: Our method of reviewing MET calls was easy to implement and yielded important results. Hospitals maintaining an MET can use our method as a preventable adverse event detection system at little additional cost. © 2009 Iyengar et al.; licensee BioMed Central Ltd.",,"adult; adverse drug reaction; aged; article; controlled study; diagnostic accuracy; disease classification; disease severity; drug surveillance program; emergency health service; human; major clinical study; medication error; outcome assessment; patient safety; priority journal; tertiary health care; Canada; medical error; middle aged; patient care; Aged; Aged, 80 and over; Hospital Rapid Response Team; Humans; Medical Errors; Middle Aged; Ontario","Canadian Patient Safety Institute, CPSI; Canadian Institutes of Health Research, CIHR","AJF is supported by an Ontario Ministry of Health Career Scientist Award. This research received funding from the Canadian Patient Safety Institute, the Canadian Institute for Health Research, the Healthcare Insurance Reciprocal of Canada, the University of Ottawa Heart Institute, and the Ottawa Hospital Center for Patient Safety.",,,,,,,,,,"Forster, A.J.; Clinical Epidemiology Program, 725 Parkdale Avenue, Ottawa, ON K1Y 4E9, Canada; email: aforster@ohri.ca",,,13648535,,CRCAF,"19643017","English","Crit. Care",Article,"Final","All Open Access, Gold, Green",Scopus,2-s2.0-68949097407
"Garcia F., Lopez F.J., Cano C., Blanco A.","57225772588;7202050410;18133748900;7202800985;","FISim: A new similarity measure between transcription factor binding sites based on the fuzzy integral",2009,"BMC Bioinformatics","10",,"224","","",,12,"10.1186/1471-2105-10-224","https://www.scopus.com/inward/record.uri?eid=2-s2.0-68949147686&doi=10.1186%2f1471-2105-10-224&partnerID=40&md5=412828abe5256c0bdbc5a30a77902c24","Department of Computer Science and Artificial Intelligence, University of Granada, Granada 18071, Spain","Garcia, F., Department of Computer Science and Artificial Intelligence, University of Granada, Granada 18071, Spain; Lopez, F.J., Department of Computer Science and Artificial Intelligence, University of Granada, Granada 18071, Spain; Cano, C., Department of Computer Science and Artificial Intelligence, University of Granada, Granada 18071, Spain; Blanco, A., Department of Computer Science and Artificial Intelligence, University of Granada, Granada 18071, Spain","Background: Regulatory motifs describe sets of related transcription factor binding sites (TFBSs) and can be represented as position frequency matrices (PFMs). De novo identification of TFBSs is a crucial problem in computational biology which includes the issue of comparing putative motifs with one another and with motifs that are already known. The relative importance of each nucleotide within a given position in the PFMs should be considered in order to compute PFM similarities. Furthermore, biological data are inherently noisy and imprecise. Fuzzy set theory is particularly suitable for modeling imprecise data, whereas fuzzy integrals are highly appropriate for representing the interaction among different information sources. Results: We propose FISim, a new similarity measure between PFMs, based on the fuzzy integral of the distance of the nucleotides with respect to the information content of the positions. Unlike existing methods, FISim is designed to consider the higher contribution of better conserved positions to the binding affinity. FISim provides excellent results when dealing with sets of randomly generated motifs, and outperforms the remaining methods when handling real datasets of related motifs. Furthermore, we propose a new cluster methodology based on kernel theory together with FISim to obtain groups of related motifs potentially bound by the same TFs, providing more robust results than existing approaches. Conclusion: FISim corrects a design flaw of the most popular methods, whose measures favour similarity of low information content positions. We use our measure to successfully identify motifs that describe binding sites for the same TF and to solve real-life problems. In this study the reliability of fuzzy technology for motif comparison tasks is proven. © 2009 Garcia et al; licensee BioMed Central Ltd.",,"Binding affinities; Computational biology; Information contents; Information sources; Position frequencies; Real-life problems; Similarity measure; Transcription factor binding sites; Binding energy; Bioinformatics; Nucleotides; Transcription factors; Integral equations; transcription factor; DNA; algorithm; article; automated pattern recognition; binding affinity; binding site; cluster analysis; controlled study; DNA sequence; fuzzy system; information processing; kernel method; protein motif; sequence analysis; binding site; biology; chemistry; computer program; fuzzy logic; metabolism; methodology; molecular genetics; nucleotide sequence; sequence alignment; Algorithms; Base Sequence; Binding Sites; Cluster Analysis; Computational Biology; DNA; Fuzzy Logic; Molecular Sequence Data; Sequence Alignment; Software; Transcription Factors",,,,,,,,,,,,"Garcia, F.; Department of Computer Science and Artificial Intelligence, , Granada 18071, Spain; email: fernan@decsai.ugr.es",,,14712105,,BBMIC,"19615102","English","BMC Bioinform.",Article,"Final","All Open Access, Gold, Green",Scopus,2-s2.0-68949147686
"Thongmak M., Muenchaisri P.","6507200731;6505797100;","Maintainability metrics for aspect-oriented software",2009,"International Journal of Software Engineering and Knowledge Engineering","19","3",,"389","420",,4,"10.1142/S0218194009004234","https://www.scopus.com/inward/record.uri?eid=2-s2.0-68949107797&doi=10.1142%2fS0218194009004234&partnerID=40&md5=32d3ae325ce54ca086146cc6948a212a","Department of Computer Engineering, Faculty of Engineering, Chulalongkorn University, Bangkok, Thailand","Thongmak, M., Department of Computer Engineering, Faculty of Engineering, Chulalongkorn University, Bangkok, Thailand; Muenchaisri, P., Department of Computer Engineering, Faculty of Engineering, Chulalongkorn University, Bangkok, Thailand","Maintainability is an important factor that developers should be concerned because two-thirds of software costs involve maintenance. Aspect-oriented programming (AOP) paradigm is aimed to increase the software maintainability. It solves code tangling and code scattering problems by introducing a new modular unit, called ""aspect"". Various research works are provided to support measuring the object-oriented software, but only few studies are set up to support measuring the aspect-oriented software. This paper proposes aspect-oriented software maintainability metrics and a set of aspect-oriented design guidelines to support the metrics. By combining the proposed guidelines, object-oriented design principles, and aspect-oriented design principles, the metrics are constructed according to the Factor-Strategy (FS) quality model and the Factor-Criteria-Metric (FCM) quality model. Principle violation check definitions in the form of Boolean expressions are also defined to conduct software measurement and to fulfill the metrics. Finally, the aspect-oriented software maintainability metrics are applied to detect design principle violations in fifty AspectJ systems. The results show that for all systems their hidden flaws are exposed. Moreover, the proposed metrics are used to compare the maintainability between two versions of systems written in Java and AspectJ. © 2009 World Scientific Publishing Company.","Aspect-oriented programming; Bad smell; Design heuristics; Software maintainability; Software metrics","Aspect-oriented programming; Bad smell; Design heuristics; Software maintainability; Software metrics; Computer software maintenance; Computer systems programming; Design; Heuristic methods; Maintainability; Metric system; Object oriented programming; Software engineering; Computer software selection and evaluation",,,,,,,,,,,,"Thongmak, M.; Department of Computer Engineering, , Bangkok, Thailand; email: mathupayas@hotmail.com",,,02181940,,ISEKE,,"English","Int. J. Software Engineer. Knowledge Engineer.",Article,"Final","",Scopus,2-s2.0-68949107797
"da Silva B.C., Figueiredo E., Garcia A., Nunes D.","8605955400;18433988600;7404608626;7004634828;","Refactoring of Crosscutting Concerns with Metaphor-Based Heuristics",2009,"Electronic Notes in Theoretical Computer Science","233","C",,"105","125",,9,"10.1016/j.entcs.2009.02.064","https://www.scopus.com/inward/record.uri?eid=2-s2.0-62849101855&doi=10.1016%2fj.entcs.2009.02.064&partnerID=40&md5=7c7e3daa4c35d3d00640720166ea59e0","Institute of Informatics, Federal University of Rio Grande do Sul, Porto Alegre, Brazil; Computing Department, Lancaster University, Lancaster, United Kingdom","da Silva, B.C., Institute of Informatics, Federal University of Rio Grande do Sul, Porto Alegre, Brazil; Figueiredo, E., Computing Department, Lancaster University, Lancaster, United Kingdom; Garcia, A., Computing Department, Lancaster University, Lancaster, United Kingdom; Nunes, D., Institute of Informatics, Federal University of Rio Grande do Sul, Porto Alegre, Brazil","It has been advocated that Aspect-Oriented Programming (AOP) is an effective technique to improve software maintainability through explicit support for modularising crosscutting concerns. However, in order to take the advantages of AOP, there is a need for supporting the systematic refactoring of crosscutting concerns to aspects. Existing techniques for aspect-oriented refactoring are too fine-grained and do not take the concern structure into consideration. This paper presents two categories towards a metaphor-based classification of crosscutting concerns driven by their manifested shapes through a system's modular structure. The proposed categories provide an intuitive and fundamental terminology for detecting concern-oriented design flaws and identifying refactorings in terms of recurring crosscutting structures. On top of this classification, we define a suite of metaphor-based refactorings to guide the ""aspectisation"" of each concern category. We evaluate our technique by classifying concerns of 23 design patterns and by proposing refactorings to aspectise them according to observations made in previous empirical studies. Based on our experience, we also determine a catalogue of potential additional categories and heuristics for refactoring of crosscutting concerns. © 2009 Elsevier B.V. All rights reserved.","Aspect-oriented programming; Crosscutting concerns; Design heuristics; Metaphor-based classification; Refactoring","Design; Maintainability; Object oriented programming; Terminology; Aspect-oriented programming; Crosscutting concerns; Design heuristics; Metaphor-based classification; Refactoring; Heuristic methods","European Commission, EC: IST-33710; Coordenação de Aperfeiçoamento de Pessoal de Nível Superior, CAPES; Conselho Nacional de Desenvolvimento Científico e Tecnológico, CNPq","This work is supported in part by Brazilian Research Agencies: National Counsel of Technological and Scientific Development (CNPq); Coordination of Higher Education Staff and Graduate Studies (CAPES); and by the European Commission, grant IST-33710: Aspect-Oriented, Model-Driven Product Line Engineering (AMPLE).",,,,,,,,,,"da Silva, B.C.; Institute of Informatics, , Porto Alegre, Brazil; email: bruno.carreiro@inf.ufrgs.br",,,15710661,,,,"English","Electron. Notes Theor. Comput. Sci.",Article,"Final","All Open Access, Bronze",Scopus,2-s2.0-62849101855
"Thongmak M., Muenchaisri P.","6507200731;6505797100;","Checking design heuristics violations for aspect-oriented software and object-oriented software",2008,"17th International Conference on Software Engineering and Data Engineering, SEDE 2008",,,,"138","144",,,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-84883642338&partnerID=40&md5=97de828b04bd1dc2a2e12e00de8161fb","Department of Computer Engineering, Chulalongkorn University, Bangkok, 10330, Thailand","Thongmak, M., Department of Computer Engineering, Chulalongkorn University, Bangkok, 10330, Thailand; Muenchaisri, P., Department of Computer Engineering, Chulalongkorn University, Bangkok, 10330, Thailand","Good design can help developers maintaining software easier. Design heuristics are principles that promote the good software design. To ensure good design in a software product, metrics and measurement models are required to evaluate the software quality. This paper proposes a set of design heuristics violation check definitions to detect design flaws in software products. This flaw detection is presented in the form of Boolean expressions. It can be used to assess both object-oriented software and aspect-oriented software. The proposed definitions are validated using examples which are developed from the original design heuristics book [1]. Twenty-four design heuristics violation check definitions are qualified to be design flaw detectors.",,"Aspect-oriented software; Boolean expressions; Design heuristics; Measurement model; Object oriented software; Original design; Software products; Software Quality; Computer software selection and evaluation; Object oriented programming; Software engineering; Product design",,,,,,,,,,,,"Department of Computer Engineering, , Bangkok, 10330, Thailand",,,,9781605603360,,,"English","Int. Conf. Softw. Eng. Data Eng., SEDE",Conference Paper,"Final","",Scopus,2-s2.0-84883642338
"Valentine J.C., Cooper H.","7202986474;7202969639;","A Systematic and Transparent Approach for Assessing the Methodological Quality of Intervention Effectiveness Research: The Study Design and Implementation Assessment Device (Study DIAD)",2008,"Psychological Methods","13","2",,"130","149",,109,"10.1037/1082-989X.13.2.130","https://www.scopus.com/inward/record.uri?eid=2-s2.0-45449094803&doi=10.1037%2f1082-989X.13.2.130&partnerID=40&md5=1b1ba54cf9f491b64cc8f27fffcab6d5","Department of Educational and Counseling Psychology, College of Education and Human Development, University of Louisville; Department of Psychology and Neuroscience, Duke University","Valentine, J.C., Department of Educational and Counseling Psychology, College of Education and Human Development, University of Louisville; Cooper, H., Department of Psychology and Neuroscience, Duke University","Assessments of studies meant to evaluate the effectiveness of interventions, programs, and policies can serve an important role in the interpretation of research results. However, evidence suggests that available quality assessment tools have poor measurement characteristics and can lead to opposing conclusions when applied to the same body of studies. These tools tend to (a) be insufficiently operational, (b) rely on arbitrary post-hoc decision rules, and (c) result in a single number to represent a multidimensional construct. In response to these limitations, a multilevel and hierarchical instrument was developed in consultation with a wide range of methodological and statistical experts. The instrument focuses on the operational details of studies and results in a profile of scores instead of a single score to represent study quality. A pilot test suggested that satisfactory between-judge agreement can be obtained using well-trained raters working in naturalistic conditions. Limitations of the instrument are discussed, but these are inherent in making decisions about study quality given incomplete reporting and in the absence of strong, contextually based information about the effects of design flaws on study outcomes. © 2008 American Psychological Association.","quality scale; research synthesis; study quality; systematic review","article; human; methodology; psychology; statistical analysis; statistics; Data Interpretation, Statistical; Humans; Psychology",,,,,,,,,,,,"Valentine, J.C.; Department of Educational and Counseling Psychology, United States; email: jeff.valentine@louisville.edu",,,1082989X,,,"18557682","English","Psychol. Methods",Article,"Final","",Scopus,2-s2.0-45449094803
"Gîrba T., Ducasse S., Kuhn A., Marinescu R., Daniel R.","8334078800;6701521591;15765416400;8876469600;57197114162;","Using concept analysis to detect co-change patterns",2007,"9th International Workshop on Principles of Software Evolution, IWPSE 2007, Held in Conjunction with the 6th ESEC/FSE Joint Meeting",,,,"83","89",,24,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-53849114169&partnerID=40&md5=6d10284434d5c15632cb44d4adc5ceb6","Software Composition Group, University of Bern, Switzerland; LISTIC, University of Savoie, France; LOOSE Research Group, Technical University of Timişoara, Romania; Institute for Informatics, Technical University of München, Germany","Gîrba, T., Software Composition Group, University of Bern, Switzerland; Ducasse, S., LISTIC, University of Savoie, France; Kuhn, A., Software Composition Group, University of Bern, Switzerland; Marinescu, R., LOOSE Research Group, Technical University of Timişoara, Romania; Daniel, R., Institute for Informatics, Technical University of München, Germany","Software systems need to change over time to cope with new requirements, and due to design decisions, the changes happen to crosscut the system's structure. Understanding how changes appear in the system can reveal hidden dependencies between different entities of the system. We propose the usage of concept analysis to identify groups of entities that change in the same way and in the same time. We apply our approach at different levels of abstraction (i.e., method, class, package) and we detect fine grained changes (i.e., statements were added in a class, but no method was added there). Concept analysis is a technique that identifies entities that have the same properties, but it requires manual inspection due to the large number of candidates it detects. We propose a heuristic that dramatically eliminate the false positives. We apply our approach on two case studies and we show how we can identify hidden dependencies and detect bad smells. © 2007 ACM ISBN.","Co-change analysis; Concept analysis; Evolution analysis","Change analysis; Change patterns; Concept analysis; Design decisions; Evolution analysis; False positive; Fine grained; Levels of abstraction; Manual inspection; Software systems; Technical presentations; Computer software",,,,,,,,,,,,"Gîrba, T.; Software Composition Group, Switzerland",,,,9781595937223,,,"English","Int. Workshop Princ. Softw. Evol., IWPSE, Held Conjunction ESEC/FSE Jt. Meet.",Conference Paper,"Final","",Scopus,2-s2.0-53849114169
"Counsell S., Mendes E.","7005059140;7103403410;","Size and frequency of class change from a refactoring perspective",2007,"3rd International IEEE Workshop on Software Evolvability 2007, SE",,,"4383093","23","28",,3,"10.1109/SE.2007.13","https://www.scopus.com/inward/record.uri?eid=2-s2.0-47349133501&doi=10.1109%2fSE.2007.13&partnerID=40&md5=0f76bcbed50a4ffac330e3d399d95dac","Department of Information Systems and Computing, Brunel University, Uxbridge, Middlesex UB8 3PH, United Kingdom; Department of Computer Science, University of Auckland, New Zealand","Counsell, S., Department of Information Systems and Computing, Brunel University, Uxbridge, Middlesex UB8 3PH, United Kingdom; Mendes, E., Department of Computer Science, University of Auckland, New Zealand","A previous study by Bieman et al., investigated whether large, object-oriented classes were more susceptible to change than smaller classes. The measure of change used in the study was the frequency with which the features of a class had been changed over a specific period of time. From a refactoring perspective, the frequency of class change is of value. But even for a relatively simple refactoring such as 'Rename Method', multiple classes may undergo minor modification without any net increase in class (and system) size. In this paper, we suggest that the combination of 'versions of a class and number of added lines of code' in the bad code 'smell' detection process may give a better impression of which classes are most suitable candidates for refactoring; as such, effort in detecting bad code smells should apply to classes with a high growth rate as well as a high change frequency. To support our investigation, data relating to changes from 161 Java classes was collected. Results concluded that it is not necessarily the case that large classes are more change-prone than relatively smaller classes. Moreover, the bad code smell detection process is informed by using the combination of change frequency and class size as a heuristic. © 2007 IEEE.","LOC; Refactoring; Version","Bad code smells; Change frequency (CF); Class size; Code smell; Detection processes; Evolvability; High growth rates; International (CO); Java classes; Lines of code (LOC); Multiple classes; Object-oriented classes; Refactoring; Codes (symbols); Computer software; Spontaneous emission; Teaching; Codes (standards)",,,,,,,,,,,,"Counsell, S.; Department of Information Systems and Computing, , Uxbridge, Middlesex UB8 3PH, United Kingdom; email: steve.counsell@brunel.ac.uk",,,,0769530028; 9780769530024,,,"English","Int. IEEE Workshop Softw. Evolvability, SE",Conference Paper,"Final","",Scopus,2-s2.0-47349133501
"Kiefer C., Bernstein A., Tappolet J.","13404492600;57212626682;21744226200;","Mining software repositories with iSPARQL and a software evolution ontology",2007,"Proceedings - ICSE 2007 Workshops: Fourth International Workshop on Mining Software Repositories, MSR 2007",,,"4228647","","",,74,"10.1109/MSR.2007.21","https://www.scopus.com/inward/record.uri?eid=2-s2.0-34548706553&doi=10.1109%2fMSR.2007.21&partnerID=40&md5=21cbc22741d0816afeafab4a42d7a7e2","Department of Informatics, University of Zurich, Switzerland","Kiefer, C., Department of Informatics, University of Zurich, Switzerland; Bernstein, A., Department of Informatics, University of Zurich, Switzerland; Tappolet, J., Department of Informatics, University of Zurich, Switzerland","One of the most important decisions researchers face when analyzing the evolution of software systems is the choice of a proper data analysis/exchange format. Most existing formats have to be processed with special programs written specifically for that purpose and are not easily extendible. Most scientists, therefore, use their own database(s) requiring each of them to repeat the work of writing the import/export programs to their format. We present EvoOnt, a software repository data exchange format based on the Web Ontology Language (OWL). EvoOnt includes software, release, and bug-related information. Since OWL describes the semantics of the data, EvoOnt is (1) easily extendible, (2) comes with many existing tools, and (3) allows to derive assertions through its inherent Description Logic reasoning capabilities. The paper also shows iSPARQL - our SPARQL-based Semantic Web query engine containing similarity joins. Together with EvoOnt, iSPARQL can accomplish a sizable number of tasks sought in software repository mining projects, such as an assessment of the amount of change between versions or the detection of bad code smells. To illustrate the usefulness of EvoOnt (and iSPARQL), we perform a series of experiments with a real-world Java project. These show that a number of software analyses can be reduced to simple iSPARQL queries on an EvoOnt dataset. © 2007 IEEE.",,"Data mining; Data reduction; Database systems; Java programming language; Logic programming; Ontology; Semantics; Storage allocation (computer); Data exchange format; Description Logic; Software analyses; Web Ontology Language (OWL); Software engineering",,,,,,,,,,,,"Kiefer, C.; Department of Informatics, Switzerland; email: kiefer@ifi.unizh.ch",,,,076952950X; 9780769529509,,,"English","Proc. Workshops Fourth Int. Workshop Min. Softw. Repos.",Conference Paper,"Final","",Scopus,2-s2.0-34548706553
"Grba T., Ducasse S., Kuhn A., Marinescu R., Daniel R.","8334078800;6701521591;15765416400;8876469600;57197114162;","Using concept analysis to detect co-change patterns",2007,"International Workshop on Principles of Software Evolution (IWPSE)",,,,"83","89",,14,"10.1145/1294948.1294970","https://www.scopus.com/inward/record.uri?eid=2-s2.0-41149155018&doi=10.1145%2f1294948.1294970&partnerID=40&md5=7c793beb33ac0193ac71498bc5d0cbe3","Software Composition Group, University of Bern; LISTIC, University of Savoie; LOOSE Research Group, Technical University of Timişoara; Institute for Informatics, Technical University of München","Grba, T., Software Composition Group, University of Bern; Ducasse, S., LISTIC, University of Savoie; Kuhn, A., Software Composition Group, University of Bern; Marinescu, R., LOOSE Research Group, Technical University of Timişoara; Daniel, R., Institute for Informatics, Technical University of München","Software systems need to change over time to cope with new requirements, and due to design decisions, the changes happen to crosscut the system's structure. Understanding how changes appear in the system can reveal hidden dependencies between different entities of the system. We propose the usage of concept analysis to identify groups of entities that change in the same way and in the same time. We apply our approach at different levels of abstraction (i.e., method, class, package) and we detect fine grained changes (i.e., statements were added in a class, but no method was added there). Concept analysis is a technique that identifies entities that have the same properties, but it requires manual inspection due to the large number of candidates it detects. We propose a heuristic that dramatically eliminate the false positives. We apply our approach on two case studies and we show how we can identify hidden dependencies and detect bad smells. Copyright 2007 ACM.","Co-change analysis; Concept analysis; Evolution analysis","Abstracting; Software engineering; Software packages; Co-change analysis; Concept analysis; Evolution analysis; Requirements engineering",,,,,,,,,,,,"Grba, T.; Software Composition Group, Switzerland",,"Institute of Electrical and Electronics Engineers Inc.",,9781595937223,,,"English","Int. Workshop Princ. Softw. Evol. (IWSPE)",Conference Paper,"Final","",Scopus,2-s2.0-41149155018
"Salehie M., Li S., Tahvildari L.","15136856900;7409238873;15137495200;","A metric-based heuristic framework to detect object-oriented design flaws",2006,"IEEE International Conference on Program Comprehension","2006",,"1631118","159","168",,42,"10.1109/ICPC.2006.6","https://www.scopus.com/inward/record.uri?eid=2-s2.0-33845456732&doi=10.1109%2fICPC.2006.6&partnerID=40&md5=b9415f7a47ec66440df6865498d45cf4","Department of Electrical and Computer Engineering, University of Waterloo, Waterloo, Ont. N2L 3G1, Canada","Salehie, M., Department of Electrical and Computer Engineering, University of Waterloo, Waterloo, Ont. N2L 3G1, Canada; Li, S., Department of Electrical and Computer Engineering, University of Waterloo, Waterloo, Ont. N2L 3G1, Canada; Tahvildari, L., Department of Electrical and Computer Engineering, University of Waterloo, Waterloo, Ont. N2L 3G1, Canada","One of the important activities in re-engineering process is detecting design flaws. Such design flaws prevent an efficient maintenance, and further development of a system. This research proposes a novel metric-based heuristic framework to detect and locate object-oriented design flaws from the source code. It is accomplished by evaluating design quality of an object-oriented system through quantifying deviations from good design heuristics and principles. While design flaws can occur at any level, the proposed approach assesses the design quality of internal and external structure of a system at the class level which is the most fundamental level of a system. In a nutshell, design flaws are detected and located systematically in two phases using a generic OO design knowledge-base. In the first phase, hotspots are detected by primitive classifiers via measuring metrics indicating a design feature (e.g. complexity). In the second phase, individual design flaws will be detected by composite classifiers using a proper set of metrics. We have chosen JBoss Application Server as the case study, due to its pure OO large size structure, and its success as an open source J2EE platform among developers. © 2006 IEEE.",,"Design features; Design flaws; JBoss Application Server; Source code; Codes (symbols); Computer aided design; Heuristic programming; Knowledge acquisition; Metric system; Servers; Object oriented programming",,,,,,,,,,,,"Salehie, M.; Department of Electrical and Computer Engineering, , Waterloo, Ont. N2L 3G1, Canada; email: msalehie@uwaterloo.ca",,,,0769526012; 9780769526010,,,"English","IEEE Int. Conf. Program Comprehension",Conference Paper,"Final","All Open Access, Green",Scopus,2-s2.0-33845456732
[No author name available],[No author id available],"Proceedings: 14th IEEE International Conference on Program Comprehension: ICPC 2006",2006,"IEEE International Conference on Program Comprehension","2006",,,"","",349,,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-71149103269&partnerID=40&md5=b20341ffbceb210c70f0185f53d29ac8",,"","The proceedings contain 40 papers. The topics discussed include: digging the development dust for refactorings; studying the evolution of software systems using change clusters; a synergistic approach to program comprehension; dynamic analysis of software systems using execution pattern mining; integrating reverse engineering tools using a service-sharing methodology; an architecture to support model driven software visualization; automated extraction of database interactions in web applications; an approach for extracting workflows from e-commerce applications; leveraged quality assessment using information retrieval techniques; a metric-based heuristic framework to detect object-oriented design flaws; dynamic data structure analysis for Java programs; profile-based approach to support comprehension of software behavior; the cognitive assignment eclipse plug-in; fluid source code views; understanding obfuscated code; and reverse engineering scripting language extensions.",,"Dynamic data structure; Execution pattern mining; Fluid source code; Service-sharing methodology; Data mining; Data structures; Dust; Electronic commerce; Heuristic methods; Reverse engineering; Computer software",,,,,,,,,,,,,,,,0769526012; 9780769526010,,,"English","IEEE Int. Conf. Program Comprehension",Conference Review,"Final","",Scopus,2-s2.0-71149103269
"Mäntylä M.V., Lassenius C.","7006843663;55896933900;","Drivers for software refactoring decisions",2006,"ISESE'06 - Proceedings of the 5th ACM-IEEE International Symposium on Empirical Software Engineering","2006",,,"297","306",,33,"10.1145/1159733.1159778","https://www.scopus.com/inward/record.uri?eid=2-s2.0-34247331422&doi=10.1145%2f1159733.1159778&partnerID=40&md5=5f7340f010cdb8abc10a3269db1ba279","Helsinki University of Technology, Software Business and Engineering Institute, P.O. Box 9210, 02015 TKK, Finland","Mäntylä, M.V., Helsinki University of Technology, Software Business and Engineering Institute, P.O. Box 9210, 02015 TKK, Finland; Lassenius, C., Helsinki University of Technology, Software Business and Engineering Institute, P.O. Box 9210, 02015 TKK, Finland","This paper presents an empirical study of drivers for software refactoring decisions. We studied the refactoring decisions made by 37 students evaluating ten methods of a purposefully constructed Java program. The decision rationales reported by the evaluators were coded to identify the drivers behind the decisions. The identified drivers were categorized into Structure, Documentation, Visual Representation, and General drivers. The evaluators had conflicting opinions both regarding the internal quality of the methods and refactoring decisions. Complex code problems were detected only by experienced evaluators. Using regression analysis, we looked at the predictive value of drivers explaining the refactoring decisions. The most salient driver leading to a favourable refactoring decision was method size. This study provides information of the refactoring decisions and helps form a basis for creating code problem detectors. By comparing automatic detection and the identified drivers we gained understanding of code problems that are difficult or impossible to detect automatically, for example Poor Algorithm. Issues detected only by experienced developers, and code problems for which the human eye surpasses automatic detection indicate good areas for developer education. Copyright 2006 ACM.","Code smells; Evolvability; Maintainability; Qualitative analysis; Refactoring","Automatic detection; Evolvability; Qualitative analysis; Software refactoring; Codes (symbols); Java programming language; Maintainability; Program documentation; Regression analysis; Students; Software engineering",,,,,,,,,,,,"Mäntylä, M.V.; Helsinki University of Technology, P.O. Box 9210, 02015 TKK, Finland; email: mika.mantyla@tkk.fi",,,,1595932186; 9781595932181,,,"English","ISESE - Proc. ACM-IEEE Int. Symp. Empir. Softw. Eng.",Conference Paper,"Final","",Scopus,2-s2.0-34247331422
"Seng O., Stammel J., Burkhart D.","12242360000;15043206600;57197457046;","Search-based determination of refactorings for improving the class structure of object-oriented systems",2006,"GECCO 2006 - Genetic and Evolutionary Computation Conference","2",,,"1909","1916",,187,"10.1145/1143997.1144315","https://www.scopus.com/inward/record.uri?eid=2-s2.0-33750271383&doi=10.1145%2f1143997.1144315&partnerID=40&md5=32aee8ee667f4867d35887ea01e6bb0e","FZI Forschungszentrum Informatik, Haid-und-Neu-Strasse 10-14, Karlsruhe, Germany","Seng, O., FZI Forschungszentrum Informatik, Haid-und-Neu-Strasse 10-14, Karlsruhe, Germany; Stammel, J., FZI Forschungszentrum Informatik, Haid-und-Neu-Strasse 10-14, Karlsruhe, Germany; Burkhart, D., FZI Forschungszentrum Informatik, Haid-und-Neu-Strasse 10-14, Karlsruhe, Germany","A software system's structure degrades over time, a phenomenon that is known as software decay or design drift. Since the quality of the structure has major impact on the maintainability of a system, the structure has to be reconditioned from time to time. Even if recent advances in the fields of automated detection of bad smells and refactorings have made life easier for software engineers, this is still a very complex and resource consuming task. Search-based approaches have turned out to be helpful in aiding a software engineer to improve the subsystem structure of a software system. In this paper we show that such techniques are also applicable when reconditioning the class structure of a system. We describe a novel search-based approach that assists a software engineer who has to perform this task by suggesting a list of refactorings. Our approach uses an evolutionary algorithm and simulated refactorings that do not change the system's externally visible behavior. The approach is evaluated using the open-source case study JHotDraw. Copyright 2006 ACM.","Design Heuristics; Evolutionary Algorithms; Refactoring; Software Metrics","Computer software maintenance; Evolutionary algorithms; Fault tolerant computer systems; Heuristic methods; Object oriented programming; Simulated annealing; Software engineering; Design Heuristics; Refactoring; Software Metrics; Computer software",,,,,,,,,,,,"Seng, O.; FZI Forschungszentrum Informatik, Haid-und-Neu-Strasse 10-14, Karlsruhe, Germany; email: seng@fzi.de",,"Association for Computing Machinery (ACM)",,1595931864; 9781595931863,,,"English","Genetic Evol. Comput. Conf.",Conference Paper,"Final","",Scopus,2-s2.0-33750271383
"Kreimer J.","9736234400;","Adaptive detection of design flaws",2005,"Electronic Notes in Theoretical Computer Science","141","4 SPEC. ISS.",,"117","136",,66,"10.1016/j.entcs.2005.02.059","https://www.scopus.com/inward/record.uri?eid=2-s2.0-28444473551&doi=10.1016%2fj.entcs.2005.02.059&partnerID=40&md5=251b1bd4e99dd4614d72441d1babe92d","Research Group Programming Languages and Compilers, Department of Computer Science, University of Paderborn, Germany","Kreimer, J., Research Group Programming Languages and Compilers, Department of Computer Science, University of Paderborn, Germany","Criteria for software quality measurement depend on the application area. In large software systems criteria like maintainability, comprehensibility and extensibility play an important role. My aim is to identify design flaws in software systems automatically and thus to avoid ""bad"" - incomprehensible, hardly expandable and changeable - program structures. Depending on the perception and experience of the searching engineer, design flaws are interpreted in a different way. I propose to combine known methods for finding design flaws on the basis of metrics with machine learning mechanisms, such that design flaw detection is adaptable to different views. This paper presents the underlying method, describes an analysis tool for Java programs and shows results of an initial case study. © 2005 Elsevier B.V. All rights reserved.","Code smell; Design flaw; Machine learning; Object-oriented design; Program analysis; Refactoring; Software quality","Design; Error detection; Java programming language; Learning systems; Maintainability; Code smell; Design flow; Object-oriented design; Program analysis; Refactoring; Software quality; Computer software",,,,,,,,,,,,"Kreimer, J.; Research Group Programming Languages and Compilers, Germany; email: jotte@uni-paderborn.de",,"Elsevier",15710661,,,,"English","Electron. Notes Theor. Comput. Sci.",Conference Paper,"Final","All Open Access, Gold",Scopus,2-s2.0-28444473551
"Tahvildari L.","15137495200;","Evolving legacy systems through a multi-objective decision process",2005,"STEP 2004 Proceedings - The 12th International Workshop on Software Technology and Engineering Practice",,,"1613372","65","75",,,"10.1109/STEP.2004.11","https://www.scopus.com/inward/record.uri?eid=2-s2.0-46249118067&doi=10.1109%2fSTEP.2004.11&partnerID=40&md5=f660308e9d52c01cf94b243ea12a3120","Dept. of Electrical and Computer Eng., University of Waterloo, ON N2L 3G1, Canada","Tahvildari, L., Dept. of Electrical and Computer Eng., University of Waterloo, ON N2L 3G1, Canada","Our previous work on improving the quality of object-oriented legacy systems includes: i) devising a quality-driven re-engineering framework [11], ii) proposing a software transformation framework based on soft-goal interdependency graphs to enhance quality [9], and iii) investigating the usage of metrics for detecting potential design flaws [10]. This paper defines a decision making process that determines a list of source-code improving transformations among several applicable transformations. The decision-making process is developed on a multi-objective decision analysis technique. This type of technique is necessary as there are a number of different, and sometimes conflicting, criterion among non-functional requirements. For the migrant system, the proposed approach uses heuristic estimates to guide the discovery process. © 2004 IEEE.",,"Administrative data processing; Computer software selection and evaluation; Computer systems; Decision theory; Legacy systems; Management information systems; Mathematical transformations; Multiobjective optimization; Object oriented programming; Problem solving; Software design; Technology; (n-1) criterion; Decision-making process (DMP); design flaws; Discovery process; Engineering practices; International (CO); Metrics (CO); multiobjective decisions; Non-functional requirements (NFR); Object oriented legacy systems; re-engineering; software technologies; Software transformation; Decision making",,,,,,,,,,,,"Tahvildari, L.; Dept. of Electrical and Computer Eng., , ON N2L 3G1, Canada; email: ltahvild@uwaterloo.ca",,,,0769522939; 9780769522937,,,"English","STEP Proc. - Int. Workshop Softw. Technol. Eng. Pract.",Conference Paper,"Final","",Scopus,2-s2.0-46249118067
"Kreimer J.","9736234400;","Adaptive recognition of software-design shortcomings [Adaptive Erkennung von Software-Entwurfsmängeln]",2005,"Informatik - Forschung und Entwicklung","19","3",,"151","161",,,"10.1007/s00450-005-0177-9","https://www.scopus.com/inward/record.uri?eid=2-s2.0-19044386252&doi=10.1007%2fs00450-005-0177-9&partnerID=40&md5=1492c5322266edacdc971e59cc9ee5ed","Institut für Informatik, Universität Paderborn, Fürstenallee 11, 33102 Paderborn, Germany","Kreimer, J., Institut für Informatik, Universität Paderborn, Fürstenallee 11, 33102 Paderborn, Germany","Criteria for software quality measurement depend on the application area. In large software systems criteria like maintainability, comprehensibility and extensibility play an important role. My aim is to identify design flaws in software systems automatically and thus to avoid ""bad"" - incomprehensible, hardly expandable and changeable - program structures. Depending on the perception and experience of the searching engineer, design flaws are interpreted in a different way. I propose to combine known methods for finding design flaws on the basis of metrics with machine learning mechanisms, such that design flaw detection is adaptable to different views. This paper presents the underlying method, describes an analysis tool for Java programs and shows results of an initial case study. © Springer-Verlag 2005.","Machine learning; Metrics; Object-oriented design; Program analysis; Refactoring; Software quality","Automation; Computer systems programming; Java programming language; Learning systems; Quality control; Systems analysis; Onject-oriented design; Program analysis; Refactoring; Software quality; Object oriented programming",,,,,,,,,,,,"Kreimer, J.; Institut Für Informatik, Fürstenallee 11, 33102 Paderborn, Germany; email: jotte@uni-paderborn",,,01783564,,,,"German","Inform. Forsch. Entwickl.",Article,"Final","All Open Access, Green",Scopus,2-s2.0-19044386252
"Laplante P.A., Neill C.J.","7005498946;7004989441;","Antipatterns: Identification, refactoring, and management",2005,"Antipatterns: Identification, Refactoring, and Management",,,,"1","289",,30,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-85055394531&partnerID=40&md5=9b916cbd3535d03ac51316a716e93fce","Graduate Faculty, The Pennsylvania State University, United States; Pennsylvania State University, United States","Laplante, P.A., Graduate Faculty, The Pennsylvania State University, United States; Neill, C.J., Pennsylvania State University, United States","AntiPatterns: Identification, Refactoring, and Management catalogs 48 bad management practices and environments common to software development, IT, and other organizations. The authors cover antipatterns of management, along with environmental/cultural antipatterns and personality antipatterns/phenotypes. Through the classification of these harmful practices, you will be able to correctly identify problems in your own work environment, and take action to correct them. The authors apply their extensive work and consultative experience, as well as the experience of the many professionals that they have known. This approach leads to a realistic treatment of antipattern concepts. Written for a wide audience of practitioners, the authors avoid a scholarly style, instead infusing the text with entertaining “gadgets,” including rambunctious and ribald sidebars, cartoons, stories, and jokes, as well as names for their antipatterns that are at once visual, iconic, humorous, and memorable. Following introductory material describing some management theory and how humans behave individually and in groups, the text provides the catalog of management and environmental antipatterns. The book then offers general advice on overcoming bad practices through successful interaction with clients, customers, peers, supervisors, and subordinates. © 2005 by Taylor & Francis Group, LLC.",,"Software design; Anti-patterns; Bad practices; Management practices; Management theory; Refactorings; Work environments; Environmental management",,,,,,,,,,,,,,"CRC Press",,9781420031249; 9780849329944,,,"English","Antipatterns: Identif., Refactoring, and Management",Book,"Final","",Scopus,2-s2.0-85055394531
"Marinescu R.","8876469600;","Measurement and quality in object-oriented design",2005,"IEEE International Conference on Software Maintenance, ICSM","2005",,"1510177","701","704",,61,"10.1109/ICSM.2005.63","https://www.scopus.com/inward/record.uri?eid=2-s2.0-33646937450&doi=10.1109%2fICSM.2005.63&partnerID=40&md5=4ed690894f80f640cb021a41d8953fae","LOOSE Research Group, Politehnica University of Timişoara, Bvd. V. Pârvan 2, 300223 Timişoara, Romania","Marinescu, R., LOOSE Research Group, Politehnica University of Timişoara, Bvd. V. Pârvan 2, 300223 Timişoara, Romania","In order to support the maintenance of object-oriented software systems, the quality of their design must be evaluated using adequate quantification means. In spite of the current extensive use of metrics, if used in isolation, metrics are oftentimes too fine grained to quantify comprehensively an investigated aspect of the design. To help the software engineer detect and localize design problems, the novel detection strategy mechanism is defined so that deviations from good-design principles and heuristics are quantified in form of metrics-based rules. Using detection strategies an engineer can directly localize classes or methods affected by a particular design flaw (e.g. God Class), rather than having to infer the real design problem from a large set of abnormal metric values. In order to reach the ultimate goal of bridging the gap between qualitative and quantitative statements about design, the dissertation proposes a novel type of quality model, called Factor-Strategy. In contrast to traditional quality models that express the goodness of design in terms of a set of metrics, this novel model relates explicitly the quality of a design to its conformance with a set of essential principles, rules and heuristics, which are quantified using detection strategies. © 2005 IEEE.",,"Computer software; Heuristic methods; Object oriented programming; Software engineering; Abnormal metric values; Design flaw; Factor-Strategy; Object-oriented software systems; Computer software maintenance",,,,,,,,,,,,"Marinescu, R.; LOOSE Research Group, Bvd. V. Pârvan 2, 300223 Timişoara, Romania; email: radum@cs.utt.ro",,"IEEE Computer Society",,0769523684; 9780769523682,,,"English","IEEE Int. Conf. Softw. Maint. ICSM",Conference Paper,"Final","All Open Access, Green",Scopus,2-s2.0-33646937450
"Crow L.H.","7005496145;","Studies and methods for improving the effectiveness of reliability tasks",2005,"Proceedings - Annual Reliability and Maintainability Symposium",,,"05A3","14","19",,5,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-27744473440&partnerID=40&md5=741519a422089e09b037e2835bb7bd9d","Crow Reliability Resources, United States; 109 Clifts Cove Blvd., Madison, AL 35758, United States; CRR, United States; American Statistical Association, United States; Institute of Environmental Sciences and Technology, United States","Crow, L.H., Crow Reliability Resources, United States, 109 Clifts Cove Blvd., Madison, AL 35758, United States, CRR, United States, American Statistical Association, United States, Institute of Environmental Sciences and Technology, United States","The main Department of Defense (DoD) document on reliability tasks from 1980 until it was rescinded by DoD in the early 1990's was Mil Std 785, Reliability Program for Systems and Equipment, Development and Production (Ref. 1). Although this document has been rescinded by DoD, it is still widely used for establishing the tasks of a reliability program. Other related documents with similar tasks are IEC International Standards, ANSI National Standards, and various industry handbooks and standards. These documents have many typical reliability management and analysis tasks in common such as prediction, allocation, worst case analyses, part selection, Failure Mode Effects and Criticality Analysis (FMECA), Failure Reporting and Corrective Action System (FRACAS), etc. DoD studies have shown that even when the basic reliability tasks are implemented the resulting system reliability is often lower than expected and often insufficient. This problem was addressed by the Panel on Statistical Methods for Testing and Evaluating Defense Systems, National Research Council (NRC) in 1998 (Ref. 2). In order to gain additional information, two DoD agencies - the Office of the Director of Operational Test and Evaluation and the Office of the Under Secretary of Defense for Acquisition, Technology, and Logistics - asked the NRC's Committee on National Statistics to initiate a series of workshops on statistical issues relevant to defense acquisition. The aim of each workshop was to inform DoD about the methods that represent the statistical state of the art and, through interactions of the statistical and defense communities, explore their relevance for DoD application. One of the workshop's recommendations (See Ref. 3) was to upgrade, or replace, DoD 3235.1-H, Test and Evaluation of System Reliability Availability and Maintainability: A Primer, (Ref. 4), with a publication that provides a more modern coverage of the relevant issues. The workshop stressed that a change in emphasis is needed, including a greater focus on test and evaluation for suitability, but more important, use of a number of techniques that can help identify design flaws and provide assessments of reliability performance much earlier in system development. The rewrite of the Primer DoD 3235.1-H is currently in progress. Significant to the NRC's recommendations to DoD and the rewrite of the Primer is the question: Just how effective are reliability tasks in identifying design flaws and correcting reliability deficiencies early in system development? Clearly the effectiveness will vary from system to system but are there data or studies that will give us insight into this issue? The focus of this paper is to provide a framework and data for addressing these questions. In particular, this paper defines a practical metric to measure the effectiveness of the reliability tasks that take place before reliability growth or other prototype testing. We will then use data from Department of Army and Bell Laboratories studies to calculate this metric for the systems discussed. In addition the paper will provide a number of proven methods for increasing the effectiveness of several reliability tasks. © 2005 IEEE.","Effectiveness metrics; Growth potential; Initial MTBF; Reliability growth; Reliability tasks","Handbooks; Military operations; Problem solving; Project management; Standards; Statistical methods; Data acquisition; Failure analysis; Reliability theory; Systems analysis; Technical presentations; Effectiveness metrics; Growth potential; Initial MTBF; Reliability growth; Reliability tasks; Reliability; Military operations; Effectiveness metrics; Growth potential; Initial MTBF; Reliability growth; Reliability tasks",,,,,,,,,,,,"Crow, L.H.109 Clifts Cove Blvd., Madison, AL 35758, United States; email: Crowrel@knology.net",,"Institute of Electrical and Electronics Engineers Inc.",0149144X,,,,"English","Proc. Annu. Reliab. Maintainability Symp.",Conference Paper,"Final","",Scopus,2-s2.0-27744473440
"Marinescu R.","8876469600;","Detection strategies: Metrics-based rules for detecting design flaws",2004,"IEEE International Conference on Software Maintenance, ICSM",,,,"350","359",,420,"10.1109/ICSM.2004.1357820","https://www.scopus.com/inward/record.uri?eid=2-s2.0-18044364407&doi=10.1109%2fICSM.2004.1357820&partnerID=40&md5=39323d2d22d648b1db9ca94052fb4276","Department of Computer Science, Politehnica Univ. of Timisoara, Bvd. V. Pârvan 2, 300223 Timişoara, Romania","Marinescu, R., Department of Computer Science, Politehnica Univ. of Timisoara, Bvd. V. Pârvan 2, 300223 Timişoara, Romania","In order to support the maintenance of an object-oriented software system, the quality of its design must be evaluated using adequate quantification means. In spite of the current extensive use of metrics, if used in isolation metrics are oftentimes too fine grained to quantify comprehensively an investigated design aspect (e.g., distribution of system's intelligence among classes). To help developers and maintainers detect and localize design problems in a system, we propose a novel mechanism - called detection strategy - for formulating metrics-based rules that capture deviations from good design principles and heuristics. Using detection strategies an engineer can directly localize classes or methods affected by a particular design flaw (e.g., God Class), rather than having to infer the real design problem from a large set of abnormal metric values. We have defined such detection strategies for capturing around ten important flaws of object-oriented design found in the literature and validated the approach experimentally on multiple large-scale case-studies. © 2004 IEEE.","Design flaws; Design heuristics; Metrics; Object-oriented design; Quality assurance","Design flaws; Design heuristics; Object-oriented design; Syntax elements; Error analysis; Heuristic methods; Quality assurance; Software engineering; Syntactics; Object oriented programming",,,,,,,,,,,,"Marinescu, R.; Department of Computer Science, Bvd. V. Pârvan 2, 300223 Timişoara, Romania; email: radum@cs.utt.ro",,,,,,,"English","IEEE Int. Conf. Softw. Maint. ICSM",Conference Paper,"Final","All Open Access, Green",Scopus,2-s2.0-18044364407
"Correa A.L., Werner C.M.L., Zaverucha G.","35618743300;7201754422;6601938210;","Object oriented design expertise reuse: An approach based on heuristics, design patterns and anti-patterns",2000,"Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)","1844",,,"336","352",,15,"10.1007/978-3-540-44995-9_20","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84945291251&doi=10.1007%2f978-3-540-44995-9_20&partnerID=40&md5=e43a35793db93b67bec32c1cd9e261ed","COPPE/UFRJ, Computer Science Department, Federal University of Rio de Janeiro, C.P. 68511, Rio de Janeiro, RJ  21945-970, Brazil; Department of Computer Science, University of Wisconsin ?- Madison, United States","Correa, A.L., COPPE/UFRJ, Computer Science Department, Federal University of Rio de Janeiro, C.P. 68511, Rio de Janeiro, RJ  21945-970, Brazil; Werner, C.M.L., COPPE/UFRJ, Computer Science Department, Federal University of Rio de Janeiro, C.P. 68511, Rio de Janeiro, RJ  21945-970, Brazil; Zaverucha, G., Department of Computer Science, University of Wisconsin ?- Madison, United States","Object Oriented (OO) languages do not guarantee that a system is flexible enough to absorb future requirements, nor that its components can be reused in other contexts. This paper presents an approach to OO design expertise reuse, which is able to detect certain constructions that compromise future expansion or modification of OO systems, and suggest their replacement by more adequate ones. Both reengineering legacy systems, and systems that are still under development are considered by the approach. A tool (OOPDTool) was developed to support the approach, comprising a knowledge base of good design constructions, that correspond to heuristics and design patterns, as well as problematic constructions (i.e., anti-patterns). © Springer-Verlag Berlin Heidelberg 2000.",,"Knowledge based systems; Legacy systems; Object oriented programming; Reusability; Anti-patterns; Design expertise; Design Patterns; Good designs; Knowledge base; Object oriented; Object oriented design; Computer software reusability",,,,,,,,,,,,,"Frakes W.B.","Springer Verlag",03029743,3540676961,,,"English","Lect. Notes Comput. Sci.",Conference Paper,"Final","",Scopus,2-s2.0-84945291251
[No author name available],[No author id available],"6th International Conference on Software Reuse, ICSR 2000",2000,"Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)","1844",,,"1","449",,,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-84945288858&partnerID=40&md5=28d7ea500be44ba6bfed624ba71e3cf0",,"","The proceedings contain 26 papers. The special focus in this conference is on Generative Reuse, Formal Domain Languages, Object Oriented Methods, Product Line Architectures, Requirements Reuse and Business Modeling. The topics include: A new control structure for transformation-based generators; a reuse-oriented specification language for real-time systems; from application domains to executable domains; reuse of knowledge at an appropriate level of abstraction; building customizable frameworks for the telecommunications domain; object oriented analysis and modeling for families of systems with UML; from incremental development to incremental reasoning; achieving extensibility through product-lines and domain-specific languages; implementing product-line features with component reuse; representing requirements on generic software in an application family model; implementation issues in product line scoping; requirements classification and reuse; reuse measurement in the ERP requirements engineering process; business modeling and component mining based on rough set theory; reasoning about software-component behavior; use and identification of components in component-based software development methods; promoting reuse with active reuse repository systems; a method to recover design patterns using software product metrics; an approach based on heuristics, design patterns and anti-patterns; patterns leveraging analysis reuse of business processes; constructional design patterns as reusable components; a two-dimensional composition framework to support software adaptability and reuse; structuring mechanisms for an object-oriented formal specification language and software reuse in an object oriented framework.",,,,,,,,,,,,,,,"Frakes W.B.","Springer Verlag",03029743,3540676961,,,"English","Lect. Notes Comput. Sci.",Conference Review,"Final","",Scopus,2-s2.0-84945288858
"McVoy L., Staelin C.","6508218127;6603139665;","LMBench: Portable tools for performance analysis",1996,"USENIX 1996 Annual Technical Conference",,,,"","",,618,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-85084160699&partnerID=40&md5=a3e8e5f41c31c648816f3d58de4ac223","Silicon Graphics, Inc, United States; Hewlett-Packard Laboratories, United States","McVoy, L., Silicon Graphics, Inc, United States; Staelin, C., Hewlett-Packard Laboratories, United States","lmbench is a micro-benchmark suite designed to focus attention on the basic building blocks of many common system applications, such as databases, simulations, software development, and networking. In almost all cases, the individual tests are the result of analysis and isolation of a customer’s actual performance problem. These tools can be, and currently are, used to compare different system implementations from different vendors. In several cases, the benchmarks have uncovered previously unknown bugs and design flaws. The results have shown a strong correlation between memory system performance and overall performance. lmbench includes an extensible database of results from systems current as of late 1995. © USENIX 1996 Annual Technical Conference.All right reserved.",,"Application programs; Software design; Basic building block; Memory systems; Micro-benchmark; Performance analysis; Performance problems; Strong correlation; System applications; System implementation; Benchmarking",,,,,,,,,,,,,,"USENIX Association",,,,,"English","USENIX Annu. Tech. Conf.",Conference Paper,"Final","",Scopus,2-s2.0-85084160699
"Bastien J.M.C., Scapin D.L.","56960063300;6603470403;","How usable are usability principles, criteria and standards ?",1995,"Advances in Human Factors/Ergonomics","20","B",,"343","348",,4,"10.1016/S0921-2647(06)80240-6","https://www.scopus.com/inward/record.uri?eid=2-s2.0-77957769710&doi=10.1016%2fS0921-2647%2806%2980240-6&partnerID=40&md5=245774bd795e81c4eeef52db1fafa8ed","INRIA, Projet de Psychologie Ergonomique Pour l'Informatique, Domaine de Voluceau, Rocquencourt, 78153 Le Chesnay Cedex, France","Bastien, J.M.C., INRIA, Projet de Psychologie Ergonomique Pour l'Informatique, Domaine de Voluceau, Rocquencourt, 78153 Le Chesnay Cedex, France; Scapin, D.L., INRIA, Projet de Psychologie Ergonomique Pour l'Informatique, Domaine de Voluceau, Rocquencourt, 78153 Le Chesnay Cedex, France","One evaluation method for human-computer interfaces, usually called expert-based evaluation, is defined as an informal method of usability analysis consisting of an analytic examination of a specified, prototyped or existing interface, with the goal of identifying ergonomic design flaws. It relies either on the evaluators' expertise (be they human factors specialists, system designers, software engineers, etc.) and/or on some human factors knowledge as available in documents such as general design guides [1], sets of guidelines [2, 3], checklists [4], standards (e.g., AFNOR, ISO, etc.), and heuristics [5, 6] or criteria [7, 8]. All of these documents have been developed for the purpose of good human-computer interface design. Paradoxically, only a few of these documents have been evaluated in terms of their validity, thoroughness, reliability, effectiveness, and their ease of use by their potential users. The paper presents available data on these issues and research work focusing on the assessment of ergonomic criteria. The aforementioned issues are then discussed together with the research needed to develop a set of ergonomic criteria [8] into a full evaluation method. © 1995 Elsevier Science B.V. All rights reserved.",,,,,,,,,,,,,,,,"CRC Press LLC",09212647,,,,"English","Adv. Hum. Factors/Ergon.",Conference Paper,"Final","",Scopus,2-s2.0-77957769710
"Colwell R.P., Lethin R.A.","7203000390;6507432521;","Latent Design Faults in the Development of the Multiflow TRACE/200",1994,"IEEE Transactions on Reliability","43","4",,"557","565",,1,"10.1109/24.370226","https://www.scopus.com/inward/record.uri?eid=2-s2.0-0028731927&doi=10.1109%2f24.370226&partnerID=40&md5=3b989cc13d763be8f8f53377e6a3095c","Intel Corporation, Hillsboro, United States; MIT Artificial Intelligence Laboratory, Cambridge, United States","Colwell, R.P., Intel Corporation, Hillsboro, United States; Lethin, R.A., MIT Artificial Intelligence Laboratory, Cambridge, United States","Several examples of design faults that appeared during the development of the Multiflow TRACE/200 series of minisupercomputers are discussed. The design flaws generally fell into a few categories: Interface mis-assumptions, instruction cache, parity-related, designer errors, CAD tools, and defective part designs (especially ground-bounce). Examples of bugs in each category are given. Random diagnostics were particularly helpful in detecting several fault classes. We conclude with a classification of the severity and time history of the bug categories. ©1994 IEEE","Case study; diagnostics; Latent fault; Multiflow; Random; VLIW","Computer aided design; Failure analysis; Program debugging; Program diagnostics; Random processes; Systems analysis; Multiflow TRACE/200 minisupercomputers; Supercomputers",,,,,,,,,,,,,,,00189529,,,,"English","IEEE Trans Reliab",Article,"Final","",Scopus,2-s2.0-0028731927
"Sharon L.","57189544096;","A Comparison of Infection Control Software for Use by Hospital Epidemiologists in Meeting the New JCAHO Standards",1990,"Infection Control & Hospital Epidemiology","11","4",,"185","190",,10,"10.1086/646147","https://www.scopus.com/inward/record.uri?eid=2-s2.0-0025410424&doi=10.1086%2f646147&partnerID=40&md5=ae298c8c466c740a93c084856d7b5068","Department of Infection Control, Pomona Valley Hospital Medical Center, Pomona, California, United States","Sharon, L., Department of Infection Control, Pomona Valley Hospital Medical Center, Pomona, California, United States","To choose a microcomputer software package for our hospital epidemiology division, the two leading commercial software packages for infection control, AICE (ICPA, Inc., Austin, Texas) and NOSO-(Epi Systematics, Inc., Ft. Meyers, Florida), were compared for the types of epidemiologic analysis likely to be required to satisfy new Joint Commission on Accreditation of Healthcare Organizations (JCAHO) 1990 Infection Control Standards. The test dataset was a surgical database of 3,235 operations with 292 (9%) wound infections. Though NOSO- was more flexible in terms of the amount of data items one could record, it required seven times longer to learn, nine times more disk space to store and two times as long to enter cases than AICE. Six simple infection control reports (i.e., line listings, crosstabulations, stratified rates and graphs) required only seven computing steps and approximately 11 minutes to process with AICE, but 22 steps and over two hours with NOSO-3. All analytic results from AICE agreed with the results obtained with the Statistical Analysis System (SAS, SAS Institute, Inc., Cary, North Carolina), but analyses such as service-specific rates performed with NOSO-differed because of a design flaw in the NOSO-data structure. © 1990, Society for the Comparative Study of Society and History. All rights reserved.",,"accreditation; article; comparative study; computer program; cross infection; human; microcomputer; standard; time; United States; Comparative Study; Cross Infection; Evaluation Studies; Human; Joint Commission on Accreditation of Healthcare Organizations; Microcomputers; Software; Time Factors; United States",,,,,,,,,,,,"Sharon, L.; Department of Infection Control, 1798 N. Garey Avenue, Pomona, CA 91767, United States",,,0899823X,,,"2332601","English","Infect. Control Hosp. Epidemiol.",Article,"Final","",Scopus,2-s2.0-0025410424
